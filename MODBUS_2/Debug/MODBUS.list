
MODBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d98  08007d98  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08007da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000354  080080f4  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  080080f4  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010768  00000000  00000000  000203c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000301c  00000000  00000000  00030b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00033b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a26  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002935a  00000000  00000000  000352e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172c1  00000000  00000000  0005e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ede4d  00000000  00000000  00075901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bdc  00000000  00000000  00163750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0016732c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006db4 	.word	0x08006db4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	08006db4 	.word	0x08006db4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b36      	ldr	r3, [pc, #216]	; (800065c <MX_GPIO_Init+0xf0>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a35      	ldr	r2, [pc, #212]	; (800065c <MX_GPIO_Init+0xf0>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b33      	ldr	r3, [pc, #204]	; (800065c <MX_GPIO_Init+0xf0>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	4b30      	ldr	r3, [pc, #192]	; (800065c <MX_GPIO_Init+0xf0>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_GPIO_Init+0xf0>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b2d      	ldr	r3, [pc, #180]	; (800065c <MX_GPIO_Init+0xf0>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <MX_GPIO_Init+0xf0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a29      	ldr	r2, [pc, #164]	; (800065c <MX_GPIO_Init+0xf0>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b27      	ldr	r3, [pc, #156]	; (800065c <MX_GPIO_Init+0xf0>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <MX_GPIO_Init+0xf0>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <MX_GPIO_Init+0xf0>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_GPIO_Init+0xf0>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f000 ff8b 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <MX_GPIO_Init+0xf4>)
 80005f6:	f000 ff85 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000600:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <MX_GPIO_Init+0xf4>)
 8000612:	f000 fdcd 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fdbe 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DE_Pin;
 8000634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_GPIO_Init+0xf4>)
 800064e:	f000 fdaf 	bl	80011b0 <HAL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	48000800 	.word	0x48000800

08000664 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800066c:	1d39      	adds	r1, r7, #4
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2201      	movs	r2, #1
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <__io_putchar+0x20>)
 8000676:	f002 facb 	bl	8002c10 <HAL_UART_Transmit>
  return ch;
 800067a:	687b      	ldr	r3, [r7, #4]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000400 	.word	0x20000400

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fb97 	bl	8000dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  et_RET et_ret = RET_UNEXPECTED;
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]

  /* Set initial state. */
  g_et_state = MAIN_STATE_INIT;
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <main+0xa4>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f84a 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f7ff ff64 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a4:	f000 fa88 	bl	8000bb8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80006a8:	f000 fa56 	bl	8000b58 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (g_et_state)
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <main+0xa4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d835      	bhi.n	8000720 <main+0x98>
 80006b4:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <main+0x34>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006cd 	.word	0x080006cd
 80006c0:	080006cf 	.word	0x080006cf
 80006c4:	080006ed 	.word	0x080006ed
 80006c8:	080006f3 	.word	0x080006f3
			  CENTI_DEBUG__Info("Main - Entering an infinite loop...");

			  /* Add code to handle the initialization error. */
			  // ...

			  while (1)
 80006cc:	e7fe      	b.n	80006cc <main+0x44>
		  /* ********** Initialization ********************************************** */

		  case MAIN_STATE_INIT:

			  /* Initialize device. */
			  et_ret = Main__Initialize();
 80006ce:	f000 f882 	bl	80007d6 <Main__Initialize>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
			  /* Add code if needed. */
			  // ...

			  /* If initialization was successfully complete, then go to loop state.
			   * Otherwise, go to initialization error state. */
			  if (et_ret < RET_OK)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b1a      	cmp	r3, #26
 80006da:	d803      	bhi.n	80006e4 <main+0x5c>
			  {
				  g_et_state = MAIN_STATE_INIT_ERROR;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <main+0xa4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
				  break;
 80006e2:	e022      	b.n	800072a <main+0xa2>
			  }

			  g_et_state = MAIN_STATE_LOOP;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <main+0xa4>)
 80006e6:	2203      	movs	r2, #3
 80006e8:	701a      	strb	r2, [r3, #0]

			  break;
 80006ea:	e01e      	b.n	800072a <main+0xa2>
			  CENTI_DEBUG__Error("Main - Loop failed!");

			  /* Add code to handle with a loop error. */
			  // ...

			  g_et_state = MAIN_STATE_LOOP;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <main+0xa4>)
 80006ee:	2203      	movs	r2, #3
 80006f0:	701a      	strb	r2, [r3, #0]
		  /* ********** Loop ******************************************************** */

		  case MAIN_STATE_LOOP:

			  /* Go to initialization state to perform a soft reset. */
			  if (FLAG_ON == f_soft_reset)
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <main+0xa8>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <main+0x82>
			  {
				  f_soft_reset = FLAG_OFF;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <main+0xa8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]

				  CENTI_DEBUG__Warning("\n\nSoftReset!\n");

				  g_et_state = MAIN_STATE_INIT;
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <main+0xa4>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]

				  break;
 8000708:	e00f      	b.n	800072a <main+0xa2>
			  }

			  /* Main Loop. */
			  et_ret = Main__Loop();
 800070a:	f000 f8a1 	bl	8000850 <Main__Loop>
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
			  /* Check for any error. */
			  if (et_ret < RET_OK)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b1a      	cmp	r3, #26
 8000716:	d807      	bhi.n	8000728 <main+0xa0>
			  {
				  g_et_state = MAIN_STATE_LOOP_ERROR;
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <main+0xa4>)
 800071a:	2202      	movs	r2, #2
 800071c:	701a      	strb	r2, [r3, #0]

				  break;
 800071e:	e004      	b.n	800072a <main+0xa2>
		  /* ********** Default ***************************************************** */

		  default:

			  /* Reinitialize. */
			  g_et_state = MAIN_STATE_INIT;
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <main+0xa4>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]

			  break;
 8000726:	e000      	b.n	800072a <main+0xa2>
			  break;
 8000728:	bf00      	nop
	  switch (g_et_state)
 800072a:	e7bf      	b.n	80006ac <main+0x24>
 800072c:	20000000 	.word	0x20000000
 8000730:	20000370 	.word	0x20000370

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	; 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	; 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fd07 	bl	8006156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075a:	f000 fef9 	bl	8001550 <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000764:	f000 f8e4 	bl	8000930 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000782:	230a      	movs	r3, #10
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f000 ff30 	bl	80015fc <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007a2:	f000 f8c5 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 faf8 	bl	8001db4 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ca:	f000 f8b1 	bl	8000930 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	; 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <Main__Initialize>:

/* USER CODE BEGIN 4 */

static et_RET Main__Initialize(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
    et_RET et_ret      = RET_UNEXPECTED;
 80007dc:	2300      	movs	r3, #0
 80007de:	71bb      	strb	r3, [r7, #6]
    int8_t num_retries = NUM_RETRIES;
 80007e0:	2303      	movs	r3, #3
 80007e2:	71fb      	strb	r3, [r7, #7]

    /* Initialize device. */
    Main__InitializeDevice();
 80007e4:	f000 f878 	bl	80008d8 <Main__InitializeDevice>
    CENTI_DEBUG__Info("Main - Initialization Started!");

    /* Initialize SoftTimer. */
    #if (defined(__CENTI_SOFTTIMER_IN_USE__))

        et_ret = SoftTimer__Initialize();
 80007e8:	f004 f980 	bl	8004aec <SoftTimer__Initialize>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71bb      	strb	r3, [r7, #6]
        CENTI_CHECK_RET(et_ret);
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	2b1a      	cmp	r3, #26
 80007f4:	d801      	bhi.n	80007fa <Main__Initialize+0x24>
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	e026      	b.n	8000848 <Main__Initialize+0x72>

        /* Wait some time before initialize devices. */
        et_ret = SoftTimer__Delay_msec(DELAY_INIT_MS);
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 f9c9 	bl	8004b94 <SoftTimer__Delay_msec>
 8000802:	4603      	mov	r3, r0
 8000804:	71bb      	strb	r3, [r7, #6]
        CENTI_CHECK_RET(et_ret);
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	2b1a      	cmp	r3, #26
 800080a:	d801      	bhi.n	8000810 <Main__Initialize+0x3a>
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	e01b      	b.n	8000848 <Main__Initialize+0x72>
    #endif

    do
    {
        /* Initialize Manager. */
        et_ret = Manager__Initialize();
 8000810:	f005 faac 	bl	8005d6c <Manager__Initialize>
 8000814:	4603      	mov	r3, r0
 8000816:	71bb      	strb	r3, [r7, #6]

        /* Check return. */
        if (et_ret < RET_OK)
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	2b1a      	cmp	r3, #26
 800081c:	d807      	bhi.n	800082e <Main__Initialize+0x58>
        {
            /* Delay between retries. */
            #if (defined(__CENTI_SOFTTIMER_IN_USE__))
                SoftTimer__Delay_msec(DELAY_RETRY_MS);
 800081e:	2364      	movs	r3, #100	; 0x64
 8000820:	4618      	mov	r0, r3
 8000822:	f004 f9b7 	bl	8004b94 <SoftTimer__Delay_msec>
            #endif

            /* Reduce the number of tries. */
            --num_retries;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	3b01      	subs	r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	71fb      	strb	r3, [r7, #7]
        }
    }
    while ((et_ret < RET_OK)    &&
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	2b1a      	cmp	r3, #26
 8000832:	d803      	bhi.n	800083c <Main__Initialize+0x66>
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dce9      	bgt.n	8000810 <Main__Initialize+0x3a>
           (num_retries > 0)    );

    /* Check if return is not RET_OK. */
    CENTI_CHECK_RET(et_ret);
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	2b1a      	cmp	r3, #26
 8000840:	d801      	bhi.n	8000846 <Main__Initialize+0x70>
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	e000      	b.n	8000848 <Main__Initialize+0x72>

    CENTI_DEBUG__Info("Main - Initialization complete!");

    return RET_OK;
 8000846:	231b      	movs	r3, #27
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <Main__Loop>:

static et_RET Main__Loop(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
    et_RET et_ret = RET_UNEXPECTED;
 8000856:	2300      	movs	r3, #0
 8000858:	71fb      	strb	r3, [r7, #7]

    /* Check if any SoftTimer has occurred. */
    #if (defined(__CENTI_SOFTTIMER_IN_USE__))
        Main__CheckSoftTimers();
 800085a:	f000 f80f 	bl	800087c <Main__CheckSoftTimers>
    #endif

    /* Perform the manager loop. */
    et_ret = Manager__Loop();
 800085e:	f005 fac9 	bl	8005df4 <Manager__Loop>
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
    CENTI_CHECK_RET(et_ret);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b1a      	cmp	r3, #26
 800086a:	d801      	bhi.n	8000870 <Main__Loop+0x20>
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	e000      	b.n	8000872 <Main__Loop+0x22>

    /* Add code if needed. */
    // ...

    return RET_OK;
 8000870:	231b      	movs	r3, #27
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <Main__CheckSoftTimers>:

#if (defined(__CENTI_SOFTTIMER_IN_USE__))

    static void Main__CheckSoftTimers(void)
    {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
        /* Add flags checks here. */
        for (uint8_t i=0; i<FLAGS_TOTAL; i++)
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	e016      	b.n	80008b6 <Main__CheckSoftTimers+0x3a>
        {
            if (SOFTTIMER_ELAPSED_STATE_ELAPSED ==
                SoftTimer__Get_ElapsedState(ET_FLAG_SOFTTIMER_INSTANCES[i]))
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <Main__CheckSoftTimers+0x50>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4413      	add	r3, r2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f004 fb01 	bl	8004e9c <SoftTimer__Get_ElapsedState>
 800089a:	4603      	mov	r3, r0
            if (SOFTTIMER_ELAPSED_STATE_ELAPSED ==
 800089c:	2b01      	cmp	r3, #1
 800089e:	d107      	bne.n	80008b0 <Main__CheckSoftTimers+0x34>
            {
                *FLAGS[i] = FLAG_ON;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <Main__CheckSoftTimers+0x54>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i<FLAGS_TOTAL; i++)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	3301      	adds	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <Main__CheckSoftTimers+0x58>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d3e2      	bcc.n	8000888 <Main__CheckSoftTimers+0xc>
            }
        }
    }
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000260 	.word	0x20000260
 80008d0:	20000258 	.word	0x20000258
 80008d4:	20000250 	.word	0x20000250

080008d8 <Main__InitializeDevice>:

/* ************************************************************************************ */
/* * Private Functions                                                                * */
/* ************************************************************************************ */
static void Main__InitializeDevice(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

		/* Initialize the device. */
		SYS_Initialize(NULL);

    #endif /* CENTI_CODE_CONFIGURATOR */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <HAL_UART_RxCpltCallback>:

#if (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))
    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
    {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
            {
                UART_0_RingBuffer__Rx_Cb(UART_HandleTypeDef *huart)
            }
        #endif
        #if (defined(__CENTI_UART_1_RINGBUFFER__))
            if (huart->Instance == USART1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_UART_RxCpltCallback+0x20>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d102      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x18>
            {
                UART_1_RingBuffer__Rx_Cb(huart);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f003 fe5a 	bl	80045b4 <UART_1_RingBuffer__Rx_Cb>
            if (huart->Instance == USART7)
            {
                UART_7_RingBuffer__Rx_Cb(UART_HandleTypeDef *huart)
            }
        #endif
    }
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013800 	.word	0x40013800

0800090c <HAL_UART_TxCpltCallback>:

    void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
    {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
            {
                UART_0_RingBuffer__Tx_Cb(UART_HandleTypeDef *huart)
            }
        #endif
        #if (defined(__CENTI_UART_1_RINGBUFFER__))
            if (huart->Instance == USART1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_UART_TxCpltCallback+0x20>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d102      	bne.n	8000924 <HAL_UART_TxCpltCallback+0x18>
            {
                UART_1_RingBuffer__Tx_Cb(huart);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f003 fe7c 	bl	800461c <UART_1_RingBuffer__Tx_Cb>
            if (huart->Instance == USART7)
            {
                UART_7_RingBuffer__Tx_Cb(UART_HandleTypeDef *huart)
            }
        #endif
    }
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40013800 	.word	0x40013800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_MspInit+0x44>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6613      	str	r3, [r2, #96]	; 0x60
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x44>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6593      	str	r3, [r2, #88]	; 0x58
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f004 fa7c 	bl	8004ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <USART1_IRQHandler+0x10>)
 80009de:	f002 f9ed 	bl	8002dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000378 	.word	0x20000378

080009ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e00a      	b.n	8000a14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009fe:	f3af 8000 	nop.w
 8000a02:	4601      	mov	r1, r0
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	b2ca      	uxtb	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf0      	blt.n	80009fe <_read+0x12>
  }

  return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e009      	b.n	8000a4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe0f 	bl	8000664 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf1      	blt.n	8000a38 <_write+0x12>
  }
  return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_close>:

int _close(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_isatty>:

int _isatty(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f005 fb7c 	bl	80061f4 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20018000 	.word	0x20018000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	20000374 	.word	0x20000374
 8000b30:	200007a0 	.word	0x200007a0

08000b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b5e:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <MX_USART1_UART_Init+0x5c>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b9c:	f001 ffea 	bl	8002b74 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ba6:	f7ff fec3 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000378 	.word	0x20000378
 8000bb4:	40013800 	.word	0x40013800

08000bb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <MX_USART2_UART_Init+0x5c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bfc:	f001 ffba 	bl	8002b74 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c06:	f7ff fe93 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000400 	.word	0x20000400
 8000c14:	40004400 	.word	0x40004400

08000c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ae      	sub	sp, #184	; 0xb8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2288      	movs	r2, #136	; 0x88
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 fa8c 	bl	8006156 <memset>
  if(uartHandle->Instance==USART1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a47      	ldr	r2, [pc, #284]	; (8000d60 <HAL_UART_MspInit+0x148>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d145      	bne.n	8000cd4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fad1 	bl	80021fc <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c60:	f7ff fe66 	bl	8000930 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c68:	4a3e      	ldr	r2, [pc, #248]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c70:	4b3c      	ldr	r3, [pc, #240]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c88:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f000 fa77 	bl	80011b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2025      	movs	r0, #37	; 0x25
 8000cc8:	f000 f9bd 	bl	8001046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ccc:	2025      	movs	r0, #37	; 0x25
 8000cce:	f000 f9d6 	bl	800107e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cd2:	e040      	b.n	8000d56 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <HAL_UART_MspInit+0x150>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d13b      	bne.n	8000d56 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fa86 	bl	80021fc <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000cf6:	f7ff fe1b 	bl	8000930 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0x14c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d42:	2307      	movs	r3, #7
 8000d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 fa2d 	bl	80011b0 <HAL_GPIO_Init>
}
 8000d56:	bf00      	nop
 8000d58:	37b8      	adds	r7, #184	; 0xb8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013800 	.word	0x40013800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40004400 	.word	0x40004400

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff fee0 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f005 fa31 	bl	8006200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fc73 	bl	8000688 <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8000db0:	08007da0 	.word	0x08007da0
  ldr r2, =_sbss
 8000db4:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8000db8:	200007a0 	.word	0x200007a0

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_Init+0x3c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_Init+0x3c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 f92a 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f80f 	bl	8000e00 <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	e001      	b.n	8000df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dee:	f7ff fda5 	bl	800093c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d023      	beq.n	8000e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_InitTick+0x70>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f935 	bl	800109a <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d809      	bhi.n	8000e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f8ff 	bl	8001046 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_InitTick+0x74>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e001      	b.n	8000e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000008 	.word	0x20000008

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000488 	.word	0x20000488

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff29 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff3e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff8e 	bl	8000f84 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5d 	bl	8000f30 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff31 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa2 	bl	8000fec <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d008      	beq.n	80010dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2204      	movs	r2, #4
 80010ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e022      	b.n	8001122 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 020e 	bic.w	r2, r2, #14
 80010ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	f003 021c 	and.w	r2, r3, #28
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d005      	beq.n	8001152 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2204      	movs	r2, #4
 800114a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e029      	b.n	80011a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 020e 	bic.w	r2, r2, #14
 8001160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f003 021c 	and.w	r2, r3, #28
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	4798      	blx	r3
    }
  }
  return status;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e17f      	b.n	80014c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8171 	beq.w	80014ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d005      	beq.n	80011f0 <HAL_GPIO_Init+0x40>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d130      	bne.n	8001252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001226:	2201      	movs	r2, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f003 0201 	and.w	r2, r3, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b03      	cmp	r3, #3
 800125c:	d118      	bne.n	8001290 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80ac 	beq.w	80014ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6613      	str	r3, [r2, #96]	; 0x60
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137a:	4a5a      	ldr	r2, [pc, #360]	; (80014e4 <HAL_GPIO_Init+0x334>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x242>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x338>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x23e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x33c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x23a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x340>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x236>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x344>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x232>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x348>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x22e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x34c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x22a>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00c      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013da:	2307      	movs	r3, #7
 80013dc:	e00a      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013de:	2305      	movs	r3, #5
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013f2:	2300      	movs	r3, #0
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001404:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_GPIO_Init+0x334>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_GPIO_Init+0x350>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_GPIO_Init+0x350>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_GPIO_Init+0x350>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f ae78 	bne.w	80011c0 <HAL_GPIO_Init+0x10>
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48001400 	.word	0x48001400
 80014fc:	48001800 	.word	0x48001800
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001520:	e002      	b.n	8001528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_PWREx_GetVoltageRange+0x18>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155e:	d130      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156c:	d038      	beq.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2232      	movs	r2, #50	; 0x32
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001594:	e002      	b.n	800159c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3b01      	subs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	d102      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f2      	bne.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015bc:	d110      	bne.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e00f      	b.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	d007      	beq.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000
 80015f4:	20000004 	.word	0x20000004
 80015f8:	431bde83 	.word	0x431bde83

080015fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e3ca      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b97      	ldr	r3, [pc, #604]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001618:	4b94      	ldr	r3, [pc, #592]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80e4 	beq.w	80017f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <HAL_RCC_OscConfig+0x4a>
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	f040 808b 	bne.w	8001754 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b01      	cmp	r3, #1
 8001642:	f040 8087 	bne.w	8001754 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x62>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e3a2      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1a      	ldr	r2, [r3, #32]
 8001662:	4b82      	ldr	r3, [pc, #520]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <HAL_RCC_OscConfig+0x7c>
 800166e:	4b7f      	ldr	r3, [pc, #508]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001676:	e005      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
 8001678:	4b7c      	ldr	r3, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001684:	4293      	cmp	r3, r2
 8001686:	d223      	bcs.n	80016d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fd55 	bl	800213c <RCC_SetFlashLatencyFromMSIRange>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e383      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169c:	4b73      	ldr	r3, [pc, #460]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a72      	ldr	r2, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	496d      	ldr	r1, [pc, #436]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ba:	4b6c      	ldr	r3, [pc, #432]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	4968      	ldr	r1, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
 80016ce:	e025      	b.n	800171c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d0:	4b66      	ldr	r3, [pc, #408]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a65      	ldr	r2, [pc, #404]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b63      	ldr	r3, [pc, #396]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4960      	ldr	r1, [pc, #384]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	495b      	ldr	r1, [pc, #364]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d109      	bne.n	800171c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fd15 	bl	800213c <RCC_SetFlashLatencyFromMSIRange>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e343      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800171c:	f000 fc4a 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001720:	4602      	mov	r2, r0
 8001722:	4b52      	ldr	r3, [pc, #328]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	4950      	ldr	r1, [pc, #320]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800172e:	5ccb      	ldrb	r3, [r1, r3]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_RCC_OscConfig+0x278>)
 800173a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800173c:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_RCC_OscConfig+0x27c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fb5d 	bl	8000e00 <HAL_InitTick>
 8001746:	4603      	mov	r3, r0
 8001748:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d052      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	e327      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d032      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a42      	ldr	r2, [pc, #264]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001768:	f7ff fb86 	bl	8000e78 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001770:	f7ff fb82 	bl	8000e78 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e310      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a36      	ldr	r2, [pc, #216]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4931      	ldr	r1, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	492c      	ldr	r1, [pc, #176]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e01a      	b.n	80017f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a29      	ldr	r2, [pc, #164]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb53 	bl	8000e78 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d6:	f7ff fb4f 	bl	8000e78 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e2dd      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x1da>
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d074      	beq.n	80018ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x21a>
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b0c      	cmp	r3, #12
 800180e:	d10e      	bne.n	800182e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d10b      	bne.n	800182e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d064      	beq.n	80018ec <HAL_RCC_OscConfig+0x2f0>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d160      	bne.n	80018ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e2ba      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x24a>
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e026      	b.n	8001894 <HAL_RCC_OscConfig+0x298>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800184e:	d115      	bne.n	800187c <HAL_RCC_OscConfig+0x280>
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a05      	ldr	r2, [pc, #20]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a02      	ldr	r2, [pc, #8]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e014      	b.n	8001894 <HAL_RCC_OscConfig+0x298>
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	08007b68 	.word	0x08007b68
 8001874:	20000004 	.word	0x20000004
 8001878:	20000008 	.word	0x20000008
 800187c:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a9f      	ldr	r2, [pc, #636]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a9c      	ldr	r2, [pc, #624]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff faec 	bl	8000e78 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fae8 	bl	8000e78 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e276      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b6:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x2a8>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fad8 	bl	8000e78 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fad4 	bl	8000e78 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e262      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x2d0>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d060      	beq.n	80019bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x310>
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d119      	bne.n	800193a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d116      	bne.n	800193a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190c:	4b7c      	ldr	r3, [pc, #496]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_OscConfig+0x328>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e23f      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	4973      	ldr	r1, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	e040      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d023      	beq.n	800198a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001942:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fa93 	bl	8000e78 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff fa8f 	bl	8000e78 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e21d      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	495f      	ldr	r1, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
 8001988:	e018      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5c      	ldr	r2, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff fa6f 	bl	8000e78 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fa6b 	bl	8000e78 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1f9      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d6:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7ff fa4a 	bl	8000e78 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff fa46 	bl	8000e78 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1d4      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ef      	beq.n	80019e8 <HAL_RCC_OscConfig+0x3ec>
 8001a08:	e01b      	b.n	8001a42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a10:	4a3b      	ldr	r2, [pc, #236]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fa2d 	bl	8000e78 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a22:	f7ff fa29 	bl	8000e78 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1b7      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ef      	bne.n	8001a22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80a6 	beq.w	8001b9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10d      	bne.n	8001a7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d118      	bne.n	8001aba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a94:	f7ff f9f0 	bl	8000e78 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9c:	f7ff f9ec 	bl	8000e78 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e17a      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4d8>
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad2:	e029      	b.n	8001b28 <HAL_RCC_OscConfig+0x52c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d115      	bne.n	8001b08 <HAL_RCC_OscConfig+0x50c>
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afc:	e014      	b.n	8001b28 <HAL_RCC_OscConfig+0x52c>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
 8001b08:	4b9c      	ldr	r3, [pc, #624]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	4a9b      	ldr	r2, [pc, #620]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b18:	4b98      	ldr	r3, [pc, #608]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a97      	ldr	r2, [pc, #604]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d016      	beq.n	8001b5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff f9a2 	bl	8000e78 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff f99e 	bl	8000e78 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e12a      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4e:	4b8b      	ldr	r3, [pc, #556]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ed      	beq.n	8001b38 <HAL_RCC_OscConfig+0x53c>
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f98b 	bl	8000e78 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff f987 	bl	8000e78 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e113      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ed      	bne.n	8001b66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b90:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	4a79      	ldr	r2, [pc, #484]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80fe 	beq.w	8001da2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	f040 80d0 	bne.w	8001d50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bb0:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d130      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d127      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d11f      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf0:	2a07      	cmp	r2, #7
 8001bf2:	bf14      	ite	ne
 8001bf4:	2201      	movne	r2, #1
 8001bf6:	2200      	moveq	r2, #0
 8001bf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d113      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d06e      	beq.n	8001d04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d069      	beq.n	8001d00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0ad      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c54:	f7ff f910 	bl	8000e78 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f90c 	bl	8000e78 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e09a      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4b40      	ldr	r3, [pc, #256]	; (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c94:	0212      	lsls	r2, r2, #8
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c9c:	0852      	lsrs	r2, r2, #1
 8001c9e:	3a01      	subs	r2, #1
 8001ca0:	0552      	lsls	r2, r2, #21
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ca8:	0852      	lsrs	r2, r2, #1
 8001caa:	3a01      	subs	r2, #1
 8001cac:	0652      	lsls	r2, r2, #25
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cb4:	0912      	lsrs	r2, r2, #4
 8001cb6:	0452      	lsls	r2, r2, #17
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	4930      	ldr	r1, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a2d      	ldr	r2, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd8:	f7ff f8ce 	bl	8000e78 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f8ca 	bl	8000e78 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e058      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cfe:	e050      	b.n	8001da2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e04f      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d148      	bne.n	8001da2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d28:	f7ff f8a6 	bl	8000e78 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f8a2 	bl	8000e78 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e030      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x734>
 8001d4e:	e028      	b.n	8001da2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d023      	beq.n	8001d9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff f889 	bl	8000e78 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	e00c      	b.n	8001d84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff f885 	bl	8000e78 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d905      	bls.n	8001d84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e013      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_OscConfig+0x7b0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ec      	bne.n	8001d6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_OscConfig+0x7b0>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4905      	ldr	r1, [pc, #20]	; (8001dac <HAL_RCC_OscConfig+0x7b0>)
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_OscConfig+0x7b4>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60cb      	str	r3, [r1, #12]
 8001d9c:	e001      	b.n	8001da2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	feeefffc 	.word	0xfeeefffc

08001db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0e7      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4970      	ldr	r1, [pc, #448]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0cf      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d908      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4960      	ldr	r1, [pc, #384]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d04c      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	4b5a      	ldr	r3, [pc, #360]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d121      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0a6      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d115      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e09a      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e08e      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e086      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4943      	ldr	r1, [pc, #268]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9c:	f7fe ffec 	bl	8000e78 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7fe ffe8 	bl	8000e78 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e06e      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1eb      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d208      	bcs.n	8001efa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	492b      	ldr	r1, [pc, #172]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d210      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 0207 	bic.w	r2, r3, #7
 8001f10:	4923      	ldr	r1, [pc, #140]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e036      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4918      	ldr	r1, [pc, #96]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4910      	ldr	r1, [pc, #64]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f68:	f000 f824 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1fc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe ff37 	bl	8000e00 <HAL_InitTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f96:	7afb      	ldrb	r3, [r7, #11]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08007b68 	.word	0x08007b68
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d11e      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ff4:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e005      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002010:	4a2b      	ldr	r2, [pc, #172]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002024:	e00a      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b04      	cmp	r3, #4
 800202a:	d102      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e004      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d101      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800203a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d134      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d003      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0xa6>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d003      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0xac>
 8002058:	e005      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800205c:	617b      	str	r3, [r7, #20]
      break;
 800205e:	e005      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002062:	617b      	str	r3, [r7, #20]
      break;
 8002064:	e002      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	617b      	str	r3, [r7, #20]
      break;
 800206a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	3301      	adds	r3, #1
 8002078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	fb03 f202 	mul.w	r2, r3, r2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	0e5b      	lsrs	r3, r3, #25
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	3301      	adds	r3, #1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020ac:	69bb      	ldr	r3, [r7, #24]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08007b80 	.word	0x08007b80
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000004 	.word	0x20000004

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <HAL_RCC_GetPCLK1Freq+0x28>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	08007b78 	.word	0x08007b78

08002110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002114:	f7ff ffda 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0adb      	lsrs	r3, r3, #11
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4904      	ldr	r1, [pc, #16]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	08007b78 	.word	0x08007b78

0800213c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002154:	f7ff f9ee 	bl	8001534 <HAL_PWREx_GetVoltageRange>
 8002158:	6178      	str	r0, [r7, #20]
 800215a:	e014      	b.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002174:	f7ff f9de 	bl	8001534 <HAL_PWREx_GetVoltageRange>
 8002178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800218c:	d10b      	bne.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d919      	bls.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2ba0      	cmp	r3, #160	; 0xa0
 8002198:	d902      	bls.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800219a:	2302      	movs	r3, #2
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e013      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a0:	2301      	movs	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e010      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d902      	bls.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021ac:	2303      	movs	r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e00a      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	; 0x80
 80021b6:	d102      	bne.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b8:	2302      	movs	r3, #2
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e004      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b70      	cmp	r3, #112	; 0x70
 80021c2:	d101      	bne.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021c4:	2301      	movs	r3, #1
 80021c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 0207 	bic.w	r2, r3, #7
 80021d0:	4909      	ldr	r1, [pc, #36]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d001      	beq.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002204:	2300      	movs	r3, #0
 8002206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002208:	2300      	movs	r3, #0
 800220a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002214:	2b00      	cmp	r3, #0
 8002216:	d041      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800221c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002220:	d02a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002226:	d824      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800222e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002232:	d81e      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800223c:	d010      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800223e:	e018      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002240:	4b86      	ldr	r3, [pc, #536]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a85      	ldr	r2, [pc, #532]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800224c:	e015      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fabb 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 800225a:	4603      	mov	r3, r0
 800225c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800225e:	e00c      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3320      	adds	r3, #32
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fba6 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002270:	e003      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	74fb      	strb	r3, [r7, #19]
      break;
 8002276:	e000      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002280:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800228e:	4973      	ldr	r1, [pc, #460]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002296:	e001      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d041      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022b0:	d02a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022b6:	d824      	bhi.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022bc:	d008      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022c2:	d81e      	bhi.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d010      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ce:	e018      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022d0:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a61      	ldr	r2, [pc, #388]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022dc:	e015      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fa73 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 80022ea:	4603      	mov	r3, r0
 80022ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ee:	e00c      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3320      	adds	r3, #32
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fb5e 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002300:	e003      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	74fb      	strb	r3, [r7, #19]
      break;
 8002306:	e000      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10b      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002310:	4b52      	ldr	r3, [pc, #328]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800231e:	494f      	ldr	r1, [pc, #316]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002326:	e001      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a0 	beq.w	800247a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	4a40      	ldr	r2, [pc, #256]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235e:	6593      	str	r3, [r2, #88]	; 0x58
 8002360:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236c:	2301      	movs	r3, #1
 800236e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3a      	ldr	r2, [pc, #232]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800237c:	f7fe fd7c 	bl	8000e78 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002382:	e009      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7fe fd78 	bl	8000e78 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d902      	bls.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	74fb      	strb	r3, [r7, #19]
        break;
 8002396:	e005      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002398:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ef      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d15c      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023aa:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01f      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d019      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fd37 	bl	8000e78 <HAL_GetTick>
 800240a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240c:	e00b      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe fd33 	bl	8000e78 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
            break;
 8002424:	e006      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ec      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244a:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002452:	e009      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
 8002458:	e006      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002468:	7c7b      	ldrb	r3, [r7, #17]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b9e      	ldr	r3, [pc, #632]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	4a9d      	ldr	r2, [pc, #628]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002486:	4b98      	ldr	r3, [pc, #608]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 0203 	bic.w	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	4994      	ldr	r1, [pc, #592]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a8:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 020c 	bic.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	498c      	ldr	r1, [pc, #560]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ca:	4b87      	ldr	r3, [pc, #540]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4983      	ldr	r1, [pc, #524]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	497b      	ldr	r1, [pc, #492]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800250e:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251c:	4972      	ldr	r1, [pc, #456]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002530:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	496a      	ldr	r1, [pc, #424]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002552:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	4961      	ldr	r1, [pc, #388]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002574:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002582:	4959      	ldr	r1, [pc, #356]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002596:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a4:	4950      	ldr	r1, [pc, #320]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	4948      	ldr	r1, [pc, #288]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025da:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	493f      	ldr	r1, [pc, #252]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d028      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fc:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260a:	4937      	ldr	r1, [pc, #220]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261a:	d106      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
 8002628:	e011      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800262e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002632:	d10c      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	2101      	movs	r1, #1
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f8c8 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d028      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	491f      	ldr	r1, [pc, #124]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002678:	d106      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002684:	60d3      	str	r3, [r2, #12]
 8002686:	e011      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002690:	d10c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f899 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d02b      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c6:	4908      	ldr	r1, [pc, #32]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d6:	d109      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e2:	60d3      	str	r3, [r2, #12]
 80026e4:	e014      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f867 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d02f      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800272a:	4928      	ldr	r1, [pc, #160]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800273a:	d10d      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2102      	movs	r1, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f844 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d014      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	74bb      	strb	r3, [r7, #18]
 8002756:	e011      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002760:	d10c      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3320      	adds	r3, #32
 8002766:	2102      	movs	r1, #2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f925 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002796:	490d      	ldr	r1, [pc, #52]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ba:	4904      	ldr	r1, [pc, #16]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000

080027d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027de:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d018      	beq.n	800281c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027ea:	4b72      	ldr	r3, [pc, #456]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0203 	and.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d10d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
       ||
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002802:	4b6c      	ldr	r3, [pc, #432]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
       ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d047      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e044      	b.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d018      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0x86>
 8002824:	2b03      	cmp	r3, #3
 8002826:	d825      	bhi.n	8002874 <RCCEx_PLLSAI1_Config+0xa4>
 8002828:	2b01      	cmp	r3, #1
 800282a:	d002      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0x62>
 800282c:	2b02      	cmp	r3, #2
 800282e:	d009      	beq.n	8002844 <RCCEx_PLLSAI1_Config+0x74>
 8002830:	e020      	b.n	8002874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d11d      	bne.n	800287a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e01a      	b.n	800287a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002844:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d116      	bne.n	800287e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002854:	e013      	b.n	800287e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002856:	4b57      	ldr	r3, [pc, #348]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002862:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002872:	e006      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e004      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002882:	bf00      	nop
    }

    if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800288a:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	430b      	orrs	r3, r1
 80028a0:	4944      	ldr	r1, [pc, #272]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d17d      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028ac:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a40      	ldr	r2, [pc, #256]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fade 	bl	8000e78 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028be:	e009      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c0:	f7fe fada 	bl	8000e78 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d902      	bls.n	80028d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	73fb      	strb	r3, [r7, #15]
        break;
 80028d2:	e005      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028d4:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ef      	bne.n	80028c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d160      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ec:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	0211      	lsls	r1, r2, #8
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	0912      	lsrs	r2, r2, #4
 8002904:	0452      	lsls	r2, r2, #17
 8002906:	430a      	orrs	r2, r1
 8002908:	492a      	ldr	r1, [pc, #168]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
 800290e:	e027      	b.n	8002960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d112      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002916:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800291e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6892      	ldr	r2, [r2, #8]
 8002926:	0211      	lsls	r1, r2, #8
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6912      	ldr	r2, [r2, #16]
 800292c:	0852      	lsrs	r2, r2, #1
 800292e:	3a01      	subs	r2, #1
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	430a      	orrs	r2, r1
 8002934:	491f      	ldr	r1, [pc, #124]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	610b      	str	r3, [r1, #16]
 800293a:	e011      	b.n	8002960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	0211      	lsls	r1, r2, #8
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6952      	ldr	r2, [r2, #20]
 8002952:	0852      	lsrs	r2, r2, #1
 8002954:	3a01      	subs	r2, #1
 8002956:	0652      	lsls	r2, r2, #25
 8002958:	430a      	orrs	r2, r1
 800295a:	4916      	ldr	r1, [pc, #88]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800296a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fa84 	bl	8000e78 <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002972:	e009      	b.n	8002988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002974:	f7fe fa80 	bl	8000e78 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	73fb      	strb	r3, [r7, #15]
          break;
 8002986:	e005      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4904      	ldr	r1, [pc, #16]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000

080029b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029c6:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d018      	beq.n	8002a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10d      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
       ||
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ea:	4b61      	ldr	r3, [pc, #388]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
       ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d047      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e044      	b.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d018      	beq.n	8002a3e <RCCEx_PLLSAI2_Config+0x86>
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d825      	bhi.n	8002a5c <RCCEx_PLLSAI2_Config+0xa4>
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d002      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0x62>
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d009      	beq.n	8002a2c <RCCEx_PLLSAI2_Config+0x74>
 8002a18:	e020      	b.n	8002a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a1a:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2a:	e01a      	b.n	8002a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a2c:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d116      	bne.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e013      	b.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a3e:	4b4c      	ldr	r3, [pc, #304]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a5a:	e006      	b.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e004      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	430b      	orrs	r3, r1
 8002a88:	4939      	ldr	r1, [pc, #228]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d167      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a94:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a35      	ldr	r2, [pc, #212]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe f9ea 	bl	8000e78 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aa6:	e009      	b.n	8002abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aa8:	f7fe f9e6 	bl	8000e78 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8002aba:	e005      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ef      	bne.n	8002aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d14a      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d111      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	0211      	lsls	r1, r2, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	0912      	lsrs	r2, r2, #4
 8002aec:	0452      	lsls	r2, r2, #17
 8002aee:	430a      	orrs	r2, r1
 8002af0:	491f      	ldr	r1, [pc, #124]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	614b      	str	r3, [r1, #20]
 8002af6:	e011      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6892      	ldr	r2, [r2, #8]
 8002b08:	0211      	lsls	r1, r2, #8
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6912      	ldr	r2, [r2, #16]
 8002b0e:	0852      	lsrs	r2, r2, #1
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0652      	lsls	r2, r2, #25
 8002b14:	430a      	orrs	r2, r1
 8002b16:	4916      	ldr	r1, [pc, #88]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe f9a6 	bl	8000e78 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b2e:	e009      	b.n	8002b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b30:	f7fe f9a2 	bl	8000e78 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	73fb      	strb	r3, [r7, #15]
          break;
 8002b42:	e005      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4904      	ldr	r1, [pc, #16]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e040      	b.n	8002c08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe f83e 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	; 0x24
 8002ba0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 feb6 	bl	800392c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fbfb 	bl	80033bc <UART_SetConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e01b      	b.n	8002c08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 ff35 	bl	8003a70 <UART_CheckIdleState>
 8002c06:	4603      	mov	r3, r0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d178      	bne.n	8002d1a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_UART_Transmit+0x24>
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e071      	b.n	8002d1c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2221      	movs	r2, #33	; 0x21
 8002c44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c46:	f7fe f917 	bl	8000e78 <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	d108      	bne.n	8002c78 <HAL_UART_Transmit+0x68>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e003      	b.n	8002c80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c80:	e030      	b.n	8002ce4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 ff97 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e03c      	b.n	8002d1c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	3302      	adds	r3, #2
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e008      	b.n	8002cd2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1c8      	bne.n	8002c82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 ff60 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e005      	b.n	8002d1c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d137      	bne.n	8002dac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_UART_Receive_IT+0x24>
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e030      	b.n	8002dae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_UART_Receive_IT+0x94>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01f      	beq.n	8002d9c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	613b      	str	r3, [r7, #16]
   return(result);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	623b      	str	r3, [r7, #32]
 8002d8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	69f9      	ldr	r1, [r7, #28]
 8002d8e:	6a3a      	ldr	r2, [r7, #32]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e6      	bne.n	8002d6a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 ff74 	bl	8003c90 <UART_Start_Receive_IT>
 8002da8:	4603      	mov	r3, r0
 8002daa:	e000      	b.n	8002dae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3728      	adds	r7, #40	; 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40008000 	.word	0x40008000

08002dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b0ba      	sub	sp, #232	; 0xe8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002de2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002de6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002dea:	4013      	ands	r3, r2
 8002dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d115      	bne.n	8002e24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00f      	beq.n	8002e24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 82ae 	beq.w	8003376 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
      }
      return;
 8002e22:	e2a8      	b.n	8003376 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8117 	beq.w	800305c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e3e:	4b85      	ldr	r3, [pc, #532]	; (8003054 <HAL_UART_IRQHandler+0x298>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 810a 	beq.w	800305c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d011      	beq.n	8002e78 <HAL_UART_IRQHandler+0xbc>
 8002e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d011      	beq.n	8002ea8 <HAL_UART_IRQHandler+0xec>
 8002e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2202      	movs	r2, #2
 8002e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9e:	f043 0204 	orr.w	r2, r3, #4
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d011      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x11c>
 8002eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ece:	f043 0202 	orr.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2208      	movs	r2, #8
 8002f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0a:	f043 0208 	orr.w	r2, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_UART_IRQHandler+0x18a>
 8002f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8214 	beq.w	800337a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d005      	beq.n	8002f9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d04f      	beq.n	800303e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 ff3c 	bl	8003e1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d141      	bne.n	8003036 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1d9      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <HAL_UART_IRQHandler+0x29c>)
 800300c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f88b 	bl	800112e <HAL_DMA_Abort_IT>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003028:	4610      	mov	r0, r2
 800302a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	e00f      	b.n	800304e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f9ae 	bl	8003390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e00b      	b.n	800304e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f9aa 	bl	8003390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	e007      	b.n	800304e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9a6 	bl	8003390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800304c:	e195      	b.n	800337a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304e:	bf00      	nop
    return;
 8003050:	e193      	b.n	800337a <HAL_UART_IRQHandler+0x5be>
 8003052:	bf00      	nop
 8003054:	04000120 	.word	0x04000120
 8003058:	08003ee5 	.word	0x08003ee5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	2b01      	cmp	r3, #1
 8003062:	f040 814e 	bne.w	8003302 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8147 	beq.w	8003302 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8140 	beq.w	8003302 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2210      	movs	r2, #16
 8003088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	f040 80b8 	bne.w	800320a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8167 	beq.w	800337e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030ba:	429a      	cmp	r2, r3
 80030bc:	f080 815f 	bcs.w	800337e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 8086 	bne.w	80031e8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800310a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800311e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1da      	bne.n	80030dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3308      	adds	r3, #8
 800312c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3308      	adds	r3, #8
 8003146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800314a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800314e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003156:	e841 2300 	strex	r3, r2, [r1]
 800315a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800315c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e1      	bne.n	8003126 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3308      	adds	r3, #8
 8003168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3308      	adds	r3, #8
 8003182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800318c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e3      	bne.n	8003162 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b8:	f023 0310 	bic.w	r3, r3, #16
 80031bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80031cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e4      	bne.n	80031a8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd ff65 	bl	80010b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8ce 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003208:	e0b9      	b.n	800337e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003216:	b29b      	uxth	r3, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80ab 	beq.w	8003382 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800322c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a6 	beq.w	8003382 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800324a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003258:	647b      	str	r3, [r7, #68]	; 0x44
 800325a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800325e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e4      	bne.n	8003236 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	623b      	str	r3, [r7, #32]
   return(result);
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3308      	adds	r3, #8
 800328c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003290:	633a      	str	r2, [r7, #48]	; 0x30
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e3      	bne.n	800326c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f023 0310 	bic.w	r3, r3, #16
 80032cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	69b9      	ldr	r1, [r7, #24]
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	617b      	str	r3, [r7, #20]
   return(result);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e4      	bne.n	80032b8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f852 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003300:	e03f      	b.n	8003382 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00e      	beq.n	800332c <HAL_UART_IRQHandler+0x570>
 800330e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 ffd9 	bl	80042dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800332a:	e02d      	b.n	8003388 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800332c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00e      	beq.n	8003356 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
    }
    return;
 8003354:	e017      	b.n	8003386 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <HAL_UART_IRQHandler+0x5cc>
 8003362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00c      	beq.n	8003388 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fdce 	bl	8003f10 <UART_EndTransmit_IT>
    return;
 8003374:	e008      	b.n	8003388 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003376:	bf00      	nop
 8003378:	e006      	b.n	8003388 <HAL_UART_IRQHandler+0x5cc>
    return;
 800337a:	bf00      	nop
 800337c:	e004      	b.n	8003388 <HAL_UART_IRQHandler+0x5cc>
      return;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003386:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003388:	37e8      	adds	r7, #232	; 0xe8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop

08003390 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c0:	b08a      	sub	sp, #40	; 0x28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4ba4      	ldr	r3, [pc, #656]	; (800367c <UART_SetConfig+0x2c0>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a99      	ldr	r2, [pc, #612]	; (8003680 <UART_SetConfig+0x2c4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	4313      	orrs	r3, r2
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003438:	430a      	orrs	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a90      	ldr	r2, [pc, #576]	; (8003684 <UART_SetConfig+0x2c8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d126      	bne.n	8003494 <UART_SetConfig+0xd8>
 8003446:	4b90      	ldr	r3, [pc, #576]	; (8003688 <UART_SetConfig+0x2cc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b03      	cmp	r3, #3
 8003452:	d81b      	bhi.n	800348c <UART_SetConfig+0xd0>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <UART_SetConfig+0xa0>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	0800346d 	.word	0x0800346d
 8003460:	0800347d 	.word	0x0800347d
 8003464:	08003475 	.word	0x08003475
 8003468:	08003485 	.word	0x08003485
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e116      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003474:	2302      	movs	r3, #2
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e112      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800347c:	2304      	movs	r3, #4
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003482:	e10e      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003484:	2308      	movs	r3, #8
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348a:	e10a      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800348c:	2310      	movs	r3, #16
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003492:	e106      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a7c      	ldr	r2, [pc, #496]	; (800368c <UART_SetConfig+0x2d0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d138      	bne.n	8003510 <UART_SetConfig+0x154>
 800349e:	4b7a      	ldr	r3, [pc, #488]	; (8003688 <UART_SetConfig+0x2cc>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d82d      	bhi.n	8003508 <UART_SetConfig+0x14c>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <UART_SetConfig+0xf8>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034e9 	.word	0x080034e9
 80034b8:	08003509 	.word	0x08003509
 80034bc:	08003509 	.word	0x08003509
 80034c0:	08003509 	.word	0x08003509
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	08003509 	.word	0x08003509
 80034cc:	08003509 	.word	0x08003509
 80034d0:	08003509 	.word	0x08003509
 80034d4:	080034f1 	.word	0x080034f1
 80034d8:	08003509 	.word	0x08003509
 80034dc:	08003509 	.word	0x08003509
 80034e0:	08003509 	.word	0x08003509
 80034e4:	08003501 	.word	0x08003501
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ee:	e0d8      	b.n	80036a2 <UART_SetConfig+0x2e6>
 80034f0:	2302      	movs	r3, #2
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f6:	e0d4      	b.n	80036a2 <UART_SetConfig+0x2e6>
 80034f8:	2304      	movs	r3, #4
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fe:	e0d0      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003500:	2308      	movs	r3, #8
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e0cc      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003508:	2310      	movs	r3, #16
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e0c8      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5e      	ldr	r2, [pc, #376]	; (8003690 <UART_SetConfig+0x2d4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d125      	bne.n	8003566 <UART_SetConfig+0x1aa>
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <UART_SetConfig+0x2cc>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003524:	2b30      	cmp	r3, #48	; 0x30
 8003526:	d016      	beq.n	8003556 <UART_SetConfig+0x19a>
 8003528:	2b30      	cmp	r3, #48	; 0x30
 800352a:	d818      	bhi.n	800355e <UART_SetConfig+0x1a2>
 800352c:	2b20      	cmp	r3, #32
 800352e:	d00a      	beq.n	8003546 <UART_SetConfig+0x18a>
 8003530:	2b20      	cmp	r3, #32
 8003532:	d814      	bhi.n	800355e <UART_SetConfig+0x1a2>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <UART_SetConfig+0x182>
 8003538:	2b10      	cmp	r3, #16
 800353a:	d008      	beq.n	800354e <UART_SetConfig+0x192>
 800353c:	e00f      	b.n	800355e <UART_SetConfig+0x1a2>
 800353e:	2300      	movs	r3, #0
 8003540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003544:	e0ad      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003546:	2302      	movs	r3, #2
 8003548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354c:	e0a9      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800354e:	2304      	movs	r3, #4
 8003550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003554:	e0a5      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003556:	2308      	movs	r3, #8
 8003558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355c:	e0a1      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800355e:	2310      	movs	r3, #16
 8003560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003564:	e09d      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <UART_SetConfig+0x2d8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d125      	bne.n	80035bc <UART_SetConfig+0x200>
 8003570:	4b45      	ldr	r3, [pc, #276]	; (8003688 <UART_SetConfig+0x2cc>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800357a:	2bc0      	cmp	r3, #192	; 0xc0
 800357c:	d016      	beq.n	80035ac <UART_SetConfig+0x1f0>
 800357e:	2bc0      	cmp	r3, #192	; 0xc0
 8003580:	d818      	bhi.n	80035b4 <UART_SetConfig+0x1f8>
 8003582:	2b80      	cmp	r3, #128	; 0x80
 8003584:	d00a      	beq.n	800359c <UART_SetConfig+0x1e0>
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d814      	bhi.n	80035b4 <UART_SetConfig+0x1f8>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <UART_SetConfig+0x1d8>
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d008      	beq.n	80035a4 <UART_SetConfig+0x1e8>
 8003592:	e00f      	b.n	80035b4 <UART_SetConfig+0x1f8>
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e082      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800359c:	2302      	movs	r3, #2
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e07e      	b.n	80036a2 <UART_SetConfig+0x2e6>
 80035a4:	2304      	movs	r3, #4
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e07a      	b.n	80036a2 <UART_SetConfig+0x2e6>
 80035ac:	2308      	movs	r3, #8
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b2:	e076      	b.n	80036a2 <UART_SetConfig+0x2e6>
 80035b4:	2310      	movs	r3, #16
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ba:	e072      	b.n	80036a2 <UART_SetConfig+0x2e6>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a35      	ldr	r2, [pc, #212]	; (8003698 <UART_SetConfig+0x2dc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d12a      	bne.n	800361c <UART_SetConfig+0x260>
 80035c6:	4b30      	ldr	r3, [pc, #192]	; (8003688 <UART_SetConfig+0x2cc>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d4:	d01a      	beq.n	800360c <UART_SetConfig+0x250>
 80035d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035da:	d81b      	bhi.n	8003614 <UART_SetConfig+0x258>
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e0:	d00c      	beq.n	80035fc <UART_SetConfig+0x240>
 80035e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e6:	d815      	bhi.n	8003614 <UART_SetConfig+0x258>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <UART_SetConfig+0x238>
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f0:	d008      	beq.n	8003604 <UART_SetConfig+0x248>
 80035f2:	e00f      	b.n	8003614 <UART_SetConfig+0x258>
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e052      	b.n	80036a2 <UART_SetConfig+0x2e6>
 80035fc:	2302      	movs	r3, #2
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e04e      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003604:	2304      	movs	r3, #4
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e04a      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800360c:	2308      	movs	r3, #8
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e046      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003614:	2310      	movs	r3, #16
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e042      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a17      	ldr	r2, [pc, #92]	; (8003680 <UART_SetConfig+0x2c4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d13a      	bne.n	800369c <UART_SetConfig+0x2e0>
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <UART_SetConfig+0x2cc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003634:	d01a      	beq.n	800366c <UART_SetConfig+0x2b0>
 8003636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800363a:	d81b      	bhi.n	8003674 <UART_SetConfig+0x2b8>
 800363c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003640:	d00c      	beq.n	800365c <UART_SetConfig+0x2a0>
 8003642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003646:	d815      	bhi.n	8003674 <UART_SetConfig+0x2b8>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <UART_SetConfig+0x298>
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	d008      	beq.n	8003664 <UART_SetConfig+0x2a8>
 8003652:	e00f      	b.n	8003674 <UART_SetConfig+0x2b8>
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365a:	e022      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800365c:	2302      	movs	r3, #2
 800365e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003662:	e01e      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003664:	2304      	movs	r3, #4
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366a:	e01a      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800366c:	2308      	movs	r3, #8
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003672:	e016      	b.n	80036a2 <UART_SetConfig+0x2e6>
 8003674:	2310      	movs	r3, #16
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e012      	b.n	80036a2 <UART_SetConfig+0x2e6>
 800367c:	efff69f3 	.word	0xefff69f3
 8003680:	40008000 	.word	0x40008000
 8003684:	40013800 	.word	0x40013800
 8003688:	40021000 	.word	0x40021000
 800368c:	40004400 	.word	0x40004400
 8003690:	40004800 	.word	0x40004800
 8003694:	40004c00 	.word	0x40004c00
 8003698:	40005000 	.word	0x40005000
 800369c:	2310      	movs	r3, #16
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a9f      	ldr	r2, [pc, #636]	; (8003924 <UART_SetConfig+0x568>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d17a      	bne.n	80037a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d824      	bhi.n	80036fe <UART_SetConfig+0x342>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <UART_SetConfig+0x300>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036e1 	.word	0x080036e1
 80036c0:	080036ff 	.word	0x080036ff
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	080036ff 	.word	0x080036ff
 80036cc:	080036ef 	.word	0x080036ef
 80036d0:	080036ff 	.word	0x080036ff
 80036d4:	080036ff 	.word	0x080036ff
 80036d8:	080036ff 	.word	0x080036ff
 80036dc:	080036f7 	.word	0x080036f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e0:	f7fe fd00 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80036e4:	61f8      	str	r0, [r7, #28]
        break;
 80036e6:	e010      	b.n	800370a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e8:	4b8f      	ldr	r3, [pc, #572]	; (8003928 <UART_SetConfig+0x56c>)
 80036ea:	61fb      	str	r3, [r7, #28]
        break;
 80036ec:	e00d      	b.n	800370a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ee:	f7fe fc61 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 80036f2:	61f8      	str	r0, [r7, #28]
        break;
 80036f4:	e009      	b.n	800370a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fa:	61fb      	str	r3, [r7, #28]
        break;
 80036fc:	e005      	b.n	800370a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003708:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80fb 	beq.w	8003908 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	429a      	cmp	r2, r3
 8003720:	d305      	bcc.n	800372e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	429a      	cmp	r2, r3
 800372c:	d903      	bls.n	8003736 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003734:	e0e8      	b.n	8003908 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2200      	movs	r2, #0
 800373a:	461c      	mov	r4, r3
 800373c:	4615      	mov	r5, r2
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	022b      	lsls	r3, r5, #8
 8003748:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800374c:	0222      	lsls	r2, r4, #8
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	6849      	ldr	r1, [r1, #4]
 8003752:	0849      	lsrs	r1, r1, #1
 8003754:	2000      	movs	r0, #0
 8003756:	4688      	mov	r8, r1
 8003758:	4681      	mov	r9, r0
 800375a:	eb12 0a08 	adds.w	sl, r2, r8
 800375e:	eb43 0b09 	adc.w	fp, r3, r9
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003770:	4650      	mov	r0, sl
 8003772:	4659      	mov	r1, fp
 8003774:	f7fc fd7c 	bl	8000270 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4613      	mov	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003786:	d308      	bcc.n	800379a <UART_SetConfig+0x3de>
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378e:	d204      	bcs.n	800379a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e0b6      	b.n	8003908 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037a0:	e0b2      	b.n	8003908 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037aa:	d15e      	bne.n	800386a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d828      	bhi.n	8003806 <UART_SetConfig+0x44a>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x400>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037e9 	.word	0x080037e9
 80037c4:	080037f1 	.word	0x080037f1
 80037c8:	08003807 	.word	0x08003807
 80037cc:	080037f7 	.word	0x080037f7
 80037d0:	08003807 	.word	0x08003807
 80037d4:	08003807 	.word	0x08003807
 80037d8:	08003807 	.word	0x08003807
 80037dc:	080037ff 	.word	0x080037ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7fe fc80 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80037e4:	61f8      	str	r0, [r7, #28]
        break;
 80037e6:	e014      	b.n	8003812 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7fe fc92 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 80037ec:	61f8      	str	r0, [r7, #28]
        break;
 80037ee:	e010      	b.n	8003812 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f0:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <UART_SetConfig+0x56c>)
 80037f2:	61fb      	str	r3, [r7, #28]
        break;
 80037f4:	e00d      	b.n	8003812 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f6:	f7fe fbdd 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 80037fa:	61f8      	str	r0, [r7, #28]
        break;
 80037fc:	e009      	b.n	8003812 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003802:	61fb      	str	r3, [r7, #28]
        break;
 8003804:	e005      	b.n	8003812 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d077      	beq.n	8003908 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005a      	lsls	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	441a      	add	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d916      	bls.n	8003862 <UART_SetConfig+0x4a6>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383a:	d212      	bcs.n	8003862 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f023 030f 	bic.w	r3, r3, #15
 8003844:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	b29b      	uxth	r3, r3
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	b29a      	uxth	r2, r3
 8003852:	8afb      	ldrh	r3, [r7, #22]
 8003854:	4313      	orrs	r3, r2
 8003856:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	8afa      	ldrh	r2, [r7, #22]
 800385e:	60da      	str	r2, [r3, #12]
 8003860:	e052      	b.n	8003908 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003868:	e04e      	b.n	8003908 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800386a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800386e:	2b08      	cmp	r3, #8
 8003870:	d827      	bhi.n	80038c2 <UART_SetConfig+0x506>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x4bc>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038a5 	.word	0x080038a5
 8003880:	080038ad 	.word	0x080038ad
 8003884:	080038c3 	.word	0x080038c3
 8003888:	080038b3 	.word	0x080038b3
 800388c:	080038c3 	.word	0x080038c3
 8003890:	080038c3 	.word	0x080038c3
 8003894:	080038c3 	.word	0x080038c3
 8003898:	080038bb 	.word	0x080038bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fc22 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80038a0:	61f8      	str	r0, [r7, #28]
        break;
 80038a2:	e014      	b.n	80038ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7fe fc34 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 80038a8:	61f8      	str	r0, [r7, #28]
        break;
 80038aa:	e010      	b.n	80038ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ac:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <UART_SetConfig+0x56c>)
 80038ae:	61fb      	str	r3, [r7, #28]
        break;
 80038b0:	e00d      	b.n	80038ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b2:	f7fe fb7f 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 80038b6:	61f8      	str	r0, [r7, #28]
        break;
 80038b8:	e009      	b.n	80038ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	61fb      	str	r3, [r7, #28]
        break;
 80038c0:	e005      	b.n	80038ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038cc:	bf00      	nop
    }

    if (pclk != 0U)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d019      	beq.n	8003908 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	085a      	lsrs	r2, r3, #1
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	441a      	add	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	d909      	bls.n	8003902 <UART_SetConfig+0x546>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d205      	bcs.n	8003902 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	e002      	b.n	8003908 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003914:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003918:	4618      	mov	r0, r3
 800391a:	3728      	adds	r7, #40	; 0x28
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003922:	bf00      	nop
 8003924:	40008000 	.word	0x40008000
 8003928:	00f42400 	.word	0x00f42400

0800392c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01a      	beq.n	8003a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2a:	d10a      	bne.n	8003a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]
  }
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b098      	sub	sp, #96	; 0x60
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a80:	f7fd f9fa 	bl	8000e78 <HAL_GetTick>
 8003a84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d12e      	bne.n	8003af2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f88c 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d021      	beq.n	8003af2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003acc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ace:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e6      	bne.n	8003aae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e062      	b.n	8003bb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d149      	bne.n	8003b94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f856 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03c      	beq.n	8003b94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	623b      	str	r3, [r7, #32]
   return(result);
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
 8003b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e6      	bne.n	8003b1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3308      	adds	r3, #8
 8003b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b6c:	61fa      	str	r2, [r7, #28]
 8003b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	617b      	str	r3, [r7, #20]
   return(result);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e011      	b.n	8003bb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3758      	adds	r7, #88	; 0x58
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd0:	e049      	b.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d045      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fd f94d 	bl	8000e78 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e048      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d031      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d110      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2208      	movs	r2, #8
 8003c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f8ff 	bl	8003e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2208      	movs	r2, #8
 8003c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e029      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c40:	d111      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f8e5 	bl	8003e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e00f      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d0a6      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b097      	sub	sp, #92	; 0x5c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc2:	d10e      	bne.n	8003ce2 <UART_Start_Receive_IT+0x52>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <UART_Start_Receive_IT+0x48>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003cd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd6:	e02d      	b.n	8003d34 <UART_Start_Receive_IT+0xa4>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	22ff      	movs	r2, #255	; 0xff
 8003cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ce0:	e028      	b.n	8003d34 <UART_Start_Receive_IT+0xa4>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <UART_Start_Receive_IT+0x76>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <UART_Start_Receive_IT+0x6c>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cfa:	e01b      	b.n	8003d34 <UART_Start_Receive_IT+0xa4>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	227f      	movs	r2, #127	; 0x7f
 8003d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d04:	e016      	b.n	8003d34 <UART_Start_Receive_IT+0xa4>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d0e:	d10d      	bne.n	8003d2c <UART_Start_Receive_IT+0x9c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <UART_Start_Receive_IT+0x92>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	227f      	movs	r2, #127	; 0x7f
 8003d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d20:	e008      	b.n	8003d34 <UART_Start_Receive_IT+0xa4>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	223f      	movs	r2, #63	; 0x3f
 8003d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d2a:	e003      	b.n	8003d34 <UART_Start_Receive_IT+0xa4>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2222      	movs	r2, #34	; 0x22
 8003d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d64:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e5      	bne.n	8003d44 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d80:	d107      	bne.n	8003d92 <UART_Start_Receive_IT+0x102>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <UART_Start_Receive_IT+0x184>)
 8003d8e:	669a      	str	r2, [r3, #104]	; 0x68
 8003d90:	e002      	b.n	8003d98 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <UART_Start_Receive_IT+0x188>)
 8003d96:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d019      	beq.n	8003dd4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e6      	bne.n	8003da0 <UART_Start_Receive_IT+0x110>
 8003dd2:	e018      	b.n	8003e06 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	613b      	str	r3, [r7, #16]
   return(result);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f043 0320 	orr.w	r3, r3, #32
 8003de8:	653b      	str	r3, [r7, #80]	; 0x50
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	69f9      	ldr	r1, [r7, #28]
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e6      	bne.n	8003dd4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	375c      	adds	r7, #92	; 0x5c
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	08004121 	.word	0x08004121
 8003e18:	08003f65 	.word	0x08003f65

08003e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b095      	sub	sp, #84	; 0x54
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40
 8003e44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e6      	bne.n	8003e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3308      	adds	r3, #8
 8003e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e5      	bne.n	8003e56 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d118      	bne.n	8003ec4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f023 0310 	bic.w	r3, r3, #16
 8003ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6979      	ldr	r1, [r7, #20]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e6      	bne.n	8003e92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ed8:	bf00      	nop
 8003eda:	3754      	adds	r7, #84	; 0x54
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fa44 	bl	8003390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6979      	ldr	r1, [r7, #20]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	613b      	str	r3, [r7, #16]
   return(result);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e6      	bne.n	8003f18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc fcd8 	bl	800090c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5c:	bf00      	nop
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b09c      	sub	sp, #112	; 0x70
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7c:	2b22      	cmp	r3, #34	; 0x22
 8003f7e:	f040 80be 	bne.w	80040fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f90:	b2d9      	uxtb	r1, r3
 8003f92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 80a3 	bne.w	8004112 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e6      	bne.n	8003fcc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	667b      	str	r3, [r7, #100]	; 0x64
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3308      	adds	r3, #8
 800401c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800401e:	647a      	str	r2, [r7, #68]	; 0x44
 8004020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e5      	bne.n	8003ffe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a34      	ldr	r2, [pc, #208]	; (800411c <UART_RxISR_8BIT+0x1b8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d01f      	beq.n	8004090 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d018      	beq.n	8004090 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	623b      	str	r3, [r7, #32]
   return(result);
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004072:	663b      	str	r3, [r7, #96]	; 0x60
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800407c:	633b      	str	r3, [r7, #48]	; 0x30
 800407e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e6      	bne.n	800405e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004094:	2b01      	cmp	r3, #1
 8004096:	d12e      	bne.n	80040f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0310 	bic.w	r3, r3, #16
 80040b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	69b9      	ldr	r1, [r7, #24]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e6      	bne.n	800409e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d103      	bne.n	80040e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2210      	movs	r2, #16
 80040e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff f958 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040f4:	e00d      	b.n	8004112 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fbf6 	bl	80008e8 <HAL_UART_RxCpltCallback>
}
 80040fc:	e009      	b.n	8004112 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	8b1b      	ldrh	r3, [r3, #24]
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0208 	orr.w	r2, r2, #8
 800410e:	b292      	uxth	r2, r2
 8004110:	831a      	strh	r2, [r3, #24]
}
 8004112:	bf00      	nop
 8004114:	3770      	adds	r7, #112	; 0x70
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40008000 	.word	0x40008000

08004120 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b09c      	sub	sp, #112	; 0x70
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800412e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004138:	2b22      	cmp	r3, #34	; 0x22
 800413a:	f040 80be 	bne.w	80042ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004144:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800414e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004152:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004156:	4013      	ands	r3, r2
 8004158:	b29a      	uxth	r2, r3
 800415a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 80a3 	bne.w	80042ce <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800419c:	667b      	str	r3, [r7, #100]	; 0x64
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a6:	657b      	str	r3, [r7, #84]	; 0x54
 80041a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e6      	bne.n	8004188 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	663b      	str	r3, [r7, #96]	; 0x60
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041da:	643a      	str	r2, [r7, #64]	; 0x40
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <UART_RxISR_16BIT+0x1b8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d01f      	beq.n	800424c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d018      	beq.n	800424c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	61fb      	str	r3, [r7, #28]
   return(result);
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800422e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800423a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e6      	bne.n	800421a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004250:	2b01      	cmp	r3, #1
 8004252:	d12e      	bne.n	80042b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	60bb      	str	r3, [r7, #8]
   return(result);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f023 0310 	bic.w	r3, r3, #16
 800426e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6979      	ldr	r1, [r7, #20]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	613b      	str	r3, [r7, #16]
   return(result);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e6      	bne.n	800425a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b10      	cmp	r3, #16
 8004298:	d103      	bne.n	80042a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2210      	movs	r2, #16
 80042a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff f87a 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042b0:	e00d      	b.n	80042ce <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc fb18 	bl	80008e8 <HAL_UART_RxCpltCallback>
}
 80042b8:	e009      	b.n	80042ce <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	8b1b      	ldrh	r3, [r3, #24]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	b292      	uxth	r2, r2
 80042cc:	831a      	strh	r2, [r3, #24]
}
 80042ce:	bf00      	nop
 80042d0:	3770      	adds	r7, #112	; 0x70
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40008000 	.word	0x40008000

080042dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_1_RingBuffer__Initialize>:

/* ************************************************************************************ */
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
et_RET UART_1_RingBuffer__Initialize(void)
{    
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
    /* Clear flags. */
    f_TX = FLAG_OFF;
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <UART_1_RingBuffer__Initialize+0x48>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
    f_RX = FLAG_OFF;
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <UART_1_RingBuffer__Initialize+0x4c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]

    /* Clear callbacks. */
    UART_1_CB__Tx = NULL;
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <UART_1_RingBuffer__Initialize+0x50>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
    UART_1_CB__Rx = NULL;
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <UART_1_RingBuffer__Initialize+0x54>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
        UART1_RxCompleteCallbackRegister(UART_1_ISR__Rx);
        UART1_TxCompleteCallbackRegister(UART_1_ISR__Tx);

    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        MX_USART1_UART_Init();
 800430c:	f7fc fc24 	bl	8000b58 <MX_USART1_UART_Init>

        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004310:	2200      	movs	r2, #0
 8004312:	2100      	movs	r1, #0
 8004314:	2025      	movs	r0, #37	; 0x25
 8004316:	f7fc fe96 	bl	8001046 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 800431a:	2025      	movs	r0, #37	; 0x25
 800431c:	f7fc feaf 	bl	800107e <HAL_NVIC_EnableIRQ>

        HAL_UART_Receive_IT(&huart1, &g_rx_byte, 1);
 8004320:	2201      	movs	r2, #1
 8004322:	4909      	ldr	r1, [pc, #36]	; (8004348 <UART_1_RingBuffer__Initialize+0x58>)
 8004324:	4809      	ldr	r0, [pc, #36]	; (800434c <UART_1_RingBuffer__Initialize+0x5c>)
 8004326:	f7fe fcfd 	bl	8002d24 <HAL_UART_Receive_IT>
    
        #warning Function not supported by the current CODE_CONFIGURATOR selected!

    #endif
    
    g_initialized = true;
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <UART_1_RingBuffer__Initialize+0x60>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
    
    return RET_OK;
 8004330:	231b      	movs	r3, #27
} 
 8004332:	4618      	mov	r0, r3
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2000048e 	.word	0x2000048e
 800433c:	2000048d 	.word	0x2000048d
 8004340:	2000056c 	.word	0x2000056c
 8004344:	20000568 	.word	0x20000568
 8004348:	2000048f 	.word	0x2000048f
 800434c:	20000378 	.word	0x20000378
 8004350:	2000048c 	.word	0x2000048c

08004354 <UART_1_RingBuffer__Write>:

et_RET UART_1_RingBuffer__Write(uint8_t * tx_vec,\
                                size_t    tx_vec_size)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <UART_1_RingBuffer__Write+0xa4>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	f083 0301 	eor.w	r3, r3, #1
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <UART_1_RingBuffer__Write+0x34>
 800436c:	4b23      	ldr	r3, [pc, #140]	; (80043fc <UART_1_RingBuffer__Write+0xa8>)
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <UART_1_RingBuffer__Write+0xac>)
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	f240 1395 	movw	r3, #405	; 0x195
 800437a:	4a22      	ldr	r2, [pc, #136]	; (8004404 <UART_1_RingBuffer__Write+0xb0>)
 800437c:	4922      	ldr	r1, [pc, #136]	; (8004408 <UART_1_RingBuffer__Write+0xb4>)
 800437e:	4823      	ldr	r0, [pc, #140]	; (800440c <UART_1_RingBuffer__Write+0xb8>)
 8004380:	f001 fe94 	bl	80060ac <iprintf>
 8004384:	230b      	movs	r3, #11
 8004386:	e032      	b.n	80043ee <UART_1_RingBuffer__Write+0x9a>
    #if ((defined(__CENTI_CODE_CONFIGURATOR_MCC__))     ||\
         (defined(__CENTI_CODE_CONFIGURATOR_MELODY__))  ||\
         (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))	)

        /* Check if new data is not bigger than the FIFO size. */
        if (TX_BUFFER_SIZE < tx_vec_size)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d90d      	bls.n	80043aa <UART_1_RingBuffer__Write+0x56>
        {
            CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <UART_1_RingBuffer__Write+0xa8>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <UART_1_RingBuffer__Write+0xac>)
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <UART_1_RingBuffer__Write+0xb0>)
 800439e:	491a      	ldr	r1, [pc, #104]	; (8004408 <UART_1_RingBuffer__Write+0xb4>)
 80043a0:	481a      	ldr	r0, [pc, #104]	; (800440c <UART_1_RingBuffer__Write+0xb8>)
 80043a2:	f001 fe83 	bl	80060ac <iprintf>
 80043a6:	2307      	movs	r3, #7
 80043a8:	e021      	b.n	80043ee <UART_1_RingBuffer__Write+0x9a>
        /* Send first byte. */
        UART_1_ISR__Tx();

    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        for (uint8_t n_data=0; n_data<tx_vec_size; n_data++)
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
 80043ae:	e016      	b.n	80043de <UART_1_RingBuffer__Write+0x8a>
        {
            TX_FIFO_Add(tx_vec[n_data]);
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	441a      	add	r2, r3
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <UART_1_RingBuffer__Write+0xbc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	7811      	ldrb	r1, [r2, #0]
 80043bc:	4a15      	ldr	r2, [pc, #84]	; (8004414 <UART_1_RingBuffer__Write+0xc0>)
 80043be:	54d1      	strb	r1, [r2, r3]
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <UART_1_RingBuffer__Write+0xbc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	2b63      	cmp	r3, #99	; 0x63
 80043c8:	d803      	bhi.n	80043d2 <UART_1_RingBuffer__Write+0x7e>
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <UART_1_RingBuffer__Write+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3301      	adds	r3, #1
 80043d0:	e000      	b.n	80043d4 <UART_1_RingBuffer__Write+0x80>
 80043d2:	2300      	movs	r3, #0
 80043d4:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <UART_1_RingBuffer__Write+0xbc>)
 80043d6:	6013      	str	r3, [r2, #0]
        for (uint8_t n_data=0; n_data<tx_vec_size; n_data++)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	3301      	adds	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d8e4      	bhi.n	80043b0 <UART_1_RingBuffer__Write+0x5c>
        }

        /* Send first byte. */
        HAL_UART_TxCpltCallback(&huart1);
 80043e6:	480c      	ldr	r0, [pc, #48]	; (8004418 <UART_1_RingBuffer__Write+0xc4>)
 80043e8:	f7fc fa90 	bl	800090c <HAL_UART_TxCpltCallback>
    
        #warning Function not supported by the current CODE_CONFIGURATOR selected!

    #endif

    return RET_OK;
 80043ec:	231b      	movs	r3, #27
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000048c 	.word	0x2000048c
 80043fc:	20000010 	.word	0x20000010
 8004400:	08007bb0 	.word	0x08007bb0
 8004404:	08006f8c 	.word	0x08006f8c
 8004408:	08006fd8 	.word	0x08006fd8
 800440c:	08006fe0 	.word	0x08006fe0
 8004410:	2000055c 	.word	0x2000055c
 8004414:	200004f4 	.word	0x200004f4
 8004418:	20000378 	.word	0x20000378

0800441c <UART_1_RingBuffer__Read>:

et_RET UART_1_RingBuffer__Read(uint8_t * rx_vec,\
                               size_t    rx_vec_size)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <UART_1_RingBuffer__Read+0xd0>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	f083 0301 	eor.w	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <UART_1_RingBuffer__Read+0x34>
 8004434:	4b2e      	ldr	r3, [pc, #184]	; (80044f0 <UART_1_RingBuffer__Read+0xd4>)
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <UART_1_RingBuffer__Read+0xd8>)
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8004442:	4a2d      	ldr	r2, [pc, #180]	; (80044f8 <UART_1_RingBuffer__Read+0xdc>)
 8004444:	492d      	ldr	r1, [pc, #180]	; (80044fc <UART_1_RingBuffer__Read+0xe0>)
 8004446:	482e      	ldr	r0, [pc, #184]	; (8004500 <UART_1_RingBuffer__Read+0xe4>)
 8004448:	f001 fe30 	bl	80060ac <iprintf>
 800444c:	230b      	movs	r3, #11
 800444e:	e049      	b.n	80044e4 <UART_1_RingBuffer__Read+0xc8>
    /* Check if pointer is not NULL. */
    CENTI_CHECK_PTR(rx_vec);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10d      	bne.n	8004472 <UART_1_RingBuffer__Read+0x56>
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <UART_1_RingBuffer__Read+0xd4>)
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <UART_1_RingBuffer__Read+0xd8>)
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004464:	4a24      	ldr	r2, [pc, #144]	; (80044f8 <UART_1_RingBuffer__Read+0xdc>)
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <UART_1_RingBuffer__Read+0xe0>)
 8004468:	4825      	ldr	r0, [pc, #148]	; (8004500 <UART_1_RingBuffer__Read+0xe4>)
 800446a:	f001 fe1f 	bl	80060ac <iprintf>
 800446e:	230a      	movs	r3, #10
 8004470:	e038      	b.n	80044e4 <UART_1_RingBuffer__Read+0xc8>
    #if ((defined(__CENTI_CODE_CONFIGURATOR_MCC__))     ||\
         (defined(__CENTI_CODE_CONFIGURATOR_MELODY__))  ||\
         (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))	)

        /* Check vector size. */
        if ((rx_vec_size > UART_1_RingBuffer__GetRxRemainSize()) || \
 8004472:	f000 f84d 	bl	8004510 <UART_1_RingBuffer__GetRxRemainSize>
 8004476:	4602      	mov	r2, r0
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4293      	cmp	r3, r2
 800447c:	d802      	bhi.n	8004484 <UART_1_RingBuffer__Read+0x68>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10d      	bne.n	80044a0 <UART_1_RingBuffer__Read+0x84>
            (rx_vec_size <= 0))
        {
            CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 8004484:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <UART_1_RingBuffer__Read+0xd4>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <UART_1_RingBuffer__Read+0xd8>)
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8004492:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <UART_1_RingBuffer__Read+0xdc>)
 8004494:	4919      	ldr	r1, [pc, #100]	; (80044fc <UART_1_RingBuffer__Read+0xe0>)
 8004496:	481a      	ldr	r0, [pc, #104]	; (8004500 <UART_1_RingBuffer__Read+0xe4>)
 8004498:	f001 fe08 	bl	80060ac <iprintf>
 800449c:	2307      	movs	r3, #7
 800449e:	e021      	b.n	80044e4 <UART_1_RingBuffer__Read+0xc8>
        
        f_RX = FLAG_OFF;
        
    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        for (uint8_t n_data=0; n_data<rx_vec_size; n_data++)
 80044a0:	2300      	movs	r3, #0
 80044a2:	73fb      	strb	r3, [r7, #15]
 80044a4:	e016      	b.n	80044d4 <UART_1_RingBuffer__Read+0xb8>
        {
            RX_FIFO_Get(rx_vec[n_data]);
 80044a6:	4b17      	ldr	r3, [pc, #92]	; (8004504 <UART_1_RingBuffer__Read+0xe8>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	440b      	add	r3, r1
 80044b0:	4915      	ldr	r1, [pc, #84]	; (8004508 <UART_1_RingBuffer__Read+0xec>)
 80044b2:	5c8a      	ldrb	r2, [r1, r2]
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	4b13      	ldr	r3, [pc, #76]	; (8004504 <UART_1_RingBuffer__Read+0xe8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	2b63      	cmp	r3, #99	; 0x63
 80044be:	d803      	bhi.n	80044c8 <UART_1_RingBuffer__Read+0xac>
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <UART_1_RingBuffer__Read+0xe8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	e000      	b.n	80044ca <UART_1_RingBuffer__Read+0xae>
 80044c8:	2300      	movs	r3, #0
 80044ca:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <UART_1_RingBuffer__Read+0xe8>)
 80044cc:	6013      	str	r3, [r2, #0]
        for (uint8_t n_data=0; n_data<rx_vec_size; n_data++)
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	3301      	adds	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d8e4      	bhi.n	80044a6 <UART_1_RingBuffer__Read+0x8a>
        }

        f_RX = FLAG_OFF;
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <UART_1_RingBuffer__Read+0xf0>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
    
        #warning Function not supported by the current CODE_CONFIGURATOR selected!

    #endif

    return RET_OK;
 80044e2:	231b      	movs	r3, #27
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	2000048c 	.word	0x2000048c
 80044f0:	20000010 	.word	0x20000010
 80044f4:	08007bcc 	.word	0x08007bcc
 80044f8:	08006f8c 	.word	0x08006f8c
 80044fc:	08006fd8 	.word	0x08006fd8
 8004500:	08006fe0 	.word	0x08006fe0
 8004504:	20000560 	.word	0x20000560
 8004508:	20000490 	.word	0x20000490
 800450c:	2000048d 	.word	0x2000048d

08004510 <UART_1_RingBuffer__GetRxRemainSize>:
    
    return f_aux_rx;
}

size_t UART_1_RingBuffer__GetRxRemainSize(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
    #if ((defined(__CENTI_CODE_CONFIGURATOR_MCC__))     || \
         (defined(__CENTI_CODE_CONFIGURATOR_MELODY__))  || \
         (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))  )

        return (g_rx_get_idx <= g_rx_set_idx) ? \
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <UART_1_RingBuffer__GetRxRemainSize+0x34>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <UART_1_RingBuffer__GetRxRemainSize+0x38>)
 800451a:	681b      	ldr	r3, [r3, #0]
               (g_rx_set_idx - g_rx_get_idx)  : \
 800451c:	429a      	cmp	r2, r3
 800451e:	d805      	bhi.n	800452c <UART_1_RingBuffer__GetRxRemainSize+0x1c>
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <UART_1_RingBuffer__GetRxRemainSize+0x38>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <UART_1_RingBuffer__GetRxRemainSize+0x34>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	e005      	b.n	8004538 <UART_1_RingBuffer__GetRxRemainSize+0x28>
               ((RX_BUFFER_SIZE - g_rx_get_idx) + g_rx_set_idx);
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <UART_1_RingBuffer__GetRxRemainSize+0x38>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <UART_1_RingBuffer__GetRxRemainSize+0x34>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	1ad3      	subs	r3, r2, r3
               (g_rx_set_idx - g_rx_get_idx)  : \
 8004536:	3364      	adds	r3, #100	; 0x64
    #else
        
        return g_rx_total;
        
    #endif
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000560 	.word	0x20000560
 8004548:	20000558 	.word	0x20000558

0800454c <UART_1_RingBuffer__GetTxRemainSize>:

size_t UART_1_RingBuffer__GetTxRemainSize(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
    #if ((defined(__CENTI_CODE_CONFIGURATOR_MCC__))     || \
         (defined(__CENTI_CODE_CONFIGURATOR_MELODY__))  || \
         (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))  )

        return (g_tx_get_idx <= g_tx_set_idx) ? \
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <UART_1_RingBuffer__GetTxRemainSize+0x34>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <UART_1_RingBuffer__GetTxRemainSize+0x38>)
 8004556:	681b      	ldr	r3, [r3, #0]
               (g_tx_set_idx - g_tx_get_idx)  : \
 8004558:	429a      	cmp	r2, r3
 800455a:	d805      	bhi.n	8004568 <UART_1_RingBuffer__GetTxRemainSize+0x1c>
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <UART_1_RingBuffer__GetTxRemainSize+0x38>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <UART_1_RingBuffer__GetTxRemainSize+0x34>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	e005      	b.n	8004574 <UART_1_RingBuffer__GetTxRemainSize+0x28>
               ((TX_BUFFER_SIZE - g_tx_get_idx) + g_tx_set_idx);
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <UART_1_RingBuffer__GetTxRemainSize+0x38>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <UART_1_RingBuffer__GetTxRemainSize+0x34>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	1ad3      	subs	r3, r2, r3
               (g_tx_set_idx - g_tx_get_idx)  : \
 8004572:	3364      	adds	r3, #100	; 0x64
    #else
        
        return 0;
        
    #endif
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000564 	.word	0x20000564
 8004584:	2000055c 	.word	0x2000055c

08004588 <UART_1_RingBuffer__ClearRxFIFO>:

void UART_1_RingBuffer__ClearRxFIFO(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
    g_rx_set_idx = 0;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <UART_1_RingBuffer__ClearRxFIFO+0x20>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
    g_rx_get_idx = 0;
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <UART_1_RingBuffer__ClearRxFIFO+0x24>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
    f_RX         = FLAG_OFF;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <UART_1_RingBuffer__ClearRxFIFO+0x28>)
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	20000558 	.word	0x20000558
 80045ac:	20000560 	.word	0x20000560
 80045b0:	2000048d 	.word	0x2000048d

080045b4 <UART_1_RingBuffer__Rx_Cb>:
#else

    static void UART_1_ISR__Rx(void)

#endif
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
        f_RX = FLAG_ON;
        
    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        /* Add data to FIFO. */
        RX_FIFO_Add(g_rx_byte);
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <UART_1_RingBuffer__Rx_Cb+0x54>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a12      	ldr	r2, [pc, #72]	; (800460c <UART_1_RingBuffer__Rx_Cb+0x58>)
 80045c2:	7811      	ldrb	r1, [r2, #0]
 80045c4:	4a12      	ldr	r2, [pc, #72]	; (8004610 <UART_1_RingBuffer__Rx_Cb+0x5c>)
 80045c6:	54d1      	strb	r1, [r2, r3]
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <UART_1_RingBuffer__Rx_Cb+0x54>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	2b63      	cmp	r3, #99	; 0x63
 80045d0:	d803      	bhi.n	80045da <UART_1_RingBuffer__Rx_Cb+0x26>
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <UART_1_RingBuffer__Rx_Cb+0x54>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3301      	adds	r3, #1
 80045d8:	e000      	b.n	80045dc <UART_1_RingBuffer__Rx_Cb+0x28>
 80045da:	2300      	movs	r3, #0
 80045dc:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <UART_1_RingBuffer__Rx_Cb+0x54>)
 80045de:	6013      	str	r3, [r2, #0]

        HAL_UART_Receive_IT(huart, &g_rx_byte, 1);
 80045e0:	2201      	movs	r2, #1
 80045e2:	490a      	ldr	r1, [pc, #40]	; (800460c <UART_1_RingBuffer__Rx_Cb+0x58>)
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fe fb9d 	bl	8002d24 <HAL_UART_Receive_IT>

        /* Flag. */
        f_RX = FLAG_ON;
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <UART_1_RingBuffer__Rx_Cb+0x60>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]

        f_RX = FLAG_ON;

    #endif

    if (UART_1_CB__Rx != NULL)
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <UART_1_RingBuffer__Rx_Cb+0x64>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <UART_1_RingBuffer__Rx_Cb+0x4a>
    {
        UART_1_CB__Rx();
 80045f8:	4b07      	ldr	r3, [pc, #28]	; (8004618 <UART_1_RingBuffer__Rx_Cb+0x64>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4798      	blx	r3
    }
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000558 	.word	0x20000558
 800460c:	2000048f 	.word	0x2000048f
 8004610:	20000490 	.word	0x20000490
 8004614:	2000048d 	.word	0x2000048d
 8004618:	20000568 	.word	0x20000568

0800461c <UART_1_RingBuffer__Tx_Cb>:
#else

    static void UART_1_ISR__Tx(void)

#endif
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
        
        f_TX = FLAG_ON;
        
    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        uint8_t tx_byte = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]

        while (UART_1_RingBuffer__GetTxRemainSize() > 0)
 8004628:	e018      	b.n	800465c <UART_1_RingBuffer__Tx_Cb+0x40>
        {
            TX_FIFO_Get(tx_byte);
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <UART_1_RingBuffer__Tx_Cb+0x68>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a16      	ldr	r2, [pc, #88]	; (8004688 <UART_1_RingBuffer__Tx_Cb+0x6c>)
 8004630:	5cd3      	ldrb	r3, [r2, r3]
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	4b13      	ldr	r3, [pc, #76]	; (8004684 <UART_1_RingBuffer__Tx_Cb+0x68>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	2b63      	cmp	r3, #99	; 0x63
 800463c:	d803      	bhi.n	8004646 <UART_1_RingBuffer__Tx_Cb+0x2a>
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <UART_1_RingBuffer__Tx_Cb+0x68>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	e000      	b.n	8004648 <UART_1_RingBuffer__Tx_Cb+0x2c>
 8004646:	2300      	movs	r3, #0
 8004648:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <UART_1_RingBuffer__Tx_Cb+0x68>)
 800464a:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(huart, &tx_byte, 1, UART1_TIMEOUT_TICK);
 800464c:	f107 010f 	add.w	r1, r7, #15
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	2201      	movs	r2, #1
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fe fada 	bl	8002c10 <HAL_UART_Transmit>
        while (UART_1_RingBuffer__GetTxRemainSize() > 0)
 800465c:	f7ff ff76 	bl	800454c <UART_1_RingBuffer__GetTxRemainSize>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e1      	bne.n	800462a <UART_1_RingBuffer__Tx_Cb+0xe>
        }
        /* Flag. */
        f_RX = FLAG_ON;
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <UART_1_RingBuffer__Tx_Cb+0x70>)
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]

        f_TX = FLAG_ON;

    #endif

    if (UART_1_CB__Tx != NULL)
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <UART_1_RingBuffer__Tx_Cb+0x74>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <UART_1_RingBuffer__Tx_Cb+0x5e>
    {
        UART_1_CB__Tx();
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <UART_1_RingBuffer__Tx_Cb+0x74>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4798      	blx	r3
    }
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000564 	.word	0x20000564
 8004688:	200004f4 	.word	0x200004f4
 800468c:	2000048d 	.word	0x2000048d
 8004690:	2000056c 	.word	0x2000056c

08004694 <GPIO__MODBUS_DE_SetLevel>:
    /* ******************************************************************************** */
    /* * CUBEMX                                                                       * */
    /* ******************************************************************************** */

    void GPIO__MODBUS_DE_SetLevel (t_LEVEL level)
     {
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
     	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, level);
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	461a      	mov	r2, r3
 80046a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046a6:	4803      	ldr	r0, [pc, #12]	; (80046b4 <GPIO__MODBUS_DE_SetLevel+0x20>)
 80046a8:	f7fc ff2c 	bl	8001504 <HAL_GPIO_WritePin>
     }
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	48000800 	.word	0x48000800

080046b8 <Element_Is_Equal>:
 * @return true if they are equal, false otherwise.
 */
static inline bool Element_Is_Equal(et_ARRAYLIST et_arraylist,
                                    size_t       index,
                                    void *       elem)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	73fb      	strb	r3, [r7, #15]
    return g_arraylist_inst[et_arraylist].cmp_fn(\
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	4912      	ldr	r1, [pc, #72]	; (8004714 <Element_Is_Equal+0x5c>)
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3310      	adds	r3, #16
 80046d6:	681c      	ldr	r4, [r3, #0]
            g_arraylist_inst[et_arraylist].p_vector + \
 80046d8:	7bfa      	ldrb	r2, [r7, #15]
 80046da:	490e      	ldr	r1, [pc, #56]	; (8004714 <Element_Is_Equal+0x5c>)
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	6819      	ldr	r1, [r3, #0]
            (index * g_arraylist_inst[et_arraylist].elem_size), elem);
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	480a      	ldr	r0, [pc, #40]	; (8004714 <Element_Is_Equal+0x5c>)
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4403      	add	r3, r0
 80046f6:	3308      	adds	r3, #8
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
            g_arraylist_inst[et_arraylist].p_vector + \
 8004700:	440b      	add	r3, r1
    return g_arraylist_inst[et_arraylist].cmp_fn(\
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	47a0      	blx	r4
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	bf00      	nop
 8004714:	20000574 	.word	0x20000574

08004718 <ArrayList__Initialize>:
et_RET ArrayList__Initialize(et_ARRAYLIST     et_arraylist,
                             void *           p_vector,
                             size_t           num_elem,
                             size_t           size_elem, 
                             t__ARRAYLIST_cmp cmp_fn)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af02      	add	r7, sp, #8
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4603      	mov	r3, r0
 8004726:	73fb      	strb	r3, [r7, #15]
    et_RET et_ret = RET_UNEXPECTED;
 8004728:	2300      	movs	r3, #0
 800472a:	75fb      	strb	r3, [r7, #23]

    CENTI_CHECK_PTR(p_vector);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <ArrayList__Initialize+0x34>
 8004732:	4b35      	ldr	r3, [pc, #212]	; (8004808 <ArrayList__Initialize+0xf0>)
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	4b34      	ldr	r3, [pc, #208]	; (800480c <ArrayList__Initialize+0xf4>)
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	2346      	movs	r3, #70	; 0x46
 800473e:	4a34      	ldr	r2, [pc, #208]	; (8004810 <ArrayList__Initialize+0xf8>)
 8004740:	4934      	ldr	r1, [pc, #208]	; (8004814 <ArrayList__Initialize+0xfc>)
 8004742:	4835      	ldr	r0, [pc, #212]	; (8004818 <ArrayList__Initialize+0x100>)
 8004744:	f001 fcb2 	bl	80060ac <iprintf>
 8004748:	230a      	movs	r3, #10
 800474a:	e059      	b.n	8004800 <ArrayList__Initialize+0xe8>

    if ((num_elem <= 1) || (size_elem == 0))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d902      	bls.n	8004758 <ArrayList__Initialize+0x40>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10c      	bne.n	8004772 <ArrayList__Initialize+0x5a>
    {
        CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 8004758:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <ArrayList__Initialize+0xf0>)
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	4b2b      	ldr	r3, [pc, #172]	; (800480c <ArrayList__Initialize+0xf4>)
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	234a      	movs	r3, #74	; 0x4a
 8004764:	4a2a      	ldr	r2, [pc, #168]	; (8004810 <ArrayList__Initialize+0xf8>)
 8004766:	492b      	ldr	r1, [pc, #172]	; (8004814 <ArrayList__Initialize+0xfc>)
 8004768:	482b      	ldr	r0, [pc, #172]	; (8004818 <ArrayList__Initialize+0x100>)
 800476a:	f001 fc9f 	bl	80060ac <iprintf>
 800476e:	2307      	movs	r3, #7
 8004770:	e046      	b.n	8004800 <ArrayList__Initialize+0xe8>
    }

    et_ret = ArrayList__Clear(et_arraylist);
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 f98d 	bl	8004a94 <ArrayList__Clear>
 800477a:	4603      	mov	r3, r0
 800477c:	75fb      	strb	r3, [r7, #23]
    CENTI_CHECK_RET(et_ret);
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	2b1a      	cmp	r3, #26
 8004782:	d80e      	bhi.n	80047a2 <ArrayList__Initialize+0x8a>
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	4a20      	ldr	r2, [pc, #128]	; (8004808 <ArrayList__Initialize+0xf0>)
 8004788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	4b1f      	ldr	r3, [pc, #124]	; (800480c <ArrayList__Initialize+0xf4>)
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	234e      	movs	r3, #78	; 0x4e
 8004794:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <ArrayList__Initialize+0xf8>)
 8004796:	491f      	ldr	r1, [pc, #124]	; (8004814 <ArrayList__Initialize+0xfc>)
 8004798:	481f      	ldr	r0, [pc, #124]	; (8004818 <ArrayList__Initialize+0x100>)
 800479a:	f001 fc87 	bl	80060ac <iprintf>
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	e02e      	b.n	8004800 <ArrayList__Initialize+0xe8>

    g_arraylist_inst[et_arraylist].p_vector      = (uint8_t *) p_vector;
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	491d      	ldr	r1, [pc, #116]	; (800481c <ArrayList__Initialize+0x104>)
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	601a      	str	r2, [r3, #0]
    g_arraylist_inst[et_arraylist].elem_capacity = num_elem;
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	4919      	ldr	r1, [pc, #100]	; (800481c <ArrayList__Initialize+0x104>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	3304      	adds	r3, #4
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	601a      	str	r2, [r3, #0]
    g_arraylist_inst[et_arraylist].elem_size     = size_elem;
 80047c8:	7bfa      	ldrb	r2, [r7, #15]
 80047ca:	4914      	ldr	r1, [pc, #80]	; (800481c <ArrayList__Initialize+0x104>)
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	3308      	adds	r3, #8
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	601a      	str	r2, [r3, #0]

    if (cmp_fn != NULL)
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <ArrayList__Initialize+0xde>
    {
        g_arraylist_inst[et_arraylist].cmp_fn = cmp_fn;
 80047e2:	7bfa      	ldrb	r2, [r7, #15]
 80047e4:	490d      	ldr	r1, [pc, #52]	; (800481c <ArrayList__Initialize+0x104>)
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3310      	adds	r3, #16
 80047f2:	6a3a      	ldr	r2, [r7, #32]
 80047f4:	601a      	str	r2, [r3, #0]
    }

    g_initialized_vec[et_arraylist] = true;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	4a09      	ldr	r2, [pc, #36]	; (8004820 <ArrayList__Initialize+0x108>)
 80047fa:	2101      	movs	r1, #1
 80047fc:	54d1      	strb	r1, [r2, r3]

    return RET_OK;
 80047fe:	231b      	movs	r3, #27
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	200000a0 	.word	0x200000a0
 800480c:	08007be4 	.word	0x08007be4
 8004810:	080071b4 	.word	0x080071b4
 8004814:	080071f0 	.word	0x080071f0
 8004818:	080071f8 	.word	0x080071f8
 800481c:	20000574 	.word	0x20000574
 8004820:	20000570 	.word	0x20000570

08004824 <ArrayList__Search>:
}

et_RET ArrayList__Search(et_ARRAYLIST et_arraylist,
                         void *       elem,
                         size_t *     index )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af02      	add	r7, sp, #8
 800482a:	4603      	mov	r3, r0
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_PTR(elem);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10c      	bne.n	8004852 <ArrayList__Search+0x2e>
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <ArrayList__Search+0x11c>)
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	4b41      	ldr	r3, [pc, #260]	; (8004944 <ArrayList__Search+0x120>)
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	236c      	movs	r3, #108	; 0x6c
 8004844:	4a40      	ldr	r2, [pc, #256]	; (8004948 <ArrayList__Search+0x124>)
 8004846:	4941      	ldr	r1, [pc, #260]	; (800494c <ArrayList__Search+0x128>)
 8004848:	4841      	ldr	r0, [pc, #260]	; (8004950 <ArrayList__Search+0x12c>)
 800484a:	f001 fc2f 	bl	80060ac <iprintf>
 800484e:	230a      	movs	r3, #10
 8004850:	e072      	b.n	8004938 <ArrayList__Search+0x114>
    CENTI_CHECK_PTR(index);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10c      	bne.n	8004872 <ArrayList__Search+0x4e>
 8004858:	4b39      	ldr	r3, [pc, #228]	; (8004940 <ArrayList__Search+0x11c>)
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	4b39      	ldr	r3, [pc, #228]	; (8004944 <ArrayList__Search+0x120>)
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	236d      	movs	r3, #109	; 0x6d
 8004864:	4a38      	ldr	r2, [pc, #224]	; (8004948 <ArrayList__Search+0x124>)
 8004866:	4939      	ldr	r1, [pc, #228]	; (800494c <ArrayList__Search+0x128>)
 8004868:	4839      	ldr	r0, [pc, #228]	; (8004950 <ArrayList__Search+0x12c>)
 800486a:	f001 fc1f 	bl	80060ac <iprintf>
 800486e:	230a      	movs	r3, #10
 8004870:	e062      	b.n	8004938 <ArrayList__Search+0x114>
    CENTI_CHECK_PTR(g_arraylist_inst[et_arraylist].cmp_fn);
 8004872:	7bfa      	ldrb	r2, [r7, #15]
 8004874:	4937      	ldr	r1, [pc, #220]	; (8004954 <ArrayList__Search+0x130>)
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	3310      	adds	r3, #16
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10c      	bne.n	80048a2 <ArrayList__Search+0x7e>
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <ArrayList__Search+0x11c>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <ArrayList__Search+0x120>)
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	236e      	movs	r3, #110	; 0x6e
 8004894:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <ArrayList__Search+0x124>)
 8004896:	492d      	ldr	r1, [pc, #180]	; (800494c <ArrayList__Search+0x128>)
 8004898:	482d      	ldr	r0, [pc, #180]	; (8004950 <ArrayList__Search+0x12c>)
 800489a:	f001 fc07 	bl	80060ac <iprintf>
 800489e:	230a      	movs	r3, #10
 80048a0:	e04a      	b.n	8004938 <ArrayList__Search+0x114>
    CENTI_CHECK_INIT(g_initialized_vec[et_arraylist]);
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <ArrayList__Search+0x134>)
 80048a6:	5cd3      	ldrb	r3, [r2, r3]
 80048a8:	f083 0301 	eor.w	r3, r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <ArrayList__Search+0xa8>
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <ArrayList__Search+0x11c>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <ArrayList__Search+0x120>)
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	236f      	movs	r3, #111	; 0x6f
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <ArrayList__Search+0x124>)
 80048c0:	4922      	ldr	r1, [pc, #136]	; (800494c <ArrayList__Search+0x128>)
 80048c2:	4823      	ldr	r0, [pc, #140]	; (8004950 <ArrayList__Search+0x12c>)
 80048c4:	f001 fbf2 	bl	80060ac <iprintf>
 80048c8:	230b      	movs	r3, #11
 80048ca:	e035      	b.n	8004938 <ArrayList__Search+0x114>

    *index = CENTI_ARRAYLIST_INVALID_INDEX;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	601a      	str	r2, [r3, #0]

    for(size_t elem_idx = 0; elem_idx < g_arraylist_inst[et_arraylist].elem_counter; elem_idx++)
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e00f      	b.n	80048fa <ArrayList__Search+0xd6>
    {
        if (Element_Is_Equal(et_arraylist, elem_idx, elem))
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	6979      	ldr	r1, [r7, #20]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fee9 	bl	80046b8 <Element_Is_Equal>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <ArrayList__Search+0xd0>
        {
            *index = elem_idx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	601a      	str	r2, [r3, #0]
            break;
 80048f2:	e00e      	b.n	8004912 <ArrayList__Search+0xee>
    for(size_t elem_idx = 0; elem_idx < g_arraylist_inst[et_arraylist].elem_counter; elem_idx++)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3301      	adds	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	7bfa      	ldrb	r2, [r7, #15]
 80048fc:	4915      	ldr	r1, [pc, #84]	; (8004954 <ArrayList__Search+0x130>)
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	330c      	adds	r3, #12
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	429a      	cmp	r2, r3
 8004910:	d3e3      	bcc.n	80048da <ArrayList__Search+0xb6>
        }
    }
    
    if (*index == CENTI_ARRAYLIST_INVALID_INDEX)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d10c      	bne.n	8004936 <ArrayList__Search+0x112>
    {
        CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 800491c:	4b08      	ldr	r3, [pc, #32]	; (8004940 <ArrayList__Search+0x11c>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <ArrayList__Search+0x120>)
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	237e      	movs	r3, #126	; 0x7e
 8004928:	4a07      	ldr	r2, [pc, #28]	; (8004948 <ArrayList__Search+0x124>)
 800492a:	4908      	ldr	r1, [pc, #32]	; (800494c <ArrayList__Search+0x128>)
 800492c:	4808      	ldr	r0, [pc, #32]	; (8004950 <ArrayList__Search+0x12c>)
 800492e:	f001 fbbd 	bl	80060ac <iprintf>
 8004932:	2307      	movs	r3, #7
 8004934:	e000      	b.n	8004938 <ArrayList__Search+0x114>
    }
    
    return RET_OK;
 8004936:	231b      	movs	r3, #27
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	200000a0 	.word	0x200000a0
 8004944:	08007bfc 	.word	0x08007bfc
 8004948:	080071b4 	.word	0x080071b4
 800494c:	080071f0 	.word	0x080071f0
 8004950:	080071f8 	.word	0x080071f8
 8004954:	20000574 	.word	0x20000574
 8004958:	20000570 	.word	0x20000570

0800495c <ArrayList__Add>:
    return RET_OK;
}

et_RET ArrayList__Add(et_ARRAYLIST et_arraylist,
                      void *       elem)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b085      	sub	sp, #20
 8004960:	af02      	add	r7, sp, #8
 8004962:	4603      	mov	r3, r0
 8004964:	6039      	str	r1, [r7, #0]
 8004966:	71fb      	strb	r3, [r7, #7]
    CENTI_CHECK_PTR(elem);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10c      	bne.n	8004988 <ArrayList__Add+0x2c>
 800496e:	4b42      	ldr	r3, [pc, #264]	; (8004a78 <ArrayList__Add+0x11c>)
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <ArrayList__Add+0x120>)
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	239a      	movs	r3, #154	; 0x9a
 800497a:	4a41      	ldr	r2, [pc, #260]	; (8004a80 <ArrayList__Add+0x124>)
 800497c:	4941      	ldr	r1, [pc, #260]	; (8004a84 <ArrayList__Add+0x128>)
 800497e:	4842      	ldr	r0, [pc, #264]	; (8004a88 <ArrayList__Add+0x12c>)
 8004980:	f001 fb94 	bl	80060ac <iprintf>
 8004984:	230a      	movs	r3, #10
 8004986:	e072      	b.n	8004a6e <ArrayList__Add+0x112>
    CENTI_CHECK_INIT(g_initialized_vec[et_arraylist]);
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	4a40      	ldr	r2, [pc, #256]	; (8004a8c <ArrayList__Add+0x130>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	f083 0301 	eor.w	r3, r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00c      	beq.n	80049b2 <ArrayList__Add+0x56>
 8004998:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <ArrayList__Add+0x11c>)
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <ArrayList__Add+0x120>)
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	239b      	movs	r3, #155	; 0x9b
 80049a4:	4a36      	ldr	r2, [pc, #216]	; (8004a80 <ArrayList__Add+0x124>)
 80049a6:	4937      	ldr	r1, [pc, #220]	; (8004a84 <ArrayList__Add+0x128>)
 80049a8:	4837      	ldr	r0, [pc, #220]	; (8004a88 <ArrayList__Add+0x12c>)
 80049aa:	f001 fb7f 	bl	80060ac <iprintf>
 80049ae:	230b      	movs	r3, #11
 80049b0:	e05d      	b.n	8004a6e <ArrayList__Add+0x112>

    if (g_arraylist_inst[et_arraylist].elem_counter == g_arraylist_inst[et_arraylist].elem_capacity)
 80049b2:	79fa      	ldrb	r2, [r7, #7]
 80049b4:	4936      	ldr	r1, [pc, #216]	; (8004a90 <ArrayList__Add+0x134>)
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	330c      	adds	r3, #12
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	79fa      	ldrb	r2, [r7, #7]
 80049c6:	4832      	ldr	r0, [pc, #200]	; (8004a90 <ArrayList__Add+0x134>)
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4403      	add	r3, r0
 80049d2:	3304      	adds	r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4299      	cmp	r1, r3
 80049d8:	d10c      	bne.n	80049f4 <ArrayList__Add+0x98>
    {
        CENTI_CHECK_RET(RET_FULL);
 80049da:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <ArrayList__Add+0x11c>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <ArrayList__Add+0x120>)
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	239f      	movs	r3, #159	; 0x9f
 80049e6:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <ArrayList__Add+0x124>)
 80049e8:	4926      	ldr	r1, [pc, #152]	; (8004a84 <ArrayList__Add+0x128>)
 80049ea:	4827      	ldr	r0, [pc, #156]	; (8004a88 <ArrayList__Add+0x12c>)
 80049ec:	f001 fb5e 	bl	80060ac <iprintf>
 80049f0:	2303      	movs	r3, #3
 80049f2:	e03c      	b.n	8004a6e <ArrayList__Add+0x112>
    }

    memcpy(g_arraylist_inst[et_arraylist].p_vector + (g_arraylist_inst[et_arraylist].elem_counter * g_arraylist_inst[et_arraylist].elem_size),
 80049f4:	79fa      	ldrb	r2, [r7, #7]
 80049f6:	4926      	ldr	r1, [pc, #152]	; (8004a90 <ArrayList__Add+0x134>)
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	79fa      	ldrb	r2, [r7, #7]
 8004a06:	4822      	ldr	r0, [pc, #136]	; (8004a90 <ArrayList__Add+0x134>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4403      	add	r3, r0
 8004a12:	330c      	adds	r3, #12
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	79fa      	ldrb	r2, [r7, #7]
 8004a18:	4c1d      	ldr	r4, [pc, #116]	; (8004a90 <ArrayList__Add+0x134>)
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4423      	add	r3, r4
 8004a24:	3308      	adds	r3, #8
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	fb00 f303 	mul.w	r3, r0, r3
 8004a2c:	18c8      	adds	r0, r1, r3
 8004a2e:	79fa      	ldrb	r2, [r7, #7]
 8004a30:	4917      	ldr	r1, [pc, #92]	; (8004a90 <ArrayList__Add+0x134>)
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	f001 fc03 	bl	800624e <memcpy>
           elem,
           g_arraylist_inst[et_arraylist].elem_size);
    g_arraylist_inst[et_arraylist].elem_counter++;
 8004a48:	79fa      	ldrb	r2, [r7, #7]
 8004a4a:	4911      	ldr	r1, [pc, #68]	; (8004a90 <ArrayList__Add+0x134>)
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	330c      	adds	r3, #12
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	480c      	ldr	r0, [pc, #48]	; (8004a90 <ArrayList__Add+0x134>)
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4403      	add	r3, r0
 8004a68:	330c      	adds	r3, #12
 8004a6a:	6019      	str	r1, [r3, #0]

    return RET_OK;
 8004a6c:	231b      	movs	r3, #27
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd90      	pop	{r4, r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200000a0 	.word	0x200000a0
 8004a7c:	08007c10 	.word	0x08007c10
 8004a80:	080071b4 	.word	0x080071b4
 8004a84:	080071f0 	.word	0x080071f0
 8004a88:	080071f8 	.word	0x080071f8
 8004a8c:	20000570 	.word	0x20000570
 8004a90:	20000574 	.word	0x20000574

08004a94 <ArrayList__Clear>:
{
    return g_arraylist_inst[et_arraylist].elem_counter;
}

et_RET ArrayList__Clear(et_ARRAYLIST et_arraylist)
{
 8004a94:	b4b0      	push	{r4, r5, r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
    st_ARRAYLIST clear_arraylist   = STRUCT_ARRAYLIST_INIT;
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <ArrayList__Clear+0x4c>)
 8004aa0:	f107 040c 	add.w	r4, r7, #12
 8004aa4:	461d      	mov	r5, r3
 8004aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	6023      	str	r3, [r4, #0]
    g_arraylist_inst[et_arraylist] = clear_arraylist;
 8004aae:	79fa      	ldrb	r2, [r7, #7]
 8004ab0:	490c      	ldr	r1, [pc, #48]	; (8004ae4 <ArrayList__Clear+0x50>)
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	461d      	mov	r5, r3
 8004abe:	f107 040c 	add.w	r4, r7, #12
 8004ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	602b      	str	r3, [r5, #0]

    g_initialized_vec[et_arraylist] = false;
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	4a06      	ldr	r2, [pc, #24]	; (8004ae8 <ArrayList__Clear+0x54>)
 8004ace:	2100      	movs	r1, #0
 8004ad0:	54d1      	strb	r1, [r2, r3]

    return RET_OK;    
 8004ad2:	231b      	movs	r3, #27
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3724      	adds	r7, #36	; 0x24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bcb0      	pop	{r4, r5, r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	0800720c 	.word	0x0800720c
 8004ae4:	20000574 	.word	0x20000574
 8004ae8:	20000570 	.word	0x20000570

08004aec <SoftTimer__Initialize>:

/* ************************************************************************************ */
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
et_RET SoftTimer__Initialize(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af02      	add	r7, sp, #8
    et_RET et_ret = RET_UNEXPECTED;
 8004af2:	2300      	movs	r3, #0
 8004af4:	71bb      	strb	r3, [r7, #6]
                 (sc == SL_STATUS_NULL_POINTER) ? RET_NULL_POINTER  : \
                                                  RET_FAIL          ;

    #elif (CENTI_SOFTTIMER_TIMER == CENTI_SOFTTIMER_TIMER_HAL)

        HAL_InitTick(TICK_INT_PRIORITY);
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fc f982 	bl	8000e00 <HAL_InitTick>

        et_ret = RET_OK;
 8004afc:	231b      	movs	r3, #27
 8004afe:	71bb      	strb	r3, [r7, #6]
        #error Define CENTI_SOFTTIMER_TIMER in the Project/CeNTI/Defines/SoftTimer_defines.h file!
        
    #endif

    /* Check if return is not RET_OK. */
    CENTI_CHECK_RET(et_ret);
 8004b00:	79bb      	ldrb	r3, [r7, #6]
 8004b02:	2b1a      	cmp	r3, #26
 8004b04:	d80f      	bhi.n	8004b26 <SoftTimer__Initialize+0x3a>
 8004b06:	79bb      	ldrb	r3, [r7, #6]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <SoftTimer__Initialize+0x90>)
 8004b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <SoftTimer__Initialize+0x94>)
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8004b18:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <SoftTimer__Initialize+0x98>)
 8004b1a:	491b      	ldr	r1, [pc, #108]	; (8004b88 <SoftTimer__Initialize+0x9c>)
 8004b1c:	481b      	ldr	r0, [pc, #108]	; (8004b8c <SoftTimer__Initialize+0xa0>)
 8004b1e:	f001 fac5 	bl	80060ac <iprintf>
 8004b22:	79bb      	ldrb	r3, [r7, #6]
 8004b24:	e025      	b.n	8004b72 <SoftTimer__Initialize+0x86>

    /* Indicate that initialization is complete. */
    g_initialized = true;
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <SoftTimer__Initialize+0xa4>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
    
    /* Stop all the SoftTimers. */
    for (uint8_t idx=0; idx<SOFTTIMER_INSTANCE_TOTAL; idx++)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	71fb      	strb	r3, [r7, #7]
 8004b30:	e01b      	b.n	8004b6a <SoftTimer__Initialize+0x7e>
    {
        /* Stop timer. */
        et_ret = SoftTimer__Stop(idx);
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f901 	bl	8004d3c <SoftTimer__Stop>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71bb      	strb	r3, [r7, #6]
        CENTI_CHECK_RET(et_ret);
 8004b3e:	79bb      	ldrb	r3, [r7, #6]
 8004b40:	2b1a      	cmp	r3, #26
 8004b42:	d80f      	bhi.n	8004b64 <SoftTimer__Initialize+0x78>
 8004b44:	79bb      	ldrb	r3, [r7, #6]
 8004b46:	4a0d      	ldr	r2, [pc, #52]	; (8004b7c <SoftTimer__Initialize+0x90>)
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <SoftTimer__Initialize+0x94>)
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004b56:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <SoftTimer__Initialize+0x98>)
 8004b58:	490b      	ldr	r1, [pc, #44]	; (8004b88 <SoftTimer__Initialize+0x9c>)
 8004b5a:	480c      	ldr	r0, [pc, #48]	; (8004b8c <SoftTimer__Initialize+0xa0>)
 8004b5c:	f001 faa6 	bl	80060ac <iprintf>
 8004b60:	79bb      	ldrb	r3, [r7, #6]
 8004b62:	e006      	b.n	8004b72 <SoftTimer__Initialize+0x86>
    for (uint8_t idx=0; idx<SOFTTIMER_INSTANCE_TOTAL; idx++)
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	3301      	adds	r3, #1
 8004b68:	71fb      	strb	r3, [r7, #7]
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d9e0      	bls.n	8004b32 <SoftTimer__Initialize+0x46>
    
    #if (CENTI_SOFTTIMER_DEBUG == CENTI_ENABLE)
        CENTI_DEBUG__Info("SoftTimer initialization complete!");
    #endif
    
    return RET_OK;
 8004b70:	231b      	movs	r3, #27
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000130 	.word	0x20000130
 8004b80:	08007c20 	.word	0x08007c20
 8004b84:	080073e0 	.word	0x080073e0
 8004b88:	0800741c 	.word	0x0800741c
 8004b8c:	08007424 	.word	0x08007424
 8004b90:	200005f0 	.word	0x200005f0

08004b94 <SoftTimer__Delay_msec>:

et_RET SoftTimer__Delay_msec(t_time_msec delay_msec)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	80fb      	strh	r3, [r7, #6]
    et_RET  et_ret        = RET_UNEXPECTED;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75fb      	strb	r3, [r7, #23]
    st_TIME st_delay_time = {};
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
    
    #if (CENTI_SOFTTIMER_DEBUG == CENTI_ENABLE)
        CENTI_DEBUG__Info("SoftTimer - Delay of %u msec", delay_msec);
    #endif
    
    st_delay_time.sec  = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]
    st_delay_time.msec = delay_msec;
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	81bb      	strh	r3, [r7, #12]
    
    /* Start timer. */
    et_ret = SoftTimer__Start(SOFTTIMER_INSTANCE_DELAY, st_delay_time);
 8004bb4:	f107 030c 	add.w	r3, r7, #12
 8004bb8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f000 f843 	bl	8004c48 <SoftTimer__Start>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	75fb      	strb	r3, [r7, #23]
    CENTI_CHECK_RET(et_ret);
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	2b1a      	cmp	r3, #26
 8004bca:	d80f      	bhi.n	8004bec <SoftTimer__Delay_msec+0x58>
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <SoftTimer__Delay_msec+0xa0>)
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <SoftTimer__Delay_msec+0xa4>)
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <SoftTimer__Delay_msec+0xa8>)
 8004be0:	4917      	ldr	r1, [pc, #92]	; (8004c40 <SoftTimer__Delay_msec+0xac>)
 8004be2:	4818      	ldr	r0, [pc, #96]	; (8004c44 <SoftTimer__Delay_msec+0xb0>)
 8004be4:	f001 fa62 	bl	80060ac <iprintf>
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	e01f      	b.n	8004c2c <SoftTimer__Delay_msec+0x98>
    
    /* Wait. */
    while (SOFTTIMER_ELAPSED_STATE_NOT_ELAPSED ==\
 8004bec:	bf00      	nop
            SoftTimer__Get_ElapsedState(SOFTTIMER_INSTANCE_DELAY))
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f000 f954 	bl	8004e9c <SoftTimer__Get_ElapsedState>
 8004bf4:	4603      	mov	r3, r0
    while (SOFTTIMER_ELAPSED_STATE_NOT_ELAPSED ==\
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f9      	beq.n	8004bee <SoftTimer__Delay_msec+0x5a>
    {
        /* Stay here while delay time has not passed. */
    }

    /* Stop timer. */
    et_ret = SoftTimer__Stop(SOFTTIMER_INSTANCE_DELAY);
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f000 f89e 	bl	8004d3c <SoftTimer__Stop>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75fb      	strb	r3, [r7, #23]
    CENTI_CHECK_RET(et_ret);
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	2b1a      	cmp	r3, #26
 8004c08:	d80f      	bhi.n	8004c2a <SoftTimer__Delay_msec+0x96>
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <SoftTimer__Delay_msec+0xa0>)
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <SoftTimer__Delay_msec+0xa4>)
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	f240 13c3 	movw	r3, #451	; 0x1c3
 8004c1c:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <SoftTimer__Delay_msec+0xa8>)
 8004c1e:	4908      	ldr	r1, [pc, #32]	; (8004c40 <SoftTimer__Delay_msec+0xac>)
 8004c20:	4808      	ldr	r0, [pc, #32]	; (8004c44 <SoftTimer__Delay_msec+0xb0>)
 8004c22:	f001 fa43 	bl	80060ac <iprintf>
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	e000      	b.n	8004c2c <SoftTimer__Delay_msec+0x98>
    
    return RET_OK;
 8004c2a:	231b      	movs	r3, #27
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000130 	.word	0x20000130
 8004c38:	08007c38 	.word	0x08007c38
 8004c3c:	080073e0 	.word	0x080073e0
 8004c40:	0800741c 	.word	0x0800741c
 8004c44:	08007424 	.word	0x08007424

08004c48 <SoftTimer__Start>:
    return RET_OK;
}

et_RET SoftTimer__Start(et_SOFTTIMER_INSTANCE et_softtimer,\
                        st_TIME               st_timer_time)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	f107 030c 	add.w	r3, r7, #12
 8004c52:	e883 0006 	stmia.w	r3, {r1, r2}
 8004c56:	4603      	mov	r3, r0
 8004c58:	75fb      	strb	r3, [r7, #23]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <SoftTimer__Start+0xd4>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f083 0301 	eor.w	r3, r3, #1
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00d      	beq.n	8004c84 <SoftTimer__Start+0x3c>
 8004c68:	4b2d      	ldr	r3, [pc, #180]	; (8004d20 <SoftTimer__Start+0xd8>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	4b2d      	ldr	r3, [pc, #180]	; (8004d24 <SoftTimer__Start+0xdc>)
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8004c76:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <SoftTimer__Start+0xe0>)
 8004c78:	492c      	ldr	r1, [pc, #176]	; (8004d2c <SoftTimer__Start+0xe4>)
 8004c7a:	482d      	ldr	r0, [pc, #180]	; (8004d30 <SoftTimer__Start+0xe8>)
 8004c7c:	f001 fa16 	bl	80060ac <iprintf>
 8004c80:	230b      	movs	r3, #11
 8004c82:	e046      	b.n	8004d12 <SoftTimer__Start+0xca>
    
    /* Initialize all the timer variables.
     * If timer is already initialized, it will reset all values and do a restart. */
    /* Set running state to running. */
    g_st_softtimers_vec[et_softtimer].et_running_state =\
 8004c84:	7dfa      	ldrb	r2, [r7, #23]
 8004c86:	492b      	ldr	r1, [pc, #172]	; (8004d34 <SoftTimer__Start+0xec>)
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3318      	adds	r3, #24
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_RUNNING_STATE_RUNNING;
    /* Clear elapsed state. */
    g_st_softtimers_vec[et_softtimer].et_elapsed_state =\
 8004c98:	7dfa      	ldrb	r2, [r7, #23]
 8004c9a:	4926      	ldr	r1, [pc, #152]	; (8004d34 <SoftTimer__Start+0xec>)
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3319      	adds	r3, #25
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_ELAPSED_STATE_NOT_ELAPSED;
    /* Set the timer value. */
    g_st_softtimers_vec[et_softtimer].st_delay_time =\
 8004cac:	7dfa      	ldrb	r2, [r7, #23]
 8004cae:	4921      	ldr	r1, [pc, #132]	; (8004d34 <SoftTimer__Start+0xec>)
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	3308      	adds	r3, #8
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f107 030c 	add.w	r3, r7, #12
 8004cc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cc6:	e882 0003 	stmia.w	r2, {r0, r1}
            st_timer_time;
    /* Update start timer value. */
    g_st_softtimers_vec[et_softtimer].st_start_time =\
 8004cca:	7dfa      	ldrb	r2, [r7, #23]
 8004ccc:	4919      	ldr	r1, [pc, #100]	; (8004d34 <SoftTimer__Start+0xec>)
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <SoftTimer__Start+0xf0>)
 8004cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cde:	e883 0003 	stmia.w	r3, {r0, r1}
            g_st_time_counter;
    /* Add start time and timer value to find the stop time. */
    g_st_softtimers_vec[et_softtimer].st_stop_time =\
 8004ce2:	7dfa      	ldrb	r2, [r7, #23]
            Time__Add_Times(g_st_time_counter, st_timer_time);
 8004ce4:	4913      	ldr	r1, [pc, #76]	; (8004d34 <SoftTimer__Start+0xec>)
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f103 0410 	add.w	r4, r3, #16
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	4a10      	ldr	r2, [pc, #64]	; (8004d38 <SoftTimer__Start+0xf0>)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	ca06      	ldmia	r2, {r1, r2}
 8004d00:	f000 f9bc 	bl	800507c <Time__Add_Times>
 8004d04:	4622      	mov	r2, r4
 8004d06:	463b      	mov	r3, r7
 8004d08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d0c:	e882 0003 	stmia.w	r2, {r0, r1}
            CENTI_DEBUG__Info("Actual time: %d", g_st_time_counter.sec);
            CENTI_DEBUG__Info("Stop time: %d", g_st_softtimers_vec[et_softtimer].st_stop_time.sec);
        }
    #endif
    
    return RET_OK;
 8004d10:	231b      	movs	r3, #27
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	200005f0 	.word	0x200005f0
 8004d20:	20000130 	.word	0x20000130
 8004d24:	08007c50 	.word	0x08007c50
 8004d28:	080073e0 	.word	0x080073e0
 8004d2c:	0800741c 	.word	0x0800741c
 8004d30:	08007424 	.word	0x08007424
 8004d34:	200005b0 	.word	0x200005b0
 8004d38:	200005e8 	.word	0x200005e8

08004d3c <SoftTimer__Stop>:

et_RET SoftTimer__Stop(et_SOFTTIMER_INSTANCE et_softtimer)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 8004d46:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <SoftTimer__Stop+0x68>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	f083 0301 	eor.w	r3, r3, #1
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00d      	beq.n	8004d70 <SoftTimer__Stop+0x34>
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <SoftTimer__Stop+0x6c>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <SoftTimer__Stop+0x70>)
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	f240 230e 	movw	r3, #526	; 0x20e
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <SoftTimer__Stop+0x74>)
 8004d64:	4913      	ldr	r1, [pc, #76]	; (8004db4 <SoftTimer__Stop+0x78>)
 8004d66:	4814      	ldr	r0, [pc, #80]	; (8004db8 <SoftTimer__Stop+0x7c>)
 8004d68:	f001 f9a0 	bl	80060ac <iprintf>
 8004d6c:	230b      	movs	r3, #11
 8004d6e:	e014      	b.n	8004d9a <SoftTimer__Stop+0x5e>
    
    /* Clear running state. */
    g_st_softtimers_vec[et_softtimer].et_running_state =\
 8004d70:	79fa      	ldrb	r2, [r7, #7]
 8004d72:	4912      	ldr	r1, [pc, #72]	; (8004dbc <SoftTimer__Stop+0x80>)
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3318      	adds	r3, #24
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_RUNNING_STATE_STOPPED;
    /* Clear elapsed state. */
    g_st_softtimers_vec[et_softtimer].et_elapsed_state =\
 8004d84:	79fa      	ldrb	r2, [r7, #7]
 8004d86:	490d      	ldr	r1, [pc, #52]	; (8004dbc <SoftTimer__Stop+0x80>)
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3319      	adds	r3, #25
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
            CENTI_DEBUG__Info("SoftTimer - Stop timer");
            CENTI_DEBUG__Info("SoftTimer ID: %d", et_softtimer);
        }
    #endif
    
    return RET_OK;
 8004d98:	231b      	movs	r3, #27
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200005f0 	.word	0x200005f0
 8004da8:	20000130 	.word	0x20000130
 8004dac:	08007c64 	.word	0x08007c64
 8004db0:	080073e0 	.word	0x080073e0
 8004db4:	0800741c 	.word	0x0800741c
 8004db8:	08007424 	.word	0x08007424
 8004dbc:	200005b0 	.word	0x200005b0

08004dc0 <SoftTimer__Restart>:

et_RET SoftTimer__Restart(et_SOFTTIMER_INSTANCE et_softtimer)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	73fb      	strb	r3, [r7, #15]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 8004dca:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <SoftTimer__Restart+0xbc>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	f083 0301 	eor.w	r3, r3, #1
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00d      	beq.n	8004df4 <SoftTimer__Restart+0x34>
 8004dd8:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <SoftTimer__Restart+0xc0>)
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <SoftTimer__Restart+0xc4>)
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	f240 2325 	movw	r3, #549	; 0x225
 8004de6:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <SoftTimer__Restart+0xc8>)
 8004de8:	4928      	ldr	r1, [pc, #160]	; (8004e8c <SoftTimer__Restart+0xcc>)
 8004dea:	4829      	ldr	r0, [pc, #164]	; (8004e90 <SoftTimer__Restart+0xd0>)
 8004dec:	f001 f95e 	bl	80060ac <iprintf>
 8004df0:	230b      	movs	r3, #11
 8004df2:	e03f      	b.n	8004e74 <SoftTimer__Restart+0xb4>
    
    /* Update start time. */
    g_st_softtimers_vec[et_softtimer].st_start_time =\
 8004df4:	7bfa      	ldrb	r2, [r7, #15]
 8004df6:	4927      	ldr	r1, [pc, #156]	; (8004e94 <SoftTimer__Restart+0xd4>)
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	4a25      	ldr	r2, [pc, #148]	; (8004e98 <SoftTimer__Restart+0xd8>)
 8004e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e08:	e883 0003 	stmia.w	r3, {r0, r1}
            g_st_time_counter;
    /* Change running state to running. */
    g_st_softtimers_vec[et_softtimer].et_running_state =\
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	4921      	ldr	r1, [pc, #132]	; (8004e94 <SoftTimer__Restart+0xd4>)
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_RUNNING_STATE_RUNNING;
    /* Clear elapsed state. */
    g_st_softtimers_vec[et_softtimer].et_elapsed_state =\
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	491c      	ldr	r1, [pc, #112]	; (8004e94 <SoftTimer__Restart+0xd4>)
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	3319      	adds	r3, #25
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_ELAPSED_STATE_NOT_ELAPSED;
    /* Add start time and timer value to find the stop time. */
    g_st_softtimers_vec[et_softtimer].st_stop_time =\
            Time__Add_Times(g_st_time_counter,\
 8004e34:	7bfa      	ldrb	r2, [r7, #15]
    g_st_softtimers_vec[et_softtimer].st_stop_time =\
 8004e36:	7bf9      	ldrb	r1, [r7, #15]
            Time__Add_Times(g_st_time_counter,\
 8004e38:	4816      	ldr	r0, [pc, #88]	; (8004e94 <SoftTimer__Restart+0xd4>)
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	1a5b      	subs	r3, r3, r1
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4403      	add	r3, r0
 8004e44:	f103 0410 	add.w	r4, r3, #16
 8004e48:	4638      	mov	r0, r7
 8004e4a:	4912      	ldr	r1, [pc, #72]	; (8004e94 <SoftTimer__Restart+0xd4>)
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	3308      	adds	r3, #8
 8004e58:	490f      	ldr	r1, [pc, #60]	; (8004e98 <SoftTimer__Restart+0xd8>)
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	9200      	str	r2, [sp, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	c906      	ldmia	r1, {r1, r2}
 8004e62:	f000 f90b 	bl	800507c <Time__Add_Times>
 8004e66:	4622      	mov	r2, r4
 8004e68:	463b      	mov	r3, r7
 8004e6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e6e:	e882 0003 	stmia.w	r2, {r0, r1}
            CENTI_DEBUG__Info("Actual time: %d sec", g_st_time_counter.sec);
            CENTI_DEBUG__Info("Stop time: %d sec", g_st_softtimers_vec[et_softtimer].st_stop_time.sec);
        }
    #endif
    
    return RET_OK;
 8004e72:	231b      	movs	r3, #27
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd90      	pop	{r4, r7, pc}
 8004e7c:	200005f0 	.word	0x200005f0
 8004e80:	20000130 	.word	0x20000130
 8004e84:	08007c74 	.word	0x08007c74
 8004e88:	080073e0 	.word	0x080073e0
 8004e8c:	0800741c 	.word	0x0800741c
 8004e90:	08007424 	.word	0x08007424
 8004e94:	200005b0 	.word	0x200005b0
 8004e98:	200005e8 	.word	0x200005e8

08004e9c <SoftTimer__Get_ElapsedState>:
    return g_st_softtimers_vec[et_softtimer].et_running_state;
}

et_SOFTTIMER_ELAPSED_STATE SoftTimer__Get_ElapsedState(\
        et_SOFTTIMER_INSTANCE et_softtimer)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
    /* Update timer state. */
    SoftTimer_PRIV__CheckTimer(et_softtimer);
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f81f 	bl	8004eec <SoftTimer_PRIV__CheckTimer>
    
    /* Return state. */
    return g_st_softtimers_vec[et_softtimer].et_elapsed_state;
 8004eae:	79fa      	ldrb	r2, [r7, #7]
 8004eb0:	4905      	ldr	r1, [pc, #20]	; (8004ec8 <SoftTimer__Get_ElapsedState+0x2c>)
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3319      	adds	r3, #25
 8004ebe:	781b      	ldrb	r3, [r3, #0]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	200005b0 	.word	0x200005b0

08004ecc <HAL_IncTick>:
#else

    static void SoftTimer_ISR__TimerInterrupt(void)

#endif
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
                Time__Add_msec(&g_st_time_counter);
            }

        #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

            uwTick += HAL_TICK_FREQ_DEFAULT;
 8004ed0:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_IncTick+0x18>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	4a03      	ldr	r2, [pc, #12]	; (8004ee4 <HAL_IncTick+0x18>)
 8004ed8:	6013      	str	r3, [r2, #0]
            Time__Add_msec(&g_st_time_counter);
 8004eda:	4803      	ldr	r0, [pc, #12]	; (8004ee8 <HAL_IncTick+0x1c>)
 8004edc:	f000 f84a 	bl	8004f74 <Time__Add_msec>
            Time__Add_msec(&g_st_time_counter);

        #endif

    #endif
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000488 	.word	0x20000488
 8004ee8:	200005e8 	.word	0x200005e8

08004eec <SoftTimer_PRIV__CheckTimer>:

static et_RET SoftTimer_PRIV__CheckTimer(et_SOFTTIMER_INSTANCE et_softtimer)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
    et_TIME_COMPARE et_compare = TIME_COMPARE_EQUAL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
    
    if (SOFTTIMER_RUNNING_STATE_RUNNING ==\
            g_st_softtimers_vec[et_softtimer].et_running_state)
 8004efa:	79fa      	ldrb	r2, [r7, #7]
 8004efc:	491b      	ldr	r1, [pc, #108]	; (8004f6c <SoftTimer_PRIV__CheckTimer+0x80>)
 8004efe:	4613      	mov	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	3318      	adds	r3, #24
 8004f0a:	781b      	ldrb	r3, [r3, #0]
    if (SOFTTIMER_RUNNING_STATE_RUNNING ==\
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d128      	bne.n	8004f62 <SoftTimer_PRIV__CheckTimer+0x76>
    {
        /* Compare stop time with the current time. */
        et_compare = Time__Compare(g_st_time_counter,\
 8004f10:	79fa      	ldrb	r2, [r7, #7]
 8004f12:	4916      	ldr	r1, [pc, #88]	; (8004f6c <SoftTimer_PRIV__CheckTimer+0x80>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3310      	adds	r3, #16
 8004f20:	4913      	ldr	r1, [pc, #76]	; (8004f70 <SoftTimer_PRIV__CheckTimer+0x84>)
 8004f22:	cb0c      	ldmia	r3, {r2, r3}
 8004f24:	c903      	ldmia	r1, {r0, r1}
 8004f26:	f000 f880 	bl	800502a <Time__Compare>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]
                                   g_st_softtimers_vec[et_softtimer].st_stop_time);
    
        /* Check if current time as passed the stop time. */
        if ((et_compare == TIME_COMPARE_EQUAL) ||\
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <SoftTimer_PRIV__CheckTimer+0x4e>
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d113      	bne.n	8004f62 <SoftTimer_PRIV__CheckTimer+0x76>
            (et_compare == TIME_COMPARE_BIGGER))
        {
            /* Set elapsed state to elapsed. */
            g_st_softtimers_vec[et_softtimer].et_elapsed_state =\
 8004f3a:	79fa      	ldrb	r2, [r7, #7]
 8004f3c:	490b      	ldr	r1, [pc, #44]	; (8004f6c <SoftTimer_PRIV__CheckTimer+0x80>)
 8004f3e:	4613      	mov	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3319      	adds	r3, #25
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
                    SOFTTIMER_ELAPSED_STATE_ELAPSED;
            /* Set running state to stopped. */
            g_st_softtimers_vec[et_softtimer].et_running_state =\
 8004f4e:	79fa      	ldrb	r2, [r7, #7]
 8004f50:	4906      	ldr	r1, [pc, #24]	; (8004f6c <SoftTimer_PRIV__CheckTimer+0x80>)
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3318      	adds	r3, #24
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
                    SOFTTIMER_RUNNING_STATE_STOPPED;
        }
    }
    
    return RET_OK;
 8004f62:	231b      	movs	r3, #27
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	200005b0 	.word	0x200005b0
 8004f70:	200005e8 	.word	0x200005e8

08004f74 <Time__Add_msec>:
    }
    
#endif

void Time__Add_msec(st_TIME *const st_time_ptr)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
    Time__AddN_msec(st_time_ptr, 1);
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f804 	bl	8004f8c <Time__AddN_msec>
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <Time__AddN_msec>:
    
#endif

void Time__AddN_msec(st_TIME *const st_time_ptr,\
                     t_time_msec    n_msec)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
    /* Check if the sum is smaller than the limit. */
    if ((st_time_ptr->msec + n_msec) < TIME_MSEC_TO_SEC)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	887b      	ldrh	r3, [r7, #2]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fa6:	da07      	bge.n	8004fb8 <Time__AddN_msec+0x2c>
    {
        /* Add the milliseconds. */
        st_time_ptr->msec += n_msec;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	887b      	ldrh	r3, [r7, #2]
 8004fae:	4413      	add	r3, r2
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	801a      	strh	r2, [r3, #0]
        Time__AddN_sec(st_time_ptr, ((st_time_ptr->msec + n_msec) / TIME_MSEC_TO_SEC));
        
        /* Set the rest of milliseconds. */
        st_time_ptr->msec = ((st_time_ptr->msec + n_msec) % TIME_MSEC_TO_SEC);
    }
}
 8004fb6:	e021      	b.n	8004ffc <Time__AddN_msec+0x70>
        Time__AddN_sec(st_time_ptr, ((st_time_ptr->msec + n_msec) / TIME_MSEC_TO_SEC));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	887b      	ldrh	r3, [r7, #2]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	4a10      	ldr	r2, [pc, #64]	; (8005004 <Time__AddN_msec+0x78>)
 8004fc4:	fb82 1203 	smull	r1, r2, r2, r3
 8004fc8:	1192      	asrs	r2, r2, #6
 8004fca:	17db      	asrs	r3, r3, #31
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f819 	bl	8005008 <Time__AddN_sec>
        st_time_ptr->msec = ((st_time_ptr->msec + n_msec) % TIME_MSEC_TO_SEC);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	887b      	ldrh	r3, [r7, #2]
 8004fde:	4413      	add	r3, r2
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <Time__AddN_msec+0x78>)
 8004fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8004fe6:	1191      	asrs	r1, r2, #6
 8004fe8:	17da      	asrs	r2, r3, #31
 8004fea:	1a8a      	subs	r2, r1, r2
 8004fec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ff0:	fb01 f202 	mul.w	r2, r1, r2
 8004ff4:	1a9a      	subs	r2, r3, r2
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	801a      	strh	r2, [r3, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	10624dd3 	.word	0x10624dd3

08005008 <Time__AddN_sec>:

void Time__AddN_sec(st_TIME *const st_time_ptr,\
                    t_time_sec     n_sec)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
        }
        
    #else

        /* Add the seconds. */
        st_time_ptr->sec += n_sec;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]
        
    #endif
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <Time__Compare>:
    
#endif

et_TIME_COMPARE Time__Compare(st_TIME st_time_1,\
                              st_TIME st_time_2)
{
 800502a:	b490      	push	{r4, r7}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	f107 0408 	add.w	r4, r7, #8
 8005034:	e884 0003 	stmia.w	r4, {r0, r1}
 8005038:	4639      	mov	r1, r7
 800503a:	e881 000c 	stmia.w	r1, {r2, r3}
        }
    
    #endif

    /* ****** Seconds ****** */
    if (st_time_1.sec > st_time_2.sec)
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	429a      	cmp	r2, r3
 8005044:	d901      	bls.n	800504a <Time__Compare+0x20>
    {
        return TIME_COMPARE_BIGGER;
 8005046:	2301      	movs	r3, #1
 8005048:	e012      	b.n	8005070 <Time__Compare+0x46>
    }
    if (st_time_1.sec < st_time_2.sec)
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d201      	bcs.n	8005056 <Time__Compare+0x2c>
    {
        return TIME_COMPARE_SMALLER;
 8005052:	2302      	movs	r3, #2
 8005054:	e00c      	b.n	8005070 <Time__Compare+0x46>
    }
    
    /* ****** Milliseconds ****** */
    if (st_time_1.msec > st_time_2.msec)
 8005056:	893a      	ldrh	r2, [r7, #8]
 8005058:	883b      	ldrh	r3, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d901      	bls.n	8005062 <Time__Compare+0x38>
    {
        return TIME_COMPARE_BIGGER;
 800505e:	2301      	movs	r3, #1
 8005060:	e006      	b.n	8005070 <Time__Compare+0x46>
    }
    if (st_time_1.msec < st_time_2.msec)
 8005062:	893a      	ldrh	r2, [r7, #8]
 8005064:	883b      	ldrh	r3, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d201      	bcs.n	800506e <Time__Compare+0x44>
    {
        return TIME_COMPARE_SMALLER;
 800506a:	2302      	movs	r3, #2
 800506c:	e000      	b.n	8005070 <Time__Compare+0x46>
            return TIME_COMPARE_SMALLER;
        }
    
    #endif
        
    return TIME_COMPARE_EQUAL;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bc90      	pop	{r4, r7}
 8005078:	4770      	bx	lr
	...

0800507c <Time__Add_Times>:
    
    return st_remain_time;
}

st_TIME Time__Add_Times(st_TIME time_1, st_TIME time_2)
{
 800507c:	b082      	sub	sp, #8
 800507e:	b480      	push	{r7}
 8005080:	b089      	sub	sp, #36	; 0x24
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	1d38      	adds	r0, r7, #4
 8005088:	e880 0006 	stmia.w	r0, {r1, r2}
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
    st_TIME     total_time  = {};
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
    uint32_t    add_aux     = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
    uint8_t     carry       = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	76fb      	strb	r3, [r7, #27]
        carry           = (uint8_t)(add_aux / TIME_USEC_TO_MSEC);
    
    #endif

    /* ********** Milliseconds ********** */
    add_aux = (time_1.msec + time_2.msec + carry);
 80050a0:	88bb      	ldrh	r3, [r7, #4]
 80050a2:	461a      	mov	r2, r3
 80050a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050a6:	441a      	add	r2, r3
 80050a8:	7efb      	ldrb	r3, [r7, #27]
 80050aa:	4413      	add	r3, r2
 80050ac:	61fb      	str	r3, [r7, #28]
        
    total_time.msec = (add_aux % TIME_MSEC_TO_SEC);
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <Time__Add_Times+0x84>)
 80050b2:	fba3 1302 	umull	r1, r3, r3, r2
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	823b      	strh	r3, [r7, #16]
    carry           = (uint8_t)(add_aux / TIME_MSEC_TO_SEC);
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4a0d      	ldr	r2, [pc, #52]	; (8005100 <Time__Add_Times+0x84>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	76fb      	strb	r3, [r7, #27]
    
    /* ********** Seconds ********** */
    add_aux = (time_1.sec + time_2.sec + carry);
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	441a      	add	r2, r3
 80050d8:	7efb      	ldrb	r3, [r7, #27]
 80050da:	4413      	add	r3, r2
 80050dc:	61fb      	str	r3, [r7, #28]
        total_time.sec = (add_aux % TIME_SEC_TO_HOUR);
        carry          = (uint8_t)(add_aux / TIME_SEC_TO_HOUR);
        
    #else

        total_time.sec = add_aux;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	617b      	str	r3, [r7, #20]

        total_time.hr = (time_1.hr + time_2.hr + carry);
        
    #endif
    
    return total_time;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	461a      	mov	r2, r3
 80050e6:	f107 0310 	add.w	r3, r7, #16
 80050ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	3724      	adds	r7, #36	; 0x24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	b002      	add	sp, #8
 80050fe:	4770      	bx	lr
 8005100:	10624dd3 	.word	0x10624dd3

08005104 <MODBUS__Initialize>:

/* ************************************************************************************ */
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
et_RET MODBUS__Initialize(et_MODBUS et_dev)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
    et_RET et_ret = RET_UNEXPECTED;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]

    /* Entering debug message. */
    CENTI_DEBUG__Info("MODBUS initialization started!");
 8005112:	4976      	ldr	r1, [pc, #472]	; (80052ec <MODBUS__Initialize+0x1e8>)
 8005114:	4876      	ldr	r0, [pc, #472]	; (80052f0 <MODBUS__Initialize+0x1ec>)
 8005116:	f000 ffc9 	bl	80060ac <iprintf>
    /* Priority tasks. */
    CENTI_CHECK_PTR(ST_CONF[et_dev].uart__Initialize);
 800511a:	79fa      	ldrb	r2, [r7, #7]
 800511c:	4975      	ldr	r1, [pc, #468]	; (80052f4 <MODBUS__Initialize+0x1f0>)
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10c      	bne.n	8005148 <MODBUS__Initialize+0x44>
 800512e:	4b72      	ldr	r3, [pc, #456]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	4b71      	ldr	r3, [pc, #452]	; (80052fc <MODBUS__Initialize+0x1f8>)
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	238c      	movs	r3, #140	; 0x8c
 800513a:	4a71      	ldr	r2, [pc, #452]	; (8005300 <MODBUS__Initialize+0x1fc>)
 800513c:	4971      	ldr	r1, [pc, #452]	; (8005304 <MODBUS__Initialize+0x200>)
 800513e:	4872      	ldr	r0, [pc, #456]	; (8005308 <MODBUS__Initialize+0x204>)
 8005140:	f000 ffb4 	bl	80060ac <iprintf>
 8005144:	230a      	movs	r3, #10
 8005146:	e0cc      	b.n	80052e2 <MODBUS__Initialize+0x1de>
    CENTI_CHECK_PTR(ST_CONF[et_dev].uart__Write);
 8005148:	79fa      	ldrb	r2, [r7, #7]
 800514a:	496a      	ldr	r1, [pc, #424]	; (80052f4 <MODBUS__Initialize+0x1f0>)
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	3304      	adds	r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10c      	bne.n	8005178 <MODBUS__Initialize+0x74>
 800515e:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	4b65      	ldr	r3, [pc, #404]	; (80052fc <MODBUS__Initialize+0x1f8>)
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	238d      	movs	r3, #141	; 0x8d
 800516a:	4a65      	ldr	r2, [pc, #404]	; (8005300 <MODBUS__Initialize+0x1fc>)
 800516c:	4965      	ldr	r1, [pc, #404]	; (8005304 <MODBUS__Initialize+0x200>)
 800516e:	4866      	ldr	r0, [pc, #408]	; (8005308 <MODBUS__Initialize+0x204>)
 8005170:	f000 ff9c 	bl	80060ac <iprintf>
 8005174:	230a      	movs	r3, #10
 8005176:	e0b4      	b.n	80052e2 <MODBUS__Initialize+0x1de>
    CENTI_CHECK_PTR(ST_CONF[et_dev].uart__Read);
 8005178:	79fa      	ldrb	r2, [r7, #7]
 800517a:	495e      	ldr	r1, [pc, #376]	; (80052f4 <MODBUS__Initialize+0x1f0>)
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	3308      	adds	r3, #8
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10c      	bne.n	80051a8 <MODBUS__Initialize+0xa4>
 800518e:	4b5a      	ldr	r3, [pc, #360]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	4b59      	ldr	r3, [pc, #356]	; (80052fc <MODBUS__Initialize+0x1f8>)
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	238e      	movs	r3, #142	; 0x8e
 800519a:	4a59      	ldr	r2, [pc, #356]	; (8005300 <MODBUS__Initialize+0x1fc>)
 800519c:	4959      	ldr	r1, [pc, #356]	; (8005304 <MODBUS__Initialize+0x200>)
 800519e:	485a      	ldr	r0, [pc, #360]	; (8005308 <MODBUS__Initialize+0x204>)
 80051a0:	f000 ff84 	bl	80060ac <iprintf>
 80051a4:	230a      	movs	r3, #10
 80051a6:	e09c      	b.n	80052e2 <MODBUS__Initialize+0x1de>
    CENTI_CHECK_PTR(ST_CONF[et_dev].uart__GetRemain);
 80051a8:	79fa      	ldrb	r2, [r7, #7]
 80051aa:	4952      	ldr	r1, [pc, #328]	; (80052f4 <MODBUS__Initialize+0x1f0>)
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	330c      	adds	r3, #12
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10c      	bne.n	80051d8 <MODBUS__Initialize+0xd4>
 80051be:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	4b4d      	ldr	r3, [pc, #308]	; (80052fc <MODBUS__Initialize+0x1f8>)
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	238f      	movs	r3, #143	; 0x8f
 80051ca:	4a4d      	ldr	r2, [pc, #308]	; (8005300 <MODBUS__Initialize+0x1fc>)
 80051cc:	494d      	ldr	r1, [pc, #308]	; (8005304 <MODBUS__Initialize+0x200>)
 80051ce:	484e      	ldr	r0, [pc, #312]	; (8005308 <MODBUS__Initialize+0x204>)
 80051d0:	f000 ff6c 	bl	80060ac <iprintf>
 80051d4:	230a      	movs	r3, #10
 80051d6:	e084      	b.n	80052e2 <MODBUS__Initialize+0x1de>
    CENTI_CHECK_PTR(ST_CONF[et_dev].gpio__Setlevel);
 80051d8:	79fa      	ldrb	r2, [r7, #7]
 80051da:	4946      	ldr	r1, [pc, #280]	; (80052f4 <MODBUS__Initialize+0x1f0>)
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	3314      	adds	r3, #20
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <MODBUS__Initialize+0x104>
 80051ee:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	4b41      	ldr	r3, [pc, #260]	; (80052fc <MODBUS__Initialize+0x1f8>)
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2390      	movs	r3, #144	; 0x90
 80051fa:	4a41      	ldr	r2, [pc, #260]	; (8005300 <MODBUS__Initialize+0x1fc>)
 80051fc:	4941      	ldr	r1, [pc, #260]	; (8005304 <MODBUS__Initialize+0x200>)
 80051fe:	4842      	ldr	r0, [pc, #264]	; (8005308 <MODBUS__Initialize+0x204>)
 8005200:	f000 ff54 	bl	80060ac <iprintf>
 8005204:	230a      	movs	r3, #10
 8005206:	e06c      	b.n	80052e2 <MODBUS__Initialize+0x1de>
    CENTI_CHECK_PTR(ST_CONF[et_dev].delay__ms);
 8005208:	4b40      	ldr	r3, [pc, #256]	; (800530c <MODBUS__Initialize+0x208>)
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10c      	bne.n	8005228 <MODBUS__Initialize+0x124>
 800520e:	4b3a      	ldr	r3, [pc, #232]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	4b39      	ldr	r3, [pc, #228]	; (80052fc <MODBUS__Initialize+0x1f8>)
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	2391      	movs	r3, #145	; 0x91
 800521a:	4a39      	ldr	r2, [pc, #228]	; (8005300 <MODBUS__Initialize+0x1fc>)
 800521c:	4939      	ldr	r1, [pc, #228]	; (8005304 <MODBUS__Initialize+0x200>)
 800521e:	483a      	ldr	r0, [pc, #232]	; (8005308 <MODBUS__Initialize+0x204>)
 8005220:	f000 ff44 	bl	80060ac <iprintf>
 8005224:	230a      	movs	r3, #10
 8005226:	e05c      	b.n	80052e2 <MODBUS__Initialize+0x1de>
    et_ret = ST_CONF[et_dev].uart__Initialize();
 8005228:	79fa      	ldrb	r2, [r7, #7]
 800522a:	4932      	ldr	r1, [pc, #200]	; (80052f4 <MODBUS__Initialize+0x1f0>)
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4798      	blx	r3
 800523a:	4603      	mov	r3, r0
 800523c:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_RET(et_ret);
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b1a      	cmp	r3, #26
 8005242:	d80e      	bhi.n	8005262 <MODBUS__Initialize+0x15e>
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 8005248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	4b2b      	ldr	r3, [pc, #172]	; (80052fc <MODBUS__Initialize+0x1f8>)
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	2393      	movs	r3, #147	; 0x93
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <MODBUS__Initialize+0x1fc>)
 8005256:	492b      	ldr	r1, [pc, #172]	; (8005304 <MODBUS__Initialize+0x200>)
 8005258:	482b      	ldr	r0, [pc, #172]	; (8005308 <MODBUS__Initialize+0x204>)
 800525a:	f000 ff27 	bl	80060ac <iprintf>
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	e03f      	b.n	80052e2 <MODBUS__Initialize+0x1de>
    ST_CONF[et_dev].gpio__Setlevel(MODBUS_MODE_READ);
 8005262:	79fa      	ldrb	r2, [r7, #7]
 8005264:	4923      	ldr	r1, [pc, #140]	; (80052f4 <MODBUS__Initialize+0x1f0>)
 8005266:	4613      	mov	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3314      	adds	r3, #20
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2000      	movs	r0, #0
 8005276:	4798      	blx	r3

    et_ret = MODBUS__ARRAYLIST_Function_Codes_Init ();
 8005278:	f000 f84e 	bl	8005318 <MODBUS__ARRAYLIST_Function_Codes_Init>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_RET(et_ret);
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b1a      	cmp	r3, #26
 8005284:	d80e      	bhi.n	80052a4 <MODBUS__Initialize+0x1a0>
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <MODBUS__Initialize+0x1f8>)
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2397      	movs	r3, #151	; 0x97
 8005296:	4a1a      	ldr	r2, [pc, #104]	; (8005300 <MODBUS__Initialize+0x1fc>)
 8005298:	491a      	ldr	r1, [pc, #104]	; (8005304 <MODBUS__Initialize+0x200>)
 800529a:	481b      	ldr	r0, [pc, #108]	; (8005308 <MODBUS__Initialize+0x204>)
 800529c:	f000 ff06 	bl	80060ac <iprintf>
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	e01e      	b.n	80052e2 <MODBUS__Initialize+0x1de>

	et_ret = MODBUS__ARRAYLIST_Registers_Init ();
 80052a4:	f000 f946 	bl	8005534 <MODBUS__ARRAYLIST_Registers_Init>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
	CENTI_CHECK_RET(et_ret);
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b1a      	cmp	r3, #26
 80052b0:	d80e      	bhi.n	80052d0 <MODBUS__Initialize+0x1cc>
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	4a10      	ldr	r2, [pc, #64]	; (80052f8 <MODBUS__Initialize+0x1f4>)
 80052b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <MODBUS__Initialize+0x1f8>)
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	239a      	movs	r3, #154	; 0x9a
 80052c2:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <MODBUS__Initialize+0x1fc>)
 80052c4:	490f      	ldr	r1, [pc, #60]	; (8005304 <MODBUS__Initialize+0x200>)
 80052c6:	4810      	ldr	r0, [pc, #64]	; (8005308 <MODBUS__Initialize+0x204>)
 80052c8:	f000 fef0 	bl	80060ac <iprintf>
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	e008      	b.n	80052e2 <MODBUS__Initialize+0x1de>

    /* Indicate that initialization was successfully complete. */
    g_initialized[et_dev] = true;
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	4a0f      	ldr	r2, [pc, #60]	; (8005310 <MODBUS__Initialize+0x20c>)
 80052d4:	2101      	movs	r1, #1
 80052d6:	54d1      	strb	r1, [r2, r3]
    /* Exiting debug message. */
    CENTI_DEBUG__Info("MODBUS initialization complete!");
 80052d8:	4904      	ldr	r1, [pc, #16]	; (80052ec <MODBUS__Initialize+0x1e8>)
 80052da:	480e      	ldr	r0, [pc, #56]	; (8005314 <MODBUS__Initialize+0x210>)
 80052dc:	f000 fee6 	bl	80060ac <iprintf>
    return RET_OK;
 80052e0:	231b      	movs	r3, #27
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	080075f8 	.word	0x080075f8
 80052f0:	08007600 	.word	0x08007600
 80052f4:	08007c90 	.word	0x08007c90
 80052f8:	200001c0 	.word	0x200001c0
 80052fc:	08007cac 	.word	0x08007cac
 8005300:	08007624 	.word	0x08007624
 8005304:	08007648 	.word	0x08007648
 8005308:	08007650 	.word	0x08007650
 800530c:	08004b95 	.word	0x08004b95
 8005310:	200005f4 	.word	0x200005f4
 8005314:	08007664 	.word	0x08007664

08005318 <MODBUS__ARRAYLIST_Function_Codes_Init>:

#if (defined(__MODBUS_AS_SLAVE__))

static et_RET MODBUS__ARRAYLIST_Function_Codes_Init (void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af02      	add	r7, sp, #8
	et_RET et_ret = RET_UNEXPECTED;
 800531e:	2300      	movs	r3, #0
 8005320:	71fb      	strb	r3, [r7, #7]
	uint8_t aux_function_code = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	71bb      	strb	r3, [r7, #6]

	et_ret = ArrayList__Initialize(LIST_FUNCTION_CODES, vec_function_codes, FUNCTION_CODES_SIZE, sizeof(vec_function_codes[0]), MODBUS__function_code_Cmp);
 8005326:	4b7c      	ldr	r3, [pc, #496]	; (8005518 <MODBUS__ARRAYLIST_Function_Codes_Init+0x200>)
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	2301      	movs	r3, #1
 800532c:	220f      	movs	r2, #15
 800532e:	497b      	ldr	r1, [pc, #492]	; (800551c <MODBUS__ARRAYLIST_Function_Codes_Init+0x204>)
 8005330:	2001      	movs	r0, #1
 8005332:	f7ff f9f1 	bl	8004718 <ArrayList__Initialize>
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	2b1a      	cmp	r3, #26
 800533e:	d80e      	bhi.n	800535e <MODBUS__ARRAYLIST_Function_Codes_Init+0x46>
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	4a77      	ldr	r2, [pc, #476]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	4b76      	ldr	r3, [pc, #472]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	23ab      	movs	r3, #171	; 0xab
 8005350:	4a75      	ldr	r2, [pc, #468]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 8005352:	4976      	ldr	r1, [pc, #472]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 8005354:	4876      	ldr	r0, [pc, #472]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 8005356:	f000 fea9 	bl	80060ac <iprintf>
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	e0d8      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>
	aux_function_code = READ_COIL;
 800535e:	2301      	movs	r3, #1
 8005360:	71bb      	strb	r3, [r7, #6]
	et_ret =  ArrayList__Add(LIST_FUNCTION_CODES, &aux_function_code);
 8005362:	1dbb      	adds	r3, r7, #6
 8005364:	4619      	mov	r1, r3
 8005366:	2001      	movs	r0, #1
 8005368:	f7ff faf8 	bl	800495c <ArrayList__Add>
 800536c:	4603      	mov	r3, r0
 800536e:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	2b1a      	cmp	r3, #26
 8005374:	d80e      	bhi.n	8005394 <MODBUS__ARRAYLIST_Function_Codes_Init+0x7c>
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	4a69      	ldr	r2, [pc, #420]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	4b68      	ldr	r3, [pc, #416]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	23ae      	movs	r3, #174	; 0xae
 8005386:	4a68      	ldr	r2, [pc, #416]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 8005388:	4968      	ldr	r1, [pc, #416]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 800538a:	4869      	ldr	r0, [pc, #420]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 800538c:	f000 fe8e 	bl	80060ac <iprintf>
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	e0bd      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>
	aux_function_code = READ_DISCRETE_INPUT;
 8005394:	2302      	movs	r3, #2
 8005396:	71bb      	strb	r3, [r7, #6]
	et_ret =  ArrayList__Add(LIST_FUNCTION_CODES, &aux_function_code);
 8005398:	1dbb      	adds	r3, r7, #6
 800539a:	4619      	mov	r1, r3
 800539c:	2001      	movs	r0, #1
 800539e:	f7ff fadd 	bl	800495c <ArrayList__Add>
 80053a2:	4603      	mov	r3, r0
 80053a4:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	2b1a      	cmp	r3, #26
 80053aa:	d80e      	bhi.n	80053ca <MODBUS__ARRAYLIST_Function_Codes_Init+0xb2>
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	4a5c      	ldr	r2, [pc, #368]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 80053b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	4b5b      	ldr	r3, [pc, #364]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	23b1      	movs	r3, #177	; 0xb1
 80053bc:	4a5a      	ldr	r2, [pc, #360]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 80053be:	495b      	ldr	r1, [pc, #364]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 80053c0:	485b      	ldr	r0, [pc, #364]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 80053c2:	f000 fe73 	bl	80060ac <iprintf>
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	e0a2      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>
	aux_function_code = READ_MULTIPLE_HOLDING_REGS;
 80053ca:	2303      	movs	r3, #3
 80053cc:	71bb      	strb	r3, [r7, #6]
	et_ret =  ArrayList__Add(LIST_FUNCTION_CODES, &aux_function_code);
 80053ce:	1dbb      	adds	r3, r7, #6
 80053d0:	4619      	mov	r1, r3
 80053d2:	2001      	movs	r0, #1
 80053d4:	f7ff fac2 	bl	800495c <ArrayList__Add>
 80053d8:	4603      	mov	r3, r0
 80053da:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	2b1a      	cmp	r3, #26
 80053e0:	d80e      	bhi.n	8005400 <MODBUS__ARRAYLIST_Function_Codes_Init+0xe8>
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	4a4e      	ldr	r2, [pc, #312]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 80053e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	4b4d      	ldr	r3, [pc, #308]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	23b4      	movs	r3, #180	; 0xb4
 80053f2:	4a4d      	ldr	r2, [pc, #308]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 80053f4:	494d      	ldr	r1, [pc, #308]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 80053f6:	484e      	ldr	r0, [pc, #312]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 80053f8:	f000 fe58 	bl	80060ac <iprintf>
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	e087      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>
	aux_function_code = READ_INPUT;
 8005400:	2304      	movs	r3, #4
 8005402:	71bb      	strb	r3, [r7, #6]
	et_ret =  ArrayList__Add(LIST_FUNCTION_CODES, &aux_function_code);
 8005404:	1dbb      	adds	r3, r7, #6
 8005406:	4619      	mov	r1, r3
 8005408:	2001      	movs	r0, #1
 800540a:	f7ff faa7 	bl	800495c <ArrayList__Add>
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	2b1a      	cmp	r3, #26
 8005416:	d80e      	bhi.n	8005436 <MODBUS__ARRAYLIST_Function_Codes_Init+0x11e>
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	4a41      	ldr	r2, [pc, #260]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 800541c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	4b40      	ldr	r3, [pc, #256]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	23b7      	movs	r3, #183	; 0xb7
 8005428:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 800542a:	4940      	ldr	r1, [pc, #256]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 800542c:	4840      	ldr	r0, [pc, #256]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 800542e:	f000 fe3d 	bl	80060ac <iprintf>
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	e06c      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>
	aux_function_code = WRITE_SINGLE_COIL;
 8005436:	2305      	movs	r3, #5
 8005438:	71bb      	strb	r3, [r7, #6]
	et_ret =  ArrayList__Add(LIST_FUNCTION_CODES, &aux_function_code);
 800543a:	1dbb      	adds	r3, r7, #6
 800543c:	4619      	mov	r1, r3
 800543e:	2001      	movs	r0, #1
 8005440:	f7ff fa8c 	bl	800495c <ArrayList__Add>
 8005444:	4603      	mov	r3, r0
 8005446:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	2b1a      	cmp	r3, #26
 800544c:	d80e      	bhi.n	800546c <MODBUS__ARRAYLIST_Function_Codes_Init+0x154>
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	4a33      	ldr	r2, [pc, #204]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 8005452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	4b32      	ldr	r3, [pc, #200]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	23ba      	movs	r3, #186	; 0xba
 800545e:	4a32      	ldr	r2, [pc, #200]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 8005460:	4932      	ldr	r1, [pc, #200]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 8005462:	4833      	ldr	r0, [pc, #204]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 8005464:	f000 fe22 	bl	80060ac <iprintf>
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	e051      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>
	aux_function_code = WRITE_SINGLE_REG;
 800546c:	2306      	movs	r3, #6
 800546e:	71bb      	strb	r3, [r7, #6]
	et_ret =  ArrayList__Add(LIST_FUNCTION_CODES, &aux_function_code);
 8005470:	1dbb      	adds	r3, r7, #6
 8005472:	4619      	mov	r1, r3
 8005474:	2001      	movs	r0, #1
 8005476:	f7ff fa71 	bl	800495c <ArrayList__Add>
 800547a:	4603      	mov	r3, r0
 800547c:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	2b1a      	cmp	r3, #26
 8005482:	d80e      	bhi.n	80054a2 <MODBUS__ARRAYLIST_Function_Codes_Init+0x18a>
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	4a26      	ldr	r2, [pc, #152]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 8005488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	4b25      	ldr	r3, [pc, #148]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	23bd      	movs	r3, #189	; 0xbd
 8005494:	4a24      	ldr	r2, [pc, #144]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 8005496:	4925      	ldr	r1, [pc, #148]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 8005498:	4825      	ldr	r0, [pc, #148]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 800549a:	f000 fe07 	bl	80060ac <iprintf>
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	e036      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>
	aux_function_code = WRITE_MULTIPLE_COILS;
 80054a2:	230f      	movs	r3, #15
 80054a4:	71bb      	strb	r3, [r7, #6]
	et_ret =  ArrayList__Add(LIST_FUNCTION_CODES, &aux_function_code);
 80054a6:	1dbb      	adds	r3, r7, #6
 80054a8:	4619      	mov	r1, r3
 80054aa:	2001      	movs	r0, #1
 80054ac:	f7ff fa56 	bl	800495c <ArrayList__Add>
 80054b0:	4603      	mov	r3, r0
 80054b2:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	2b1a      	cmp	r3, #26
 80054b8:	d80e      	bhi.n	80054d8 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1c0>
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	4a18      	ldr	r2, [pc, #96]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 80054be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	23c0      	movs	r3, #192	; 0xc0
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 80054cc:	4917      	ldr	r1, [pc, #92]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 80054ce:	4818      	ldr	r0, [pc, #96]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 80054d0:	f000 fdec 	bl	80060ac <iprintf>
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	e01b      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>
	aux_function_code = WRITE_MULTIPLE_HOLDING_REG;
 80054d8:	2310      	movs	r3, #16
 80054da:	71bb      	strb	r3, [r7, #6]
	et_ret =  ArrayList__Add(LIST_FUNCTION_CODES, &aux_function_code);
 80054dc:	1dbb      	adds	r3, r7, #6
 80054de:	4619      	mov	r1, r3
 80054e0:	2001      	movs	r0, #1
 80054e2:	f7ff fa3b 	bl	800495c <ArrayList__Add>
 80054e6:	4603      	mov	r3, r0
 80054e8:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	2b1a      	cmp	r3, #26
 80054ee:	d80e      	bhi.n	800550e <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f6>
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	4a0b      	ldr	r2, [pc, #44]	; (8005520 <MODBUS__ARRAYLIST_Function_Codes_Init+0x208>)
 80054f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <MODBUS__ARRAYLIST_Function_Codes_Init+0x20c>)
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	23c3      	movs	r3, #195	; 0xc3
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <MODBUS__ARRAYLIST_Function_Codes_Init+0x210>)
 8005502:	490a      	ldr	r1, [pc, #40]	; (800552c <MODBUS__ARRAYLIST_Function_Codes_Init+0x214>)
 8005504:	480a      	ldr	r0, [pc, #40]	; (8005530 <MODBUS__ARRAYLIST_Function_Codes_Init+0x218>)
 8005506:	f000 fdd1 	bl	80060ac <iprintf>
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	e000      	b.n	8005510 <MODBUS__ARRAYLIST_Function_Codes_Init+0x1f8>

	return RET_OK;
 800550e:	231b      	movs	r3, #27
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	08005919 	.word	0x08005919
 800551c:	200005f8 	.word	0x200005f8
 8005520:	200001c0 	.word	0x200001c0
 8005524:	08007cc0 	.word	0x08007cc0
 8005528:	08007624 	.word	0x08007624
 800552c:	08007648 	.word	0x08007648
 8005530:	08007650 	.word	0x08007650

08005534 <MODBUS__ARRAYLIST_Registers_Init>:

static et_RET MODBUS__ARRAYLIST_Registers_Init (void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af02      	add	r7, sp, #8
	et_RET et_ret = RET_UNEXPECTED;
 800553a:	2300      	movs	r3, #0
 800553c:	71fb      	strb	r3, [r7, #7]
	uint16_t aux_register = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	80bb      	strh	r3, [r7, #4]

	et_ret = ArrayList__Initialize(LIST_REGISTERS, vec_registers, REGISTERS_SIZE, sizeof(vec_registers[0]), MODBUS__register_Cmp);
 8005542:	4b48      	ldr	r3, [pc, #288]	; (8005664 <MODBUS__ARRAYLIST_Registers_Init+0x130>)
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2302      	movs	r3, #2
 8005548:	2214      	movs	r2, #20
 800554a:	4947      	ldr	r1, [pc, #284]	; (8005668 <MODBUS__ARRAYLIST_Registers_Init+0x134>)
 800554c:	2002      	movs	r0, #2
 800554e:	f7ff f8e3 	bl	8004718 <ArrayList__Initialize>
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	2b1a      	cmp	r3, #26
 800555a:	d80e      	bhi.n	800557a <MODBUS__ARRAYLIST_Registers_Init+0x46>
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	4a43      	ldr	r2, [pc, #268]	; (800566c <MODBUS__ARRAYLIST_Registers_Init+0x138>)
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	4b42      	ldr	r3, [pc, #264]	; (8005670 <MODBUS__ARRAYLIST_Registers_Init+0x13c>)
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	23ce      	movs	r3, #206	; 0xce
 800556c:	4a41      	ldr	r2, [pc, #260]	; (8005674 <MODBUS__ARRAYLIST_Registers_Init+0x140>)
 800556e:	4942      	ldr	r1, [pc, #264]	; (8005678 <MODBUS__ARRAYLIST_Registers_Init+0x144>)
 8005570:	4842      	ldr	r0, [pc, #264]	; (800567c <MODBUS__ARRAYLIST_Registers_Init+0x148>)
 8005572:	f000 fd9b 	bl	80060ac <iprintf>
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	e070      	b.n	800565c <MODBUS__ARRAYLIST_Registers_Init+0x128>
	aux_register = MODBUS_REG_0101;
 800557a:	f240 1301 	movw	r3, #257	; 0x101
 800557e:	80bb      	strh	r3, [r7, #4]
	et_ret =  ArrayList__Add(LIST_REGISTERS, &aux_register);
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	4619      	mov	r1, r3
 8005584:	2002      	movs	r0, #2
 8005586:	f7ff f9e9 	bl	800495c <ArrayList__Add>
 800558a:	4603      	mov	r3, r0
 800558c:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	2b1a      	cmp	r3, #26
 8005592:	d80e      	bhi.n	80055b2 <MODBUS__ARRAYLIST_Registers_Init+0x7e>
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	4a35      	ldr	r2, [pc, #212]	; (800566c <MODBUS__ARRAYLIST_Registers_Init+0x138>)
 8005598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	4b34      	ldr	r3, [pc, #208]	; (8005670 <MODBUS__ARRAYLIST_Registers_Init+0x13c>)
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	23d1      	movs	r3, #209	; 0xd1
 80055a4:	4a33      	ldr	r2, [pc, #204]	; (8005674 <MODBUS__ARRAYLIST_Registers_Init+0x140>)
 80055a6:	4934      	ldr	r1, [pc, #208]	; (8005678 <MODBUS__ARRAYLIST_Registers_Init+0x144>)
 80055a8:	4834      	ldr	r0, [pc, #208]	; (800567c <MODBUS__ARRAYLIST_Registers_Init+0x148>)
 80055aa:	f000 fd7f 	bl	80060ac <iprintf>
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	e054      	b.n	800565c <MODBUS__ARRAYLIST_Registers_Init+0x128>
	aux_register = MODBUS_REG_0202;
 80055b2:	f240 2302 	movw	r3, #514	; 0x202
 80055b6:	80bb      	strh	r3, [r7, #4]
	et_ret =  ArrayList__Add(LIST_REGISTERS, &aux_register);
 80055b8:	1d3b      	adds	r3, r7, #4
 80055ba:	4619      	mov	r1, r3
 80055bc:	2002      	movs	r0, #2
 80055be:	f7ff f9cd 	bl	800495c <ArrayList__Add>
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	2b1a      	cmp	r3, #26
 80055ca:	d80e      	bhi.n	80055ea <MODBUS__ARRAYLIST_Registers_Init+0xb6>
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	4a27      	ldr	r2, [pc, #156]	; (800566c <MODBUS__ARRAYLIST_Registers_Init+0x138>)
 80055d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	4b26      	ldr	r3, [pc, #152]	; (8005670 <MODBUS__ARRAYLIST_Registers_Init+0x13c>)
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	23d4      	movs	r3, #212	; 0xd4
 80055dc:	4a25      	ldr	r2, [pc, #148]	; (8005674 <MODBUS__ARRAYLIST_Registers_Init+0x140>)
 80055de:	4926      	ldr	r1, [pc, #152]	; (8005678 <MODBUS__ARRAYLIST_Registers_Init+0x144>)
 80055e0:	4826      	ldr	r0, [pc, #152]	; (800567c <MODBUS__ARRAYLIST_Registers_Init+0x148>)
 80055e2:	f000 fd63 	bl	80060ac <iprintf>
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	e038      	b.n	800565c <MODBUS__ARRAYLIST_Registers_Init+0x128>
	aux_register = MODBUS_REG_0303;
 80055ea:	f240 3303 	movw	r3, #771	; 0x303
 80055ee:	80bb      	strh	r3, [r7, #4]
	et_ret =  ArrayList__Add(LIST_REGISTERS, &aux_register);
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	2002      	movs	r0, #2
 80055f6:	f7ff f9b1 	bl	800495c <ArrayList__Add>
 80055fa:	4603      	mov	r3, r0
 80055fc:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	2b1a      	cmp	r3, #26
 8005602:	d80e      	bhi.n	8005622 <MODBUS__ARRAYLIST_Registers_Init+0xee>
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	4a19      	ldr	r2, [pc, #100]	; (800566c <MODBUS__ARRAYLIST_Registers_Init+0x138>)
 8005608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	4b18      	ldr	r3, [pc, #96]	; (8005670 <MODBUS__ARRAYLIST_Registers_Init+0x13c>)
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	23d7      	movs	r3, #215	; 0xd7
 8005614:	4a17      	ldr	r2, [pc, #92]	; (8005674 <MODBUS__ARRAYLIST_Registers_Init+0x140>)
 8005616:	4918      	ldr	r1, [pc, #96]	; (8005678 <MODBUS__ARRAYLIST_Registers_Init+0x144>)
 8005618:	4818      	ldr	r0, [pc, #96]	; (800567c <MODBUS__ARRAYLIST_Registers_Init+0x148>)
 800561a:	f000 fd47 	bl	80060ac <iprintf>
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	e01c      	b.n	800565c <MODBUS__ARRAYLIST_Registers_Init+0x128>
	aux_register = MODBUS_REG_0A0A;
 8005622:	f640 230a 	movw	r3, #2570	; 0xa0a
 8005626:	80bb      	strh	r3, [r7, #4]
	et_ret =  ArrayList__Add(LIST_REGISTERS, &aux_register);
 8005628:	1d3b      	adds	r3, r7, #4
 800562a:	4619      	mov	r1, r3
 800562c:	2002      	movs	r0, #2
 800562e:	f7ff f995 	bl	800495c <ArrayList__Add>
 8005632:	4603      	mov	r3, r0
 8005634:	71fb      	strb	r3, [r7, #7]
	CENTI_CHECK_RET(et_ret);
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	2b1a      	cmp	r3, #26
 800563a:	d80e      	bhi.n	800565a <MODBUS__ARRAYLIST_Registers_Init+0x126>
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	4a0b      	ldr	r2, [pc, #44]	; (800566c <MODBUS__ARRAYLIST_Registers_Init+0x138>)
 8005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <MODBUS__ARRAYLIST_Registers_Init+0x13c>)
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	23da      	movs	r3, #218	; 0xda
 800564c:	4a09      	ldr	r2, [pc, #36]	; (8005674 <MODBUS__ARRAYLIST_Registers_Init+0x140>)
 800564e:	490a      	ldr	r1, [pc, #40]	; (8005678 <MODBUS__ARRAYLIST_Registers_Init+0x144>)
 8005650:	480a      	ldr	r0, [pc, #40]	; (800567c <MODBUS__ARRAYLIST_Registers_Init+0x148>)
 8005652:	f000 fd2b 	bl	80060ac <iprintf>
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	e000      	b.n	800565c <MODBUS__ARRAYLIST_Registers_Init+0x128>

	return RET_OK;
 800565a:	231b      	movs	r3, #27
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	08005941 	.word	0x08005941
 8005668:	20000608 	.word	0x20000608
 800566c:	200001c0 	.word	0x200001c0
 8005670:	08007ce8 	.word	0x08007ce8
 8005674:	08007624 	.word	0x08007624
 8005678:	08007648 	.word	0x08007648
 800567c:	08007650 	.word	0x08007650

08005680 <MODBUS__Check_Valid_Function_Code>:

bool MODBUS__Check_Valid_Function_Code (uint8_t function_code)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
	et_RET et_ret = RET_UNEXPECTED;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
	size_t aux = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]

	et_ret = ArrayList__Search(LIST_FUNCTION_CODES, &function_code, &aux);
 8005692:	f107 0208 	add.w	r2, r7, #8
 8005696:	1dfb      	adds	r3, r7, #7
 8005698:	4619      	mov	r1, r3
 800569a:	2001      	movs	r0, #1
 800569c:	f7ff f8c2 	bl	8004824 <ArrayList__Search>
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
	if(et_ret == RET_OK)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b1b      	cmp	r3, #27
 80056a8:	d101      	bne.n	80056ae <MODBUS__Check_Valid_Function_Code+0x2e>
	{
		return FLAG_ON;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <MODBUS__Check_Valid_Function_Code+0x30>
	}
	else
	{
		return FLAG_OFF;
 80056ae:	2300      	movs	r3, #0
	}
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <MODBUS__Check_Valid_Register_Address>:

bool MODBUS__Check_Valid_Register_Address (uint16_t register_addr)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	80fb      	strh	r3, [r7, #6]
	et_RET et_ret = RET_UNEXPECTED;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
	size_t aux = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]

	et_ret = ArrayList__Search(LIST_REGISTERS, &register_addr, &aux);
 80056ca:	f107 0208 	add.w	r2, r7, #8
 80056ce:	1dbb      	adds	r3, r7, #6
 80056d0:	4619      	mov	r1, r3
 80056d2:	2002      	movs	r0, #2
 80056d4:	f7ff f8a6 	bl	8004824 <ArrayList__Search>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]
	if(et_ret == RET_OK)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b1b      	cmp	r3, #27
 80056e0:	d101      	bne.n	80056e6 <MODBUS__Check_Valid_Register_Address+0x2e>
	{
		return FLAG_ON;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <MODBUS__Check_Valid_Register_Address+0x30>
	}
	else
	{
		return FLAG_OFF;
 80056e6:	2300      	movs	r3, #0
	}
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <MODBUS__Check_Valid_Message>:

bool MODBUS__Check_Valid_Message (uint8_t *MODBUS_Msg, uint8_t size)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
	if (!MODBUS__Check_CRC(MODBUS_Msg, size))
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f875 	bl	80057f0 <MODBUS__Check_CRC>
 8005706:	4603      	mov	r3, r0
 8005708:	f083 0301 	eor.w	r3, r3, #1
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <MODBUS__Check_Valid_Message+0x26>
	{
		return false;
 8005712:	2300      	movs	r3, #0
 8005714:	e025      	b.n	8005762 <MODBUS__Check_Valid_Message+0x72>
	}
	if (!MODBUS__Check_Valid_Function_Code(MODBUS_Msg[1])){
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3301      	adds	r3, #1
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff ffaf 	bl	8005680 <MODBUS__Check_Valid_Function_Code>
 8005722:	4603      	mov	r3, r0
 8005724:	f083 0301 	eor.w	r3, r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <MODBUS__Check_Valid_Message+0x42>
		return false;
 800572e:	2300      	movs	r3, #0
 8005730:	e017      	b.n	8005762 <MODBUS__Check_Valid_Message+0x72>
	}
	if (!MODBUS__Check_Valid_Register_Address((uint16_t)((MODBUS_Msg[3] << 8) + MODBUS_Msg[4])))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3303      	adds	r3, #3
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	4413      	add	r3, r2
 8005748:	b29b      	uxth	r3, r3
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff ffb4 	bl	80056b8 <MODBUS__Check_Valid_Register_Address>
 8005750:	4603      	mov	r3, r0
 8005752:	f083 0301 	eor.w	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <MODBUS__Check_Valid_Message+0x70>
	{
		return false;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <MODBUS__Check_Valid_Message+0x72>
	}
	return true;
 8005760:	2301      	movs	r3, #1
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <MODBUS__Parser_Command>:

void MODBUS__Parser_Command (uint8_t *MODBUS_Msg, st_MODBUS_COMMAND *command)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
	uint8_t idx = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]

	command->slave_addr = 							MODBUS_Msg[idx++];
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	73fa      	strb	r2, [r7, #15]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	781a      	ldrb	r2, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	701a      	strb	r2, [r3, #0]
	command->function_code = 						MODBUS_Msg[idx++];
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	73fa      	strb	r2, [r7, #15]
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4413      	add	r3, r2
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	705a      	strb	r2, [r3, #1]
	command->register_addr.ut_high_u1B.value_u8 = 	MODBUS_Msg[idx++];
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	73fa      	strb	r2, [r7, #15]
 80057a2:	461a      	mov	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4413      	add	r3, r2
 80057a8:	781a      	ldrb	r2, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	709a      	strb	r2, [r3, #2]
	command->register_addr.ut_low_u1B.value_u8 = 	MODBUS_Msg[idx++];
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	73fa      	strb	r2, [r7, #15]
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4413      	add	r3, r2
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	70da      	strb	r2, [r3, #3]
	command->size.ut_high_u1B.value_u8 = 			MODBUS_Msg[idx++];
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	73fa      	strb	r2, [r7, #15]
 80057c6:	461a      	mov	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4413      	add	r3, r2
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	711a      	strb	r2, [r3, #4]
	command->size.ut_low_u1B.value_u8 = 			MODBUS_Msg[idx++];
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	73fa      	strb	r2, [r7, #15]
 80057d8:	461a      	mov	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	715a      	strb	r2, [r3, #5]

}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <MODBUS__Check_CRC>:

#endif


bool MODBUS__Check_CRC(uint8_t *vec, uint8_t size)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 80057fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005800:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_crc = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	817b      	strh	r3, [r7, #10]
	bool valid_crc = FLAG_OFF;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]

	crc = MODBUS__Calc_CRC(vec, size - 2);
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	3b02      	subs	r3, #2
 800580e:	b2db      	uxtb	r3, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f834 	bl	8005880 <MODBUS__Calc_CRC>
 8005818:	4603      	mov	r3, r0
 800581a:	81bb      	strh	r3, [r7, #12]
	aux_crc = ((vec[size - 2] & 0xFF) << 8);
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	3b02      	subs	r3, #2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	817b      	strh	r3, [r7, #10]
	aux_crc |= (vec[size - 1] & 0xFF);
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	3b01      	subs	r3, #1
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	4413      	add	r3, r2
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	897b      	ldrh	r3, [r7, #10]
 800583a:	4313      	orrs	r3, r2
 800583c:	817b      	strh	r3, [r7, #10]
	CENTI_DEBUG__Verbose("Expected crc: %04X", crc);
 800583e:	89bb      	ldrh	r3, [r7, #12]
 8005840:	461a      	mov	r2, r3
 8005842:	490c      	ldr	r1, [pc, #48]	; (8005874 <MODBUS__Check_CRC+0x84>)
 8005844:	480c      	ldr	r0, [pc, #48]	; (8005878 <MODBUS__Check_CRC+0x88>)
 8005846:	f000 fc31 	bl	80060ac <iprintf>
	CENTI_DEBUG__Verbose("Received crc: %04X", aux_crc);
 800584a:	897b      	ldrh	r3, [r7, #10]
 800584c:	461a      	mov	r2, r3
 800584e:	4909      	ldr	r1, [pc, #36]	; (8005874 <MODBUS__Check_CRC+0x84>)
 8005850:	480a      	ldr	r0, [pc, #40]	; (800587c <MODBUS__Check_CRC+0x8c>)
 8005852:	f000 fc2b 	bl	80060ac <iprintf>
	(aux_crc == crc) ? (valid_crc = FLAG_ON) : (valid_crc = FLAG_OFF);
 8005856:	897a      	ldrh	r2, [r7, #10]
 8005858:	89bb      	ldrh	r3, [r7, #12]
 800585a:	429a      	cmp	r2, r3
 800585c:	d102      	bne.n	8005864 <MODBUS__Check_CRC+0x74>
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	e001      	b.n	8005868 <MODBUS__Check_CRC+0x78>
 8005864:	2300      	movs	r3, #0
 8005866:	73fb      	strb	r3, [r7, #15]

	return valid_crc;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	08007688 	.word	0x08007688
 8005878:	08007690 	.word	0x08007690
 800587c:	080076a8 	.word	0x080076a8

08005880 <MODBUS__Calc_CRC>:
/* ************************************************************************************ */
/* * Private Functions                                                       	      * */
/* ************************************************************************************ */

static uint16_t MODBUS__Calc_CRC(uint8_t *vec, uint8_t size)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
	uint16_t aux_crc = 0xFFFF;
 800588c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005890:	81fb      	strh	r3, [r7, #14]
	uint16_t crc = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	817b      	strh	r3, [r7, #10]
	uint8_t j;

	for (j = 0; j < size; j++)
 8005896:	2300      	movs	r3, #0
 8005898:	737b      	strb	r3, [r7, #13]
 800589a:	e026      	b.n	80058ea <MODBUS__Calc_CRC+0x6a>
	{
		aux_crc ^= vec[j];
 800589c:	7b7b      	ldrb	r3, [r7, #13]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4413      	add	r3, r2
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	89fb      	ldrh	r3, [r7, #14]
 80058a8:	4053      	eors	r3, r2
 80058aa:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0; i < 8; i++)
 80058ac:	2300      	movs	r3, #0
 80058ae:	733b      	strb	r3, [r7, #12]
 80058b0:	e015      	b.n	80058de <MODBUS__Calc_CRC+0x5e>
		{
			if (aux_crc & 0x01)
 80058b2:	89fb      	ldrh	r3, [r7, #14]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <MODBUS__Calc_CRC+0x52>
			{
				aux_crc >>= 1;
 80058bc:	89fb      	ldrh	r3, [r7, #14]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	81fb      	strh	r3, [r7, #14]
				aux_crc ^= 0xA001;
 80058c2:	89fb      	ldrh	r3, [r7, #14]
 80058c4:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80058c8:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80058cc:	43db      	mvns	r3, r3
 80058ce:	81fb      	strh	r3, [r7, #14]
 80058d0:	e002      	b.n	80058d8 <MODBUS__Calc_CRC+0x58>
			}
			else
				aux_crc >>= 1;
 80058d2:	89fb      	ldrh	r3, [r7, #14]
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0; i < 8; i++)
 80058d8:	7b3b      	ldrb	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	733b      	strb	r3, [r7, #12]
 80058de:	7b3b      	ldrb	r3, [r7, #12]
 80058e0:	2b07      	cmp	r3, #7
 80058e2:	d9e6      	bls.n	80058b2 <MODBUS__Calc_CRC+0x32>
	for (j = 0; j < size; j++)
 80058e4:	7b7b      	ldrb	r3, [r7, #13]
 80058e6:	3301      	adds	r3, #1
 80058e8:	737b      	strb	r3, [r7, #13]
 80058ea:	7b7a      	ldrb	r2, [r7, #13]
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d3d4      	bcc.n	800589c <MODBUS__Calc_CRC+0x1c>
		}
	}
	crc = ((aux_crc & 0xFF) << 8);
 80058f2:	89fb      	ldrh	r3, [r7, #14]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	817b      	strh	r3, [r7, #10]
	crc |= ((aux_crc >> 8) & 0xFF);
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	b21a      	sxth	r2, r3
 8005900:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005904:	4313      	orrs	r3, r2
 8005906:	b21b      	sxth	r3, r3
 8005908:	817b      	strh	r3, [r7, #10]
	return crc;
 800590a:	897b      	ldrh	r3, [r7, #10]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <MODBUS__function_code_Cmp>:

static bool MODBUS__function_code_Cmp (const void *elem1, const void *elem2)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
	if((*(uint8_t *) elem1) == (*(uint8_t *) elem2))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d101      	bne.n	8005932 <MODBUS__function_code_Cmp+0x1a>
		return true;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <MODBUS__function_code_Cmp+0x1c>
	else
		return false;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <MODBUS__register_Cmp>:

static bool MODBUS__register_Cmp (const void *elem1, const void *elem2)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
	if((*(uint16_t *) elem1) == (*(uint16_t *) elem2))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	881a      	ldrh	r2, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d101      	bne.n	800595a <MODBUS__register_Cmp+0x1a>
		return true;
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <MODBUS__register_Cmp+0x1c>
	else
		return false;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <MODBUS__Send>:
/* ************************************************************************************ */
/* * Communication Functions                                                          * */
/* ************************************************************************************ */

et_RET MODBUS__Send (et_MODBUS et_dev, uint8_t *MODBUS_msg, uint8_t msg_size)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af02      	add	r7, sp, #8
 800596e:	4603      	mov	r3, r0
 8005970:	6039      	str	r1, [r7, #0]
 8005972:	71fb      	strb	r3, [r7, #7]
 8005974:	4613      	mov	r3, r2
 8005976:	71bb      	strb	r3, [r7, #6]
	et_RET et_ret = RET_UNEXPECTED;
 8005978:	2300      	movs	r3, #0
 800597a:	73fb      	strb	r3, [r7, #15]
	uint16_t crc = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	81bb      	strh	r3, [r7, #12]

    crc = MODBUS__Calc_CRC(MODBUS_msg, msg_size);
 8005980:	79bb      	ldrb	r3, [r7, #6]
 8005982:	4619      	mov	r1, r3
 8005984:	6838      	ldr	r0, [r7, #0]
 8005986:	f7ff ff7b 	bl	8005880 <MODBUS__Calc_CRC>
 800598a:	4603      	mov	r3, r0
 800598c:	81bb      	strh	r3, [r7, #12]
    MODBUS_msg[msg_size++] = ((crc >> 8) & 0xFF);
 800598e:	89bb      	ldrh	r3, [r7, #12]
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	b29a      	uxth	r2, r3
 8005994:	79bb      	ldrb	r3, [r7, #6]
 8005996:	1c59      	adds	r1, r3, #1
 8005998:	71b9      	strb	r1, [r7, #6]
 800599a:	4619      	mov	r1, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	440b      	add	r3, r1
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
    MODBUS_msg[msg_size++] = (crc & 0xFF);
 80059a4:	79bb      	ldrb	r3, [r7, #6]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	71ba      	strb	r2, [r7, #6]
 80059aa:	461a      	mov	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4413      	add	r3, r2
 80059b0:	89ba      	ldrh	r2, [r7, #12]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
    CENTI_DEBUG__Info("MODBUS Send Started!");
 80059b6:	4914      	ldr	r1, [pc, #80]	; (8005a08 <MODBUS__Send+0xa0>)
 80059b8:	4814      	ldr	r0, [pc, #80]	; (8005a0c <MODBUS__Send+0xa4>)
 80059ba:	f000 fb77 	bl	80060ac <iprintf>
    et_ret = COM__Write(et_dev, MODBUS_msg, msg_size);
 80059be:	79ba      	ldrb	r2, [r7, #6]
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 f96d 	bl	8005ca4 <COM__Write>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_RET(et_ret);
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b1a      	cmp	r3, #26
 80059d2:	d80f      	bhi.n	80059f4 <MODBUS__Send+0x8c>
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	4a0e      	ldr	r2, [pc, #56]	; (8005a10 <MODBUS__Send+0xa8>)
 80059d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <MODBUS__Send+0xac>)
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80059e6:	4a0c      	ldr	r2, [pc, #48]	; (8005a18 <MODBUS__Send+0xb0>)
 80059e8:	490c      	ldr	r1, [pc, #48]	; (8005a1c <MODBUS__Send+0xb4>)
 80059ea:	480d      	ldr	r0, [pc, #52]	; (8005a20 <MODBUS__Send+0xb8>)
 80059ec:	f000 fb5e 	bl	80060ac <iprintf>
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	e004      	b.n	80059fe <MODBUS__Send+0x96>
    CENTI_DEBUG__Info("MODBUS Send Finished!");
 80059f4:	4904      	ldr	r1, [pc, #16]	; (8005a08 <MODBUS__Send+0xa0>)
 80059f6:	480b      	ldr	r0, [pc, #44]	; (8005a24 <MODBUS__Send+0xbc>)
 80059f8:	f000 fb58 	bl	80060ac <iprintf>

	return RET_OK;
 80059fc:	231b      	movs	r3, #27
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	080075f8 	.word	0x080075f8
 8005a0c:	080076c0 	.word	0x080076c0
 8005a10:	200001c0 	.word	0x200001c0
 8005a14:	08007d0c 	.word	0x08007d0c
 8005a18:	08007624 	.word	0x08007624
 8005a1c:	08007648 	.word	0x08007648
 8005a20:	08007650 	.word	0x08007650
 8005a24:	080076dc 	.word	0x080076dc

08005a28 <MODBUS__Receive>:

et_RET MODBUS__Receive (et_MODBUS et_dev, uint8_t *MODBUS_msg, uint8_t *msg_size)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	4603      	mov	r3, r0
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	73fb      	strb	r3, [r7, #15]
	et_RET et_ret = RET_UNEXPECTED;
 8005a36:	2300      	movs	r3, #0
 8005a38:	75fb      	strb	r3, [r7, #23]

	CENTI_CHECK_PTR(MODBUS_msg);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10d      	bne.n	8005a5c <MODBUS__Receive+0x34>
 8005a40:	4b81      	ldr	r3, [pc, #516]	; (8005c48 <MODBUS__Receive+0x220>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	4b81      	ldr	r3, [pc, #516]	; (8005c4c <MODBUS__Receive+0x224>)
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8005a4e:	4a80      	ldr	r2, [pc, #512]	; (8005c50 <MODBUS__Receive+0x228>)
 8005a50:	4980      	ldr	r1, [pc, #512]	; (8005c54 <MODBUS__Receive+0x22c>)
 8005a52:	4881      	ldr	r0, [pc, #516]	; (8005c58 <MODBUS__Receive+0x230>)
 8005a54:	f000 fb2a 	bl	80060ac <iprintf>
 8005a58:	230a      	movs	r3, #10
 8005a5a:	e0f0      	b.n	8005c3e <MODBUS__Receive+0x216>
	CENTI_CHECK_PTR(msg_size);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10d      	bne.n	8005a7e <MODBUS__Receive+0x56>
 8005a62:	4b79      	ldr	r3, [pc, #484]	; (8005c48 <MODBUS__Receive+0x220>)
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	4b78      	ldr	r3, [pc, #480]	; (8005c4c <MODBUS__Receive+0x224>)
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f240 13ed 	movw	r3, #493	; 0x1ed
 8005a70:	4a77      	ldr	r2, [pc, #476]	; (8005c50 <MODBUS__Receive+0x228>)
 8005a72:	4978      	ldr	r1, [pc, #480]	; (8005c54 <MODBUS__Receive+0x22c>)
 8005a74:	4878      	ldr	r0, [pc, #480]	; (8005c58 <MODBUS__Receive+0x230>)
 8005a76:	f000 fb19 	bl	80060ac <iprintf>
 8005a7a:	230a      	movs	r3, #10
 8005a7c:	e0df      	b.n	8005c3e <MODBUS__Receive+0x216>

	et_MODBUS_STATE g_et_modbus_state = MODBUS_STATE__IDLE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75bb      	strb	r3, [r7, #22]

	while(ST_CONF[et_dev].uart__GetRemain() > 0)
 8005a82:	e07c      	b.n	8005b7e <MODBUS__Receive+0x156>
    {
    	switch(g_et_modbus_state)
 8005a84:	7dbb      	ldrb	r3, [r7, #22]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d02c      	beq.n	8005ae4 <MODBUS__Receive+0xbc>
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	dc5c      	bgt.n	8005b48 <MODBUS__Receive+0x120>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <MODBUS__Receive+0x70>
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d006      	beq.n	8005aa4 <MODBUS__Receive+0x7c>
 8005a96:	e057      	b.n	8005b48 <MODBUS__Receive+0x120>
		{
			case MODBUS_STATE__IDLE:
		        CENTI_DEBUG__Info("MODBUS Received Started!");
 8005a98:	4970      	ldr	r1, [pc, #448]	; (8005c5c <MODBUS__Receive+0x234>)
 8005a9a:	4871      	ldr	r0, [pc, #452]	; (8005c60 <MODBUS__Receive+0x238>)
 8005a9c:	f000 fb06 	bl	80060ac <iprintf>
				g_et_modbus_state = MODBUS_STATE__INIT;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	75bb      	strb	r3, [r7, #22]

			case MODBUS_STATE__INIT:
				CENTI_DEBUG__Verbose("MODBUS Rx command state: Initialize");
 8005aa4:	496f      	ldr	r1, [pc, #444]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005aa6:	4870      	ldr	r0, [pc, #448]	; (8005c68 <MODBUS__Receive+0x240>)
 8005aa8:	f000 fb00 	bl	80060ac <iprintf>
				for(uint8_t i = 0; i < MODBUS_MAX_SIZE; i++)
 8005aac:	2300      	movs	r3, #0
 8005aae:	757b      	strb	r3, [r7, #21]
 8005ab0:	e007      	b.n	8005ac2 <MODBUS__Receive+0x9a>
				{
					MODBUS_msg[i] = '\0';
 8005ab2:	7d7b      	ldrb	r3, [r7, #21]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < MODBUS_MAX_SIZE; i++)
 8005abc:	7d7b      	ldrb	r3, [r7, #21]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	757b      	strb	r3, [r7, #21]
 8005ac2:	7d7b      	ldrb	r3, [r7, #21]
 8005ac4:	2b1d      	cmp	r3, #29
 8005ac6:	d9f4      	bls.n	8005ab2 <MODBUS__Receive+0x8a>
				}
				*msg_size = 0;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
				SoftTimer__Start(SOFTTIMER_INSTANCE_MODBUS_TIMEOUT, ST_MODBUS_TIMEOUT);
 8005ace:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <MODBUS__Receive+0x244>)
 8005ad0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7ff f8b7 	bl	8004c48 <SoftTimer__Start>
				f_MODBUS_TIMEOUT = FLAG_OFF;
 8005ada:	4b65      	ldr	r3, [pc, #404]	; (8005c70 <MODBUS__Receive+0x248>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]

				g_et_modbus_state = MODBUS_STATE__GET_MSG;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	75bb      	strb	r3, [r7, #22]

			case MODBUS_STATE__GET_MSG:
				UART_1_RingBuffer__Read(&(MODBUS_msg[(*msg_size)]), 1);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4413      	add	r3, r2
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fc93 	bl	800441c <UART_1_RingBuffer__Read>
				CENTI_DEBUG__Verbose("MODBUS Rx command byte: 0x%02X", MODBUS_msg[*msg_size]);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	4957      	ldr	r1, [pc, #348]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005b06:	485b      	ldr	r0, [pc, #364]	; (8005c74 <MODBUS__Receive+0x24c>)
 8005b08:	f000 fad0 	bl	80060ac <iprintf>
				CENTI_DEBUG__Verbose("size: %d", *msg_size);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	4954      	ldr	r1, [pc, #336]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005b14:	4858      	ldr	r0, [pc, #352]	; (8005c78 <MODBUS__Receive+0x250>)
 8005b16:	f000 fac9 	bl	80060ac <iprintf>
				SoftTimer__Restart(SOFTTIMER_INSTANCE_MODBUS_TIMEOUT);
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	f7ff f950 	bl	8004dc0 <SoftTimer__Restart>

				(*msg_size)++;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	701a      	strb	r2, [r3, #0]
				// vec size
				if (*msg_size >= MODBUS_MAX_SIZE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b1d      	cmp	r3, #29
 8005b32:	d910      	bls.n	8005b56 <MODBUS__Receive+0x12e>
				{
					*msg_size = 0;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
					CENTI_DEBUG__Verbose("MODBUS Rx command oversized");
 8005b3a:	494a      	ldr	r1, [pc, #296]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005b3c:	484f      	ldr	r0, [pc, #316]	; (8005c7c <MODBUS__Receive+0x254>)
 8005b3e:	f000 fab5 	bl	80060ac <iprintf>
					g_et_modbus_state = MODBUS_STATE__ERROR;
 8005b42:	2304      	movs	r3, #4
 8005b44:	75bb      	strb	r3, [r7, #22]
					break;
 8005b46:	e007      	b.n	8005b58 <MODBUS__Receive+0x130>
				}
				break;
			default:
				CENTI_DEBUG__Verbose("MODBUS Rx command in default state");
 8005b48:	4946      	ldr	r1, [pc, #280]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005b4a:	484d      	ldr	r0, [pc, #308]	; (8005c80 <MODBUS__Receive+0x258>)
 8005b4c:	f000 faae 	bl	80060ac <iprintf>
				g_et_modbus_state = MODBUS_STATE__ERROR;
 8005b50:	2304      	movs	r3, #4
 8005b52:	75bb      	strb	r3, [r7, #22]
				break;
 8005b54:	e000      	b.n	8005b58 <MODBUS__Receive+0x130>
				break;
 8005b56:	bf00      	nop
		}
		if (g_et_modbus_state == MODBUS_STATE__ERROR)
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d10f      	bne.n	8005b7e <MODBUS__Receive+0x156>
		{
			*msg_size = 0;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
			CENTI_DEBUG__Verbose("MODBUS Rx command entering error state");
 8005b64:	493f      	ldr	r1, [pc, #252]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005b66:	4847      	ldr	r0, [pc, #284]	; (8005c84 <MODBUS__Receive+0x25c>)
 8005b68:	f000 faa0 	bl	80060ac <iprintf>
			UART_1_RingBuffer__ClearRxFIFO();
 8005b6c:	f7fe fd0c 	bl	8004588 <UART_1_RingBuffer__ClearRxFIFO>
			SoftTimer__Stop(SOFTTIMER_INSTANCE_MODBUS_TIMEOUT);
 8005b70:	2001      	movs	r0, #1
 8005b72:	f7ff f8e3 	bl	8004d3c <SoftTimer__Stop>
			f_MODBUS_TIMEOUT = FLAG_OFF;
 8005b76:	4b3e      	ldr	r3, [pc, #248]	; (8005c70 <MODBUS__Receive+0x248>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
			break;
 8005b7c:	e00d      	b.n	8005b9a <MODBUS__Receive+0x172>
	while(ST_CONF[et_dev].uart__GetRemain() > 0)
 8005b7e:	7bfa      	ldrb	r2, [r7, #15]
 8005b80:	4941      	ldr	r1, [pc, #260]	; (8005c88 <MODBUS__Receive+0x260>)
 8005b82:	4613      	mov	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4798      	blx	r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f47f af75 	bne.w	8005a84 <MODBUS__Receive+0x5c>
		}
    }
	// timeout
	if(f_MODBUS_TIMEOUT == FLAG_ON)
 8005b9a:	4b35      	ldr	r3, [pc, #212]	; (8005c70 <MODBUS__Receive+0x248>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00b      	beq.n	8005bba <MODBUS__Receive+0x192>
	{
		SoftTimer__Stop(SOFTTIMER_INSTANCE_MODBUS_TIMEOUT);
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f7ff f8ca 	bl	8004d3c <SoftTimer__Stop>
		f_MODBUS_TIMEOUT = FLAG_OFF;
 8005ba8:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <MODBUS__Receive+0x248>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
		CENTI_DEBUG__Verbose("MODBUS Rx command timeout");
 8005bae:	492d      	ldr	r1, [pc, #180]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005bb0:	4836      	ldr	r0, [pc, #216]	; (8005c8c <MODBUS__Receive+0x264>)
 8005bb2:	f000 fa7b 	bl	80060ac <iprintf>
		g_et_modbus_state = MODBUS_STATE__COMPLETE;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	75bb      	strb	r3, [r7, #22]
	}
	// command complete
	if (g_et_modbus_state == MODBUS_STATE__COMPLETE)
 8005bba:	7dbb      	ldrb	r3, [r7, #22]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d132      	bne.n	8005c26 <MODBUS__Receive+0x1fe>
	{
		g_et_modbus_state = MODBUS_STATE__IDLE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75bb      	strb	r3, [r7, #22]
		CENTI_DEBUG__Verbose("size: %d", *msg_size);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4926      	ldr	r1, [pc, #152]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005bcc:	482a      	ldr	r0, [pc, #168]	; (8005c78 <MODBUS__Receive+0x250>)
 8005bce:	f000 fa6d 	bl	80060ac <iprintf>
		if (MODBUS__Check_CRC(MODBUS_msg, *msg_size)) /////// check here
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	68b8      	ldr	r0, [r7, #8]
 8005bda:	f7ff fe09 	bl	80057f0 <MODBUS__Check_CRC>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01a      	beq.n	8005c1a <MODBUS__Receive+0x1f2>
		{
			CENTI_DEBUG__Info("MODBUS Rx command: Complete command!");
 8005be4:	491d      	ldr	r1, [pc, #116]	; (8005c5c <MODBUS__Receive+0x234>)
 8005be6:	482a      	ldr	r0, [pc, #168]	; (8005c90 <MODBUS__Receive+0x268>)
 8005be8:	f000 fa60 	bl	80060ac <iprintf>

			for (uint8_t i=0; i<*msg_size; i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	753b      	strb	r3, [r7, #20]
 8005bf0:	e00b      	b.n	8005c0a <MODBUS__Receive+0x1e2>
			{
				CENTI_DEBUG__Verbose("0x%02X", MODBUS_msg[i]);
 8005bf2:	7d3b      	ldrb	r3, [r7, #20]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4919      	ldr	r1, [pc, #100]	; (8005c64 <MODBUS__Receive+0x23c>)
 8005bfe:	4825      	ldr	r0, [pc, #148]	; (8005c94 <MODBUS__Receive+0x26c>)
 8005c00:	f000 fa54 	bl	80060ac <iprintf>
			for (uint8_t i=0; i<*msg_size; i++)
 8005c04:	7d3b      	ldrb	r3, [r7, #20]
 8005c06:	3301      	adds	r3, #1
 8005c08:	753b      	strb	r3, [r7, #20]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	7d3a      	ldrb	r2, [r7, #20]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3ee      	bcc.n	8005bf2 <MODBUS__Receive+0x1ca>
			}
			et_ret = RET_OK;
 8005c14:	231b      	movs	r3, #27
 8005c16:	75fb      	strb	r3, [r7, #23]
 8005c18:	e005      	b.n	8005c26 <MODBUS__Receive+0x1fe>
		}
		else
		{
			CENTI_DEBUG__Info("MODBUS Rx command: Invalid command! Ignoring...");
 8005c1a:	4910      	ldr	r1, [pc, #64]	; (8005c5c <MODBUS__Receive+0x234>)
 8005c1c:	481e      	ldr	r0, [pc, #120]	; (8005c98 <MODBUS__Receive+0x270>)
 8005c1e:	f000 fa45 	bl	80060ac <iprintf>
			g_et_modbus_state = MODBUS_STATE__ERROR;
 8005c22:	2304      	movs	r3, #4
 8005c24:	75bb      	strb	r3, [r7, #22]
		}
	}
	if (g_et_modbus_state == MODBUS_STATE__ERROR)
 8005c26:	7dbb      	ldrb	r3, [r7, #22]
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d107      	bne.n	8005c3c <MODBUS__Receive+0x214>
	{
		CENTI_DEBUG__Warning("MODBUS Rx command Error!");
 8005c2c:	491b      	ldr	r1, [pc, #108]	; (8005c9c <MODBUS__Receive+0x274>)
 8005c2e:	481c      	ldr	r0, [pc, #112]	; (8005ca0 <MODBUS__Receive+0x278>)
 8005c30:	f000 fa3c 	bl	80060ac <iprintf>
		g_et_modbus_state = MODBUS_STATE__IDLE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	75bb      	strb	r3, [r7, #22]
		return RET_INVALID_STATE;
 8005c38:	2309      	movs	r3, #9
 8005c3a:	e000      	b.n	8005c3e <MODBUS__Receive+0x216>
	}
	return et_ret;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200001c0 	.word	0x200001c0
 8005c4c:	08007d1c 	.word	0x08007d1c
 8005c50:	08007624 	.word	0x08007624
 8005c54:	08007648 	.word	0x08007648
 8005c58:	08007650 	.word	0x08007650
 8005c5c:	080075f8 	.word	0x080075f8
 8005c60:	080076f8 	.word	0x080076f8
 8005c64:	08007688 	.word	0x08007688
 8005c68:	08007718 	.word	0x08007718
 8005c6c:	08007c88 	.word	0x08007c88
 8005c70:	200005f1 	.word	0x200005f1
 8005c74:	08007740 	.word	0x08007740
 8005c78:	08007764 	.word	0x08007764
 8005c7c:	08007774 	.word	0x08007774
 8005c80:	08007794 	.word	0x08007794
 8005c84:	080077bc 	.word	0x080077bc
 8005c88:	08007c90 	.word	0x08007c90
 8005c8c:	080077e8 	.word	0x080077e8
 8005c90:	08007808 	.word	0x08007808
 8005c94:	08007834 	.word	0x08007834
 8005c98:	08007840 	.word	0x08007840
 8005c9c:	08007874 	.word	0x08007874
 8005ca0:	0800787c 	.word	0x0800787c

08005ca4 <COM__Write>:

static et_RET COM__Write(et_MODBUS et_dev, uint8_t *vec, uint8_t size)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	4603      	mov	r3, r0
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	71fb      	strb	r3, [r7, #7]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	71bb      	strb	r3, [r7, #6]
    et_RET et_ret = RET_UNEXPECTED;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_PTR(vec);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <COM__Write+0x36>
 8005cbe:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <COM__Write+0xb0>)
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <COM__Write+0xb4>)
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	f240 234d 	movw	r3, #589	; 0x24d
 8005ccc:	4a23      	ldr	r2, [pc, #140]	; (8005d5c <COM__Write+0xb8>)
 8005cce:	4924      	ldr	r1, [pc, #144]	; (8005d60 <COM__Write+0xbc>)
 8005cd0:	4824      	ldr	r0, [pc, #144]	; (8005d64 <COM__Write+0xc0>)
 8005cd2:	f000 f9eb 	bl	80060ac <iprintf>
 8005cd6:	230a      	movs	r3, #10
 8005cd8:	e038      	b.n	8005d4c <COM__Write+0xa8>
	ST_CONF[et_dev].gpio__Setlevel(MODBUS_MODE_WRITE);
 8005cda:	79fa      	ldrb	r2, [r7, #7]
 8005cdc:	4922      	ldr	r1, [pc, #136]	; (8005d68 <COM__Write+0xc4>)
 8005cde:	4613      	mov	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3314      	adds	r3, #20
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2001      	movs	r0, #1
 8005cee:	4798      	blx	r3
	et_ret = ST_CONF[et_dev].uart__Write(vec, size);
 8005cf0:	79fa      	ldrb	r2, [r7, #7]
 8005cf2:	491d      	ldr	r1, [pc, #116]	; (8005d68 <COM__Write+0xc4>)
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	3304      	adds	r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	79ba      	ldrb	r2, [r7, #6]
 8005d04:	4611      	mov	r1, r2
 8005d06:	6838      	ldr	r0, [r7, #0]
 8005d08:	4798      	blx	r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
	CENTI_CHECK_RET(et_ret);
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b1a      	cmp	r3, #26
 8005d12:	d80f      	bhi.n	8005d34 <COM__Write+0x90>
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	4a0f      	ldr	r2, [pc, #60]	; (8005d54 <COM__Write+0xb0>)
 8005d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <COM__Write+0xb4>)
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	f44f 7314 	mov.w	r3, #592	; 0x250
 8005d26:	4a0d      	ldr	r2, [pc, #52]	; (8005d5c <COM__Write+0xb8>)
 8005d28:	490d      	ldr	r1, [pc, #52]	; (8005d60 <COM__Write+0xbc>)
 8005d2a:	480e      	ldr	r0, [pc, #56]	; (8005d64 <COM__Write+0xc0>)
 8005d2c:	f000 f9be 	bl	80060ac <iprintf>
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	e00b      	b.n	8005d4c <COM__Write+0xa8>
	ST_CONF[et_dev].gpio__Setlevel(MODBUS_MODE_READ);
 8005d34:	79fa      	ldrb	r2, [r7, #7]
 8005d36:	490c      	ldr	r1, [pc, #48]	; (8005d68 <COM__Write+0xc4>)
 8005d38:	4613      	mov	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	3314      	adds	r3, #20
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2000      	movs	r0, #0
 8005d48:	4798      	blx	r3
	return RET_OK;
 8005d4a:	231b      	movs	r3, #27
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	200001c0 	.word	0x200001c0
 8005d58:	08007d2c 	.word	0x08007d2c
 8005d5c:	08007624 	.word	0x08007624
 8005d60:	08007648 	.word	0x08007648
 8005d64:	08007650 	.word	0x08007650
 8005d68:	08007c90 	.word	0x08007c90

08005d6c <Manager__Initialize>:

/* ************************************************************************************ */
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
et_RET Manager__Initialize(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af02      	add	r7, sp, #8
    et_RET et_ret = RET_UNEXPECTED;
 8005d72:	2300      	movs	r3, #0
 8005d74:	71fb      	strb	r3, [r7, #7]
    
    CENTI_DEBUG__Info("Manager - Initialization started!");
 8005d76:	4915      	ldr	r1, [pc, #84]	; (8005dcc <Manager__Initialize+0x60>)
 8005d78:	4815      	ldr	r0, [pc, #84]	; (8005dd0 <Manager__Initialize+0x64>)
 8005d7a:	f000 f997 	bl	80060ac <iprintf>

    et_ret = MODBUS__Initialize(MODBUS_DEFAULT);
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f7ff f9c0 	bl	8005104 <MODBUS__Initialize>
 8005d84:	4603      	mov	r3, r0
 8005d86:	71fb      	strb	r3, [r7, #7]
    CENTI_CHECK_RET (et_ret);
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b1a      	cmp	r3, #26
 8005d8c:	d80e      	bhi.n	8005dac <Manager__Initialize+0x40>
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <Manager__Initialize+0x68>)
 8005d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <Manager__Initialize+0x6c>)
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2370      	movs	r3, #112	; 0x70
 8005d9e:	4a0f      	ldr	r2, [pc, #60]	; (8005ddc <Manager__Initialize+0x70>)
 8005da0:	490f      	ldr	r1, [pc, #60]	; (8005de0 <Manager__Initialize+0x74>)
 8005da2:	4810      	ldr	r0, [pc, #64]	; (8005de4 <Manager__Initialize+0x78>)
 8005da4:	f000 f982 	bl	80060ac <iprintf>
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	e00a      	b.n	8005dc2 <Manager__Initialize+0x56>

    /* Indicate that initialization was successfully complete. */
    g_initialized = true;
 8005dac:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <Manager__Initialize+0x7c>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	701a      	strb	r2, [r3, #0]
    
    g_et_state = MANAGER_STATE_LOOP;
 8005db2:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <Manager__Initialize+0x80>)
 8005db4:	2202      	movs	r2, #2
 8005db6:	701a      	strb	r2, [r3, #0]

    CENTI_DEBUG__Info("Manager - Initialization complete!");
 8005db8:	4904      	ldr	r1, [pc, #16]	; (8005dcc <Manager__Initialize+0x60>)
 8005dba:	480d      	ldr	r0, [pc, #52]	; (8005df0 <Manager__Initialize+0x84>)
 8005dbc:	f000 f976 	bl	80060ac <iprintf>

    return RET_OK;
 8005dc0:	231b      	movs	r3, #27
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	08007a5c 	.word	0x08007a5c
 8005dd0:	08007a64 	.word	0x08007a64
 8005dd4:	20000264 	.word	0x20000264
 8005dd8:	08007d38 	.word	0x08007d38
 8005ddc:	08007a8c 	.word	0x08007a8c
 8005de0:	08007aac 	.word	0x08007aac
 8005de4:	08007ab4 	.word	0x08007ab4
 8005de8:	20000630 	.word	0x20000630
 8005dec:	200002f4 	.word	0x200002f4
 8005df0:	08007ac8 	.word	0x08007ac8

08005df4 <Manager__Loop>:

et_RET Manager__Loop(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af02      	add	r7, sp, #8
    et_RET et_ret = RET_UNEXPECTED;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
    static uint8_t vec[30] = {};
    static uint8_t msg_size = 0;
    st_MODBUS_COMMAND cmd = {};
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	605a      	str	r2, [r3, #4]

    switch (g_et_state)
 8005e06:	4b39      	ldr	r3, [pc, #228]	; (8005eec <Manager__Loop+0xf8>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d035      	beq.n	8005e7a <Manager__Loop+0x86>
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	dc62      	bgt.n	8005ed8 <Manager__Loop+0xe4>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <Manager__Loop+0x28>
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d00f      	beq.n	8005e3a <Manager__Loop+0x46>
 8005e1a:	e05d      	b.n	8005ed8 <Manager__Loop+0xe4>
    {
        case MANAGER_STATE_ERROR:

            CENTI_DEBUG__Error("Manager - Loop error");
 8005e1c:	4b34      	ldr	r3, [pc, #208]	; (8005ef0 <Manager__Loop+0xfc>)
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2387      	movs	r3, #135	; 0x87
 8005e22:	4a34      	ldr	r2, [pc, #208]	; (8005ef4 <Manager__Loop+0x100>)
 8005e24:	4934      	ldr	r1, [pc, #208]	; (8005ef8 <Manager__Loop+0x104>)
 8005e26:	4835      	ldr	r0, [pc, #212]	; (8005efc <Manager__Loop+0x108>)
 8005e28:	f000 f940 	bl	80060ac <iprintf>
            CENTI_DEBUG__Info("Manager - Reinitializing...");
 8005e2c:	4934      	ldr	r1, [pc, #208]	; (8005f00 <Manager__Loop+0x10c>)
 8005e2e:	4835      	ldr	r0, [pc, #212]	; (8005f04 <Manager__Loop+0x110>)
 8005e30:	f000 f93c 	bl	80060ac <iprintf>
            
            /* Add error management. */
            // ...
            
            g_et_state = MANAGER_STATE_INIT;
 8005e34:	4b2d      	ldr	r3, [pc, #180]	; (8005eec <Manager__Loop+0xf8>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
            
        case MANAGER_STATE_INIT:
            
            et_ret = Manager__Initialize();
 8005e3a:	f7ff ff97 	bl	8005d6c <Manager__Initialize>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	73fb      	strb	r3, [r7, #15]
            MANAGER_CHECK_RET(et_ret);
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	2b1b      	cmp	r3, #27
 8005e46:	d014      	beq.n	8005e72 <Manager__Loop+0x7e>
 8005e48:	4b28      	ldr	r3, [pc, #160]	; (8005eec <Manager__Loop+0xf8>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b1a      	cmp	r3, #26
 8005e52:	d80e      	bhi.n	8005e72 <Manager__Loop+0x7e>
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	4a2c      	ldr	r2, [pc, #176]	; (8005f08 <Manager__Loop+0x114>)
 8005e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	4b24      	ldr	r3, [pc, #144]	; (8005ef0 <Manager__Loop+0xfc>)
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2392      	movs	r3, #146	; 0x92
 8005e64:	4a23      	ldr	r2, [pc, #140]	; (8005ef4 <Manager__Loop+0x100>)
 8005e66:	4929      	ldr	r1, [pc, #164]	; (8005f0c <Manager__Loop+0x118>)
 8005e68:	4829      	ldr	r0, [pc, #164]	; (8005f10 <Manager__Loop+0x11c>)
 8005e6a:	f000 f91f 	bl	80060ac <iprintf>
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	e038      	b.n	8005ee4 <Manager__Loop+0xf0>
            
            g_et_state = MANAGER_STATE_LOOP;
 8005e72:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <Manager__Loop+0xf8>)
 8005e74:	2202      	movs	r2, #2
 8005e76:	701a      	strb	r2, [r3, #0]
            
            break;
 8005e78:	e033      	b.n	8005ee2 <Manager__Loop+0xee>
            
        case MANAGER_STATE_LOOP:
        	et_ret = MODBUS__Receive(MODBUS_DEFAULT, vec, &msg_size);
 8005e7a:	4a26      	ldr	r2, [pc, #152]	; (8005f14 <Manager__Loop+0x120>)
 8005e7c:	4926      	ldr	r1, [pc, #152]	; (8005f18 <Manager__Loop+0x124>)
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f7ff fdd2 	bl	8005a28 <MODBUS__Receive>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]
        	if (et_ret == RET_OK)
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b1b      	cmp	r3, #27
 8005e8c:	d128      	bne.n	8005ee0 <Manager__Loop+0xec>
			{
        		if (MODBUS__Check_Valid_Message(vec, msg_size))
 8005e8e:	4b21      	ldr	r3, [pc, #132]	; (8005f14 <Manager__Loop+0x120>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	4820      	ldr	r0, [pc, #128]	; (8005f18 <Manager__Loop+0x124>)
 8005e96:	f7ff fc2b 	bl	80056f0 <MODBUS__Check_Valid_Message>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <Manager__Loop+0xc2>
        		{
        			MODBUS__Parser_Command (vec, &cmd);
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	481c      	ldr	r0, [pc, #112]	; (8005f18 <Manager__Loop+0x124>)
 8005ea6:	f7ff fc60 	bl	800576a <MODBUS__Parser_Command>
        			CENTI_DEBUG__Verbose("Function code: %d", cmd.function_code);
 8005eaa:	797b      	ldrb	r3, [r7, #5]
 8005eac:	461a      	mov	r2, r3
 8005eae:	491b      	ldr	r1, [pc, #108]	; (8005f1c <Manager__Loop+0x128>)
 8005eb0:	481b      	ldr	r0, [pc, #108]	; (8005f20 <Manager__Loop+0x12c>)
 8005eb2:	f000 f8fb 	bl	80060ac <iprintf>
        		}
        		CENTI_DEBUG__Verbose("%d", msg_size);
 8005eb6:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <Manager__Loop+0x120>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4917      	ldr	r1, [pc, #92]	; (8005f1c <Manager__Loop+0x128>)
 8005ebe:	4819      	ldr	r0, [pc, #100]	; (8005f24 <Manager__Loop+0x130>)
 8005ec0:	f000 f8f4 	bl	80060ac <iprintf>
        		MODBUS__Send (MODBUS_DEFAULT, vec, msg_size - 2);
 8005ec4:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <Manager__Loop+0x120>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	3b02      	subs	r3, #2
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4912      	ldr	r1, [pc, #72]	; (8005f18 <Manager__Loop+0x124>)
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f7ff fd49 	bl	8005968 <MODBUS__Send>
			}

            break;
 8005ed6:	e003      	b.n	8005ee0 <Manager__Loop+0xec>
            
        default:
            
            g_et_state = MANAGER_STATE_ERROR;
 8005ed8:	4b04      	ldr	r3, [pc, #16]	; (8005eec <Manager__Loop+0xf8>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
            
        break;
 8005ede:	e000      	b.n	8005ee2 <Manager__Loop+0xee>
            break;
 8005ee0:	bf00      	nop
    }
    
    return RET_OK;
 8005ee2:	231b      	movs	r3, #27
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	200002f4 	.word	0x200002f4
 8005ef0:	08007d4c 	.word	0x08007d4c
 8005ef4:	08007a8c 	.word	0x08007a8c
 8005ef8:	08007af0 	.word	0x08007af0
 8005efc:	08007af8 	.word	0x08007af8
 8005f00:	08007a5c 	.word	0x08007a5c
 8005f04:	08007b20 	.word	0x08007b20
 8005f08:	20000264 	.word	0x20000264
 8005f0c:	08007aac 	.word	0x08007aac
 8005f10:	08007ab4 	.word	0x08007ab4
 8005f14:	20000652 	.word	0x20000652
 8005f18:	20000634 	.word	0x20000634
 8005f1c:	08007b40 	.word	0x08007b40
 8005f20:	08007b48 	.word	0x08007b48
 8005f24:	08007b60 	.word	0x08007b60

08005f28 <std>:
 8005f28:	2300      	movs	r3, #0
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f36:	6083      	str	r3, [r0, #8]
 8005f38:	8181      	strh	r1, [r0, #12]
 8005f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f3c:	81c2      	strh	r2, [r0, #14]
 8005f3e:	6183      	str	r3, [r0, #24]
 8005f40:	4619      	mov	r1, r3
 8005f42:	2208      	movs	r2, #8
 8005f44:	305c      	adds	r0, #92	; 0x5c
 8005f46:	f000 f906 	bl	8006156 <memset>
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <std+0x58>)
 8005f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <std+0x5c>)
 8005f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f52:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <std+0x60>)
 8005f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <std+0x64>)
 8005f58:	6323      	str	r3, [r4, #48]	; 0x30
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <std+0x68>)
 8005f5c:	6224      	str	r4, [r4, #32]
 8005f5e:	429c      	cmp	r4, r3
 8005f60:	d006      	beq.n	8005f70 <std+0x48>
 8005f62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005f66:	4294      	cmp	r4, r2
 8005f68:	d002      	beq.n	8005f70 <std+0x48>
 8005f6a:	33d0      	adds	r3, #208	; 0xd0
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d105      	bne.n	8005f7c <std+0x54>
 8005f70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f78:	f000 b966 	b.w	8006248 <__retarget_lock_init_recursive>
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	bf00      	nop
 8005f80:	080060d1 	.word	0x080060d1
 8005f84:	080060f3 	.word	0x080060f3
 8005f88:	0800612b 	.word	0x0800612b
 8005f8c:	0800614f 	.word	0x0800614f
 8005f90:	20000654 	.word	0x20000654

08005f94 <stdio_exit_handler>:
 8005f94:	4a02      	ldr	r2, [pc, #8]	; (8005fa0 <stdio_exit_handler+0xc>)
 8005f96:	4903      	ldr	r1, [pc, #12]	; (8005fa4 <stdio_exit_handler+0x10>)
 8005f98:	4803      	ldr	r0, [pc, #12]	; (8005fa8 <stdio_exit_handler+0x14>)
 8005f9a:	f000 b869 	b.w	8006070 <_fwalk_sglue>
 8005f9e:	bf00      	nop
 8005fa0:	200002f8 	.word	0x200002f8
 8005fa4:	08006b11 	.word	0x08006b11
 8005fa8:	20000304 	.word	0x20000304

08005fac <cleanup_stdio>:
 8005fac:	6841      	ldr	r1, [r0, #4]
 8005fae:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <cleanup_stdio+0x34>)
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	d001      	beq.n	8005fbc <cleanup_stdio+0x10>
 8005fb8:	f000 fdaa 	bl	8006b10 <_fflush_r>
 8005fbc:	68a1      	ldr	r1, [r4, #8]
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <cleanup_stdio+0x38>)
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	d002      	beq.n	8005fca <cleanup_stdio+0x1e>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 fda3 	bl	8006b10 <_fflush_r>
 8005fca:	68e1      	ldr	r1, [r4, #12]
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <cleanup_stdio+0x3c>)
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d004      	beq.n	8005fdc <cleanup_stdio+0x30>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd8:	f000 bd9a 	b.w	8006b10 <_fflush_r>
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000654 	.word	0x20000654
 8005fe4:	200006bc 	.word	0x200006bc
 8005fe8:	20000724 	.word	0x20000724

08005fec <global_stdio_init.part.0>:
 8005fec:	b510      	push	{r4, lr}
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <global_stdio_init.part.0+0x30>)
 8005ff0:	4c0b      	ldr	r4, [pc, #44]	; (8006020 <global_stdio_init.part.0+0x34>)
 8005ff2:	4a0c      	ldr	r2, [pc, #48]	; (8006024 <global_stdio_init.part.0+0x38>)
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	f7ff ff94 	bl	8005f28 <std>
 8006000:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006004:	2201      	movs	r2, #1
 8006006:	2109      	movs	r1, #9
 8006008:	f7ff ff8e 	bl	8005f28 <std>
 800600c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006010:	2202      	movs	r2, #2
 8006012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006016:	2112      	movs	r1, #18
 8006018:	f7ff bf86 	b.w	8005f28 <std>
 800601c:	2000078c 	.word	0x2000078c
 8006020:	20000654 	.word	0x20000654
 8006024:	08005f95 	.word	0x08005f95

08006028 <__sfp_lock_acquire>:
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <__sfp_lock_acquire+0x8>)
 800602a:	f000 b90e 	b.w	800624a <__retarget_lock_acquire_recursive>
 800602e:	bf00      	nop
 8006030:	20000795 	.word	0x20000795

08006034 <__sfp_lock_release>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__sfp_lock_release+0x8>)
 8006036:	f000 b909 	b.w	800624c <__retarget_lock_release_recursive>
 800603a:	bf00      	nop
 800603c:	20000795 	.word	0x20000795

08006040 <__sinit>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	f7ff fff0 	bl	8006028 <__sfp_lock_acquire>
 8006048:	6a23      	ldr	r3, [r4, #32]
 800604a:	b11b      	cbz	r3, 8006054 <__sinit+0x14>
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006050:	f7ff bff0 	b.w	8006034 <__sfp_lock_release>
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <__sinit+0x28>)
 8006056:	6223      	str	r3, [r4, #32]
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <__sinit+0x2c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f5      	bne.n	800604c <__sinit+0xc>
 8006060:	f7ff ffc4 	bl	8005fec <global_stdio_init.part.0>
 8006064:	e7f2      	b.n	800604c <__sinit+0xc>
 8006066:	bf00      	nop
 8006068:	08005fad 	.word	0x08005fad
 800606c:	2000078c 	.word	0x2000078c

08006070 <_fwalk_sglue>:
 8006070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006074:	4607      	mov	r7, r0
 8006076:	4688      	mov	r8, r1
 8006078:	4614      	mov	r4, r2
 800607a:	2600      	movs	r6, #0
 800607c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006080:	f1b9 0901 	subs.w	r9, r9, #1
 8006084:	d505      	bpl.n	8006092 <_fwalk_sglue+0x22>
 8006086:	6824      	ldr	r4, [r4, #0]
 8006088:	2c00      	cmp	r4, #0
 800608a:	d1f7      	bne.n	800607c <_fwalk_sglue+0xc>
 800608c:	4630      	mov	r0, r6
 800608e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d907      	bls.n	80060a8 <_fwalk_sglue+0x38>
 8006098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800609c:	3301      	adds	r3, #1
 800609e:	d003      	beq.n	80060a8 <_fwalk_sglue+0x38>
 80060a0:	4629      	mov	r1, r5
 80060a2:	4638      	mov	r0, r7
 80060a4:	47c0      	blx	r8
 80060a6:	4306      	orrs	r6, r0
 80060a8:	3568      	adds	r5, #104	; 0x68
 80060aa:	e7e9      	b.n	8006080 <_fwalk_sglue+0x10>

080060ac <iprintf>:
 80060ac:	b40f      	push	{r0, r1, r2, r3}
 80060ae:	b507      	push	{r0, r1, r2, lr}
 80060b0:	4906      	ldr	r1, [pc, #24]	; (80060cc <iprintf+0x20>)
 80060b2:	ab04      	add	r3, sp, #16
 80060b4:	6808      	ldr	r0, [r1, #0]
 80060b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ba:	6881      	ldr	r1, [r0, #8]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f000 f9f7 	bl	80064b0 <_vfiprintf_r>
 80060c2:	b003      	add	sp, #12
 80060c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c8:	b004      	add	sp, #16
 80060ca:	4770      	bx	lr
 80060cc:	20000350 	.word	0x20000350

080060d0 <__sread>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	460c      	mov	r4, r1
 80060d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d8:	f000 f868 	bl	80061ac <_read_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	bfab      	itete	ge
 80060e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060e2:	89a3      	ldrhlt	r3, [r4, #12]
 80060e4:	181b      	addge	r3, r3, r0
 80060e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ea:	bfac      	ite	ge
 80060ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ee:	81a3      	strhlt	r3, [r4, #12]
 80060f0:	bd10      	pop	{r4, pc}

080060f2 <__swrite>:
 80060f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f6:	461f      	mov	r7, r3
 80060f8:	898b      	ldrh	r3, [r1, #12]
 80060fa:	05db      	lsls	r3, r3, #23
 80060fc:	4605      	mov	r5, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	4616      	mov	r6, r2
 8006102:	d505      	bpl.n	8006110 <__swrite+0x1e>
 8006104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006108:	2302      	movs	r3, #2
 800610a:	2200      	movs	r2, #0
 800610c:	f000 f83c 	bl	8006188 <_lseek_r>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	4632      	mov	r2, r6
 800611e:	463b      	mov	r3, r7
 8006120:	4628      	mov	r0, r5
 8006122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006126:	f000 b853 	b.w	80061d0 <_write_r>

0800612a <__sseek>:
 800612a:	b510      	push	{r4, lr}
 800612c:	460c      	mov	r4, r1
 800612e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006132:	f000 f829 	bl	8006188 <_lseek_r>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	bf15      	itete	ne
 800613c:	6560      	strne	r0, [r4, #84]	; 0x54
 800613e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006146:	81a3      	strheq	r3, [r4, #12]
 8006148:	bf18      	it	ne
 800614a:	81a3      	strhne	r3, [r4, #12]
 800614c:	bd10      	pop	{r4, pc}

0800614e <__sclose>:
 800614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006152:	f000 b809 	b.w	8006168 <_close_r>

08006156 <memset>:
 8006156:	4402      	add	r2, r0
 8006158:	4603      	mov	r3, r0
 800615a:	4293      	cmp	r3, r2
 800615c:	d100      	bne.n	8006160 <memset+0xa>
 800615e:	4770      	bx	lr
 8006160:	f803 1b01 	strb.w	r1, [r3], #1
 8006164:	e7f9      	b.n	800615a <memset+0x4>
	...

08006168 <_close_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4d06      	ldr	r5, [pc, #24]	; (8006184 <_close_r+0x1c>)
 800616c:	2300      	movs	r3, #0
 800616e:	4604      	mov	r4, r0
 8006170:	4608      	mov	r0, r1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	f7fa fc73 	bl	8000a5e <_close>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_close_r+0x1a>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_close_r+0x1a>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	20000790 	.word	0x20000790

08006188 <_lseek_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d07      	ldr	r5, [pc, #28]	; (80061a8 <_lseek_r+0x20>)
 800618c:	4604      	mov	r4, r0
 800618e:	4608      	mov	r0, r1
 8006190:	4611      	mov	r1, r2
 8006192:	2200      	movs	r2, #0
 8006194:	602a      	str	r2, [r5, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	f7fa fc88 	bl	8000aac <_lseek>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <_lseek_r+0x1e>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b103      	cbz	r3, 80061a6 <_lseek_r+0x1e>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	20000790 	.word	0x20000790

080061ac <_read_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d07      	ldr	r5, [pc, #28]	; (80061cc <_read_r+0x20>)
 80061b0:	4604      	mov	r4, r0
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	2200      	movs	r2, #0
 80061b8:	602a      	str	r2, [r5, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f7fa fc16 	bl	80009ec <_read>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_read_r+0x1e>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_read_r+0x1e>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	20000790 	.word	0x20000790

080061d0 <_write_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_write_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fa fc21 	bl	8000a26 <_write>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_write_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_write_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	20000790 	.word	0x20000790

080061f4 <__errno>:
 80061f4:	4b01      	ldr	r3, [pc, #4]	; (80061fc <__errno+0x8>)
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20000350 	.word	0x20000350

08006200 <__libc_init_array>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4d0d      	ldr	r5, [pc, #52]	; (8006238 <__libc_init_array+0x38>)
 8006204:	4c0d      	ldr	r4, [pc, #52]	; (800623c <__libc_init_array+0x3c>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	2600      	movs	r6, #0
 800620c:	42a6      	cmp	r6, r4
 800620e:	d109      	bne.n	8006224 <__libc_init_array+0x24>
 8006210:	4d0b      	ldr	r5, [pc, #44]	; (8006240 <__libc_init_array+0x40>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	; (8006244 <__libc_init_array+0x44>)
 8006214:	f000 fdce 	bl	8006db4 <_init>
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	2600      	movs	r6, #0
 800621e:	42a6      	cmp	r6, r4
 8006220:	d105      	bne.n	800622e <__libc_init_array+0x2e>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f855 3b04 	ldr.w	r3, [r5], #4
 8006228:	4798      	blx	r3
 800622a:	3601      	adds	r6, #1
 800622c:	e7ee      	b.n	800620c <__libc_init_array+0xc>
 800622e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006232:	4798      	blx	r3
 8006234:	3601      	adds	r6, #1
 8006236:	e7f2      	b.n	800621e <__libc_init_array+0x1e>
 8006238:	08007d98 	.word	0x08007d98
 800623c:	08007d98 	.word	0x08007d98
 8006240:	08007d98 	.word	0x08007d98
 8006244:	08007d9c 	.word	0x08007d9c

08006248 <__retarget_lock_init_recursive>:
 8006248:	4770      	bx	lr

0800624a <__retarget_lock_acquire_recursive>:
 800624a:	4770      	bx	lr

0800624c <__retarget_lock_release_recursive>:
 800624c:	4770      	bx	lr

0800624e <memcpy>:
 800624e:	440a      	add	r2, r1
 8006250:	4291      	cmp	r1, r2
 8006252:	f100 33ff 	add.w	r3, r0, #4294967295
 8006256:	d100      	bne.n	800625a <memcpy+0xc>
 8006258:	4770      	bx	lr
 800625a:	b510      	push	{r4, lr}
 800625c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006264:	4291      	cmp	r1, r2
 8006266:	d1f9      	bne.n	800625c <memcpy+0xe>
 8006268:	bd10      	pop	{r4, pc}
	...

0800626c <_free_r>:
 800626c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626e:	2900      	cmp	r1, #0
 8006270:	d044      	beq.n	80062fc <_free_r+0x90>
 8006272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006276:	9001      	str	r0, [sp, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f1a1 0404 	sub.w	r4, r1, #4
 800627e:	bfb8      	it	lt
 8006280:	18e4      	addlt	r4, r4, r3
 8006282:	f000 f8df 	bl	8006444 <__malloc_lock>
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <_free_r+0x94>)
 8006288:	9801      	ldr	r0, [sp, #4]
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	b933      	cbnz	r3, 800629c <_free_r+0x30>
 800628e:	6063      	str	r3, [r4, #4]
 8006290:	6014      	str	r4, [r2, #0]
 8006292:	b003      	add	sp, #12
 8006294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006298:	f000 b8da 	b.w	8006450 <__malloc_unlock>
 800629c:	42a3      	cmp	r3, r4
 800629e:	d908      	bls.n	80062b2 <_free_r+0x46>
 80062a0:	6825      	ldr	r5, [r4, #0]
 80062a2:	1961      	adds	r1, r4, r5
 80062a4:	428b      	cmp	r3, r1
 80062a6:	bf01      	itttt	eq
 80062a8:	6819      	ldreq	r1, [r3, #0]
 80062aa:	685b      	ldreq	r3, [r3, #4]
 80062ac:	1949      	addeq	r1, r1, r5
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	e7ed      	b.n	800628e <_free_r+0x22>
 80062b2:	461a      	mov	r2, r3
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b10b      	cbz	r3, 80062bc <_free_r+0x50>
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d9fa      	bls.n	80062b2 <_free_r+0x46>
 80062bc:	6811      	ldr	r1, [r2, #0]
 80062be:	1855      	adds	r5, r2, r1
 80062c0:	42a5      	cmp	r5, r4
 80062c2:	d10b      	bne.n	80062dc <_free_r+0x70>
 80062c4:	6824      	ldr	r4, [r4, #0]
 80062c6:	4421      	add	r1, r4
 80062c8:	1854      	adds	r4, r2, r1
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	d1e0      	bne.n	8006292 <_free_r+0x26>
 80062d0:	681c      	ldr	r4, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	6053      	str	r3, [r2, #4]
 80062d6:	440c      	add	r4, r1
 80062d8:	6014      	str	r4, [r2, #0]
 80062da:	e7da      	b.n	8006292 <_free_r+0x26>
 80062dc:	d902      	bls.n	80062e4 <_free_r+0x78>
 80062de:	230c      	movs	r3, #12
 80062e0:	6003      	str	r3, [r0, #0]
 80062e2:	e7d6      	b.n	8006292 <_free_r+0x26>
 80062e4:	6825      	ldr	r5, [r4, #0]
 80062e6:	1961      	adds	r1, r4, r5
 80062e8:	428b      	cmp	r3, r1
 80062ea:	bf04      	itt	eq
 80062ec:	6819      	ldreq	r1, [r3, #0]
 80062ee:	685b      	ldreq	r3, [r3, #4]
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	bf04      	itt	eq
 80062f4:	1949      	addeq	r1, r1, r5
 80062f6:	6021      	streq	r1, [r4, #0]
 80062f8:	6054      	str	r4, [r2, #4]
 80062fa:	e7ca      	b.n	8006292 <_free_r+0x26>
 80062fc:	b003      	add	sp, #12
 80062fe:	bd30      	pop	{r4, r5, pc}
 8006300:	20000798 	.word	0x20000798

08006304 <sbrk_aligned>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	4e0e      	ldr	r6, [pc, #56]	; (8006340 <sbrk_aligned+0x3c>)
 8006308:	460c      	mov	r4, r1
 800630a:	6831      	ldr	r1, [r6, #0]
 800630c:	4605      	mov	r5, r0
 800630e:	b911      	cbnz	r1, 8006316 <sbrk_aligned+0x12>
 8006310:	f000 fcbc 	bl	8006c8c <_sbrk_r>
 8006314:	6030      	str	r0, [r6, #0]
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fcb7 	bl	8006c8c <_sbrk_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	d00a      	beq.n	8006338 <sbrk_aligned+0x34>
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d007      	beq.n	800633c <sbrk_aligned+0x38>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4628      	mov	r0, r5
 8006330:	f000 fcac 	bl	8006c8c <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d101      	bne.n	800633c <sbrk_aligned+0x38>
 8006338:	f04f 34ff 	mov.w	r4, #4294967295
 800633c:	4620      	mov	r0, r4
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	2000079c 	.word	0x2000079c

08006344 <_malloc_r>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	1ccd      	adds	r5, r1, #3
 800634a:	f025 0503 	bic.w	r5, r5, #3
 800634e:	3508      	adds	r5, #8
 8006350:	2d0c      	cmp	r5, #12
 8006352:	bf38      	it	cc
 8006354:	250c      	movcc	r5, #12
 8006356:	2d00      	cmp	r5, #0
 8006358:	4607      	mov	r7, r0
 800635a:	db01      	blt.n	8006360 <_malloc_r+0x1c>
 800635c:	42a9      	cmp	r1, r5
 800635e:	d905      	bls.n	800636c <_malloc_r+0x28>
 8006360:	230c      	movs	r3, #12
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	2600      	movs	r6, #0
 8006366:	4630      	mov	r0, r6
 8006368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006440 <_malloc_r+0xfc>
 8006370:	f000 f868 	bl	8006444 <__malloc_lock>
 8006374:	f8d8 3000 	ldr.w	r3, [r8]
 8006378:	461c      	mov	r4, r3
 800637a:	bb5c      	cbnz	r4, 80063d4 <_malloc_r+0x90>
 800637c:	4629      	mov	r1, r5
 800637e:	4638      	mov	r0, r7
 8006380:	f7ff ffc0 	bl	8006304 <sbrk_aligned>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	4604      	mov	r4, r0
 8006388:	d155      	bne.n	8006436 <_malloc_r+0xf2>
 800638a:	f8d8 4000 	ldr.w	r4, [r8]
 800638e:	4626      	mov	r6, r4
 8006390:	2e00      	cmp	r6, #0
 8006392:	d145      	bne.n	8006420 <_malloc_r+0xdc>
 8006394:	2c00      	cmp	r4, #0
 8006396:	d048      	beq.n	800642a <_malloc_r+0xe6>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	4631      	mov	r1, r6
 800639c:	4638      	mov	r0, r7
 800639e:	eb04 0903 	add.w	r9, r4, r3
 80063a2:	f000 fc73 	bl	8006c8c <_sbrk_r>
 80063a6:	4581      	cmp	r9, r0
 80063a8:	d13f      	bne.n	800642a <_malloc_r+0xe6>
 80063aa:	6821      	ldr	r1, [r4, #0]
 80063ac:	1a6d      	subs	r5, r5, r1
 80063ae:	4629      	mov	r1, r5
 80063b0:	4638      	mov	r0, r7
 80063b2:	f7ff ffa7 	bl	8006304 <sbrk_aligned>
 80063b6:	3001      	adds	r0, #1
 80063b8:	d037      	beq.n	800642a <_malloc_r+0xe6>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	442b      	add	r3, r5
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	f8d8 3000 	ldr.w	r3, [r8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d038      	beq.n	800643a <_malloc_r+0xf6>
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	42a2      	cmp	r2, r4
 80063cc:	d12b      	bne.n	8006426 <_malloc_r+0xe2>
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e00f      	b.n	80063f4 <_malloc_r+0xb0>
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	1b52      	subs	r2, r2, r5
 80063d8:	d41f      	bmi.n	800641a <_malloc_r+0xd6>
 80063da:	2a0b      	cmp	r2, #11
 80063dc:	d917      	bls.n	800640e <_malloc_r+0xca>
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	6025      	str	r5, [r4, #0]
 80063e4:	bf18      	it	ne
 80063e6:	6059      	strne	r1, [r3, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	bf08      	it	eq
 80063ec:	f8c8 1000 	streq.w	r1, [r8]
 80063f0:	5162      	str	r2, [r4, r5]
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	4638      	mov	r0, r7
 80063f6:	f104 060b 	add.w	r6, r4, #11
 80063fa:	f000 f829 	bl	8006450 <__malloc_unlock>
 80063fe:	f026 0607 	bic.w	r6, r6, #7
 8006402:	1d23      	adds	r3, r4, #4
 8006404:	1af2      	subs	r2, r6, r3
 8006406:	d0ae      	beq.n	8006366 <_malloc_r+0x22>
 8006408:	1b9b      	subs	r3, r3, r6
 800640a:	50a3      	str	r3, [r4, r2]
 800640c:	e7ab      	b.n	8006366 <_malloc_r+0x22>
 800640e:	42a3      	cmp	r3, r4
 8006410:	6862      	ldr	r2, [r4, #4]
 8006412:	d1dd      	bne.n	80063d0 <_malloc_r+0x8c>
 8006414:	f8c8 2000 	str.w	r2, [r8]
 8006418:	e7ec      	b.n	80063f4 <_malloc_r+0xb0>
 800641a:	4623      	mov	r3, r4
 800641c:	6864      	ldr	r4, [r4, #4]
 800641e:	e7ac      	b.n	800637a <_malloc_r+0x36>
 8006420:	4634      	mov	r4, r6
 8006422:	6876      	ldr	r6, [r6, #4]
 8006424:	e7b4      	b.n	8006390 <_malloc_r+0x4c>
 8006426:	4613      	mov	r3, r2
 8006428:	e7cc      	b.n	80063c4 <_malloc_r+0x80>
 800642a:	230c      	movs	r3, #12
 800642c:	603b      	str	r3, [r7, #0]
 800642e:	4638      	mov	r0, r7
 8006430:	f000 f80e 	bl	8006450 <__malloc_unlock>
 8006434:	e797      	b.n	8006366 <_malloc_r+0x22>
 8006436:	6025      	str	r5, [r4, #0]
 8006438:	e7dc      	b.n	80063f4 <_malloc_r+0xb0>
 800643a:	605b      	str	r3, [r3, #4]
 800643c:	deff      	udf	#255	; 0xff
 800643e:	bf00      	nop
 8006440:	20000798 	.word	0x20000798

08006444 <__malloc_lock>:
 8006444:	4801      	ldr	r0, [pc, #4]	; (800644c <__malloc_lock+0x8>)
 8006446:	f7ff bf00 	b.w	800624a <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	20000794 	.word	0x20000794

08006450 <__malloc_unlock>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__malloc_unlock+0x8>)
 8006452:	f7ff befb 	b.w	800624c <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	20000794 	.word	0x20000794

0800645c <__sfputc_r>:
 800645c:	6893      	ldr	r3, [r2, #8]
 800645e:	3b01      	subs	r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	b410      	push	{r4}
 8006464:	6093      	str	r3, [r2, #8]
 8006466:	da08      	bge.n	800647a <__sfputc_r+0x1e>
 8006468:	6994      	ldr	r4, [r2, #24]
 800646a:	42a3      	cmp	r3, r4
 800646c:	db01      	blt.n	8006472 <__sfputc_r+0x16>
 800646e:	290a      	cmp	r1, #10
 8006470:	d103      	bne.n	800647a <__sfputc_r+0x1e>
 8006472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006476:	f000 bb73 	b.w	8006b60 <__swbuf_r>
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	1c58      	adds	r0, r3, #1
 800647e:	6010      	str	r0, [r2, #0]
 8006480:	7019      	strb	r1, [r3, #0]
 8006482:	4608      	mov	r0, r1
 8006484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006488:	4770      	bx	lr

0800648a <__sfputs_r>:
 800648a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648c:	4606      	mov	r6, r0
 800648e:	460f      	mov	r7, r1
 8006490:	4614      	mov	r4, r2
 8006492:	18d5      	adds	r5, r2, r3
 8006494:	42ac      	cmp	r4, r5
 8006496:	d101      	bne.n	800649c <__sfputs_r+0x12>
 8006498:	2000      	movs	r0, #0
 800649a:	e007      	b.n	80064ac <__sfputs_r+0x22>
 800649c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a0:	463a      	mov	r2, r7
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff ffda 	bl	800645c <__sfputc_r>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d1f3      	bne.n	8006494 <__sfputs_r+0xa>
 80064ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064b0 <_vfiprintf_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	460d      	mov	r5, r1
 80064b6:	b09d      	sub	sp, #116	; 0x74
 80064b8:	4614      	mov	r4, r2
 80064ba:	4698      	mov	r8, r3
 80064bc:	4606      	mov	r6, r0
 80064be:	b118      	cbz	r0, 80064c8 <_vfiprintf_r+0x18>
 80064c0:	6a03      	ldr	r3, [r0, #32]
 80064c2:	b90b      	cbnz	r3, 80064c8 <_vfiprintf_r+0x18>
 80064c4:	f7ff fdbc 	bl	8006040 <__sinit>
 80064c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ca:	07d9      	lsls	r1, r3, #31
 80064cc:	d405      	bmi.n	80064da <_vfiprintf_r+0x2a>
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	059a      	lsls	r2, r3, #22
 80064d2:	d402      	bmi.n	80064da <_vfiprintf_r+0x2a>
 80064d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064d6:	f7ff feb8 	bl	800624a <__retarget_lock_acquire_recursive>
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	071b      	lsls	r3, r3, #28
 80064de:	d501      	bpl.n	80064e4 <_vfiprintf_r+0x34>
 80064e0:	692b      	ldr	r3, [r5, #16]
 80064e2:	b99b      	cbnz	r3, 800650c <_vfiprintf_r+0x5c>
 80064e4:	4629      	mov	r1, r5
 80064e6:	4630      	mov	r0, r6
 80064e8:	f000 fb78 	bl	8006bdc <__swsetup_r>
 80064ec:	b170      	cbz	r0, 800650c <_vfiprintf_r+0x5c>
 80064ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064f0:	07dc      	lsls	r4, r3, #31
 80064f2:	d504      	bpl.n	80064fe <_vfiprintf_r+0x4e>
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	b01d      	add	sp, #116	; 0x74
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fe:	89ab      	ldrh	r3, [r5, #12]
 8006500:	0598      	lsls	r0, r3, #22
 8006502:	d4f7      	bmi.n	80064f4 <_vfiprintf_r+0x44>
 8006504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006506:	f7ff fea1 	bl	800624c <__retarget_lock_release_recursive>
 800650a:	e7f3      	b.n	80064f4 <_vfiprintf_r+0x44>
 800650c:	2300      	movs	r3, #0
 800650e:	9309      	str	r3, [sp, #36]	; 0x24
 8006510:	2320      	movs	r3, #32
 8006512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006516:	f8cd 800c 	str.w	r8, [sp, #12]
 800651a:	2330      	movs	r3, #48	; 0x30
 800651c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80066d0 <_vfiprintf_r+0x220>
 8006520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006524:	f04f 0901 	mov.w	r9, #1
 8006528:	4623      	mov	r3, r4
 800652a:	469a      	mov	sl, r3
 800652c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006530:	b10a      	cbz	r2, 8006536 <_vfiprintf_r+0x86>
 8006532:	2a25      	cmp	r2, #37	; 0x25
 8006534:	d1f9      	bne.n	800652a <_vfiprintf_r+0x7a>
 8006536:	ebba 0b04 	subs.w	fp, sl, r4
 800653a:	d00b      	beq.n	8006554 <_vfiprintf_r+0xa4>
 800653c:	465b      	mov	r3, fp
 800653e:	4622      	mov	r2, r4
 8006540:	4629      	mov	r1, r5
 8006542:	4630      	mov	r0, r6
 8006544:	f7ff ffa1 	bl	800648a <__sfputs_r>
 8006548:	3001      	adds	r0, #1
 800654a:	f000 80a9 	beq.w	80066a0 <_vfiprintf_r+0x1f0>
 800654e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006550:	445a      	add	r2, fp
 8006552:	9209      	str	r2, [sp, #36]	; 0x24
 8006554:	f89a 3000 	ldrb.w	r3, [sl]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80a1 	beq.w	80066a0 <_vfiprintf_r+0x1f0>
 800655e:	2300      	movs	r3, #0
 8006560:	f04f 32ff 	mov.w	r2, #4294967295
 8006564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006568:	f10a 0a01 	add.w	sl, sl, #1
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006574:	931a      	str	r3, [sp, #104]	; 0x68
 8006576:	4654      	mov	r4, sl
 8006578:	2205      	movs	r2, #5
 800657a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657e:	4854      	ldr	r0, [pc, #336]	; (80066d0 <_vfiprintf_r+0x220>)
 8006580:	f7f9 fe26 	bl	80001d0 <memchr>
 8006584:	9a04      	ldr	r2, [sp, #16]
 8006586:	b9d8      	cbnz	r0, 80065c0 <_vfiprintf_r+0x110>
 8006588:	06d1      	lsls	r1, r2, #27
 800658a:	bf44      	itt	mi
 800658c:	2320      	movmi	r3, #32
 800658e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006592:	0713      	lsls	r3, r2, #28
 8006594:	bf44      	itt	mi
 8006596:	232b      	movmi	r3, #43	; 0x2b
 8006598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659c:	f89a 3000 	ldrb.w	r3, [sl]
 80065a0:	2b2a      	cmp	r3, #42	; 0x2a
 80065a2:	d015      	beq.n	80065d0 <_vfiprintf_r+0x120>
 80065a4:	9a07      	ldr	r2, [sp, #28]
 80065a6:	4654      	mov	r4, sl
 80065a8:	2000      	movs	r0, #0
 80065aa:	f04f 0c0a 	mov.w	ip, #10
 80065ae:	4621      	mov	r1, r4
 80065b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b4:	3b30      	subs	r3, #48	; 0x30
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d94d      	bls.n	8006656 <_vfiprintf_r+0x1a6>
 80065ba:	b1b0      	cbz	r0, 80065ea <_vfiprintf_r+0x13a>
 80065bc:	9207      	str	r2, [sp, #28]
 80065be:	e014      	b.n	80065ea <_vfiprintf_r+0x13a>
 80065c0:	eba0 0308 	sub.w	r3, r0, r8
 80065c4:	fa09 f303 	lsl.w	r3, r9, r3
 80065c8:	4313      	orrs	r3, r2
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	46a2      	mov	sl, r4
 80065ce:	e7d2      	b.n	8006576 <_vfiprintf_r+0xc6>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	1d19      	adds	r1, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	9103      	str	r1, [sp, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bfbb      	ittet	lt
 80065dc:	425b      	neglt	r3, r3
 80065de:	f042 0202 	orrlt.w	r2, r2, #2
 80065e2:	9307      	strge	r3, [sp, #28]
 80065e4:	9307      	strlt	r3, [sp, #28]
 80065e6:	bfb8      	it	lt
 80065e8:	9204      	strlt	r2, [sp, #16]
 80065ea:	7823      	ldrb	r3, [r4, #0]
 80065ec:	2b2e      	cmp	r3, #46	; 0x2e
 80065ee:	d10c      	bne.n	800660a <_vfiprintf_r+0x15a>
 80065f0:	7863      	ldrb	r3, [r4, #1]
 80065f2:	2b2a      	cmp	r3, #42	; 0x2a
 80065f4:	d134      	bne.n	8006660 <_vfiprintf_r+0x1b0>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	1d1a      	adds	r2, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	9203      	str	r2, [sp, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfb8      	it	lt
 8006602:	f04f 33ff 	movlt.w	r3, #4294967295
 8006606:	3402      	adds	r4, #2
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80066e0 <_vfiprintf_r+0x230>
 800660e:	7821      	ldrb	r1, [r4, #0]
 8006610:	2203      	movs	r2, #3
 8006612:	4650      	mov	r0, sl
 8006614:	f7f9 fddc 	bl	80001d0 <memchr>
 8006618:	b138      	cbz	r0, 800662a <_vfiprintf_r+0x17a>
 800661a:	9b04      	ldr	r3, [sp, #16]
 800661c:	eba0 000a 	sub.w	r0, r0, sl
 8006620:	2240      	movs	r2, #64	; 0x40
 8006622:	4082      	lsls	r2, r0
 8006624:	4313      	orrs	r3, r2
 8006626:	3401      	adds	r4, #1
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662e:	4829      	ldr	r0, [pc, #164]	; (80066d4 <_vfiprintf_r+0x224>)
 8006630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006634:	2206      	movs	r2, #6
 8006636:	f7f9 fdcb 	bl	80001d0 <memchr>
 800663a:	2800      	cmp	r0, #0
 800663c:	d03f      	beq.n	80066be <_vfiprintf_r+0x20e>
 800663e:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <_vfiprintf_r+0x228>)
 8006640:	bb1b      	cbnz	r3, 800668a <_vfiprintf_r+0x1da>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	3307      	adds	r3, #7
 8006646:	f023 0307 	bic.w	r3, r3, #7
 800664a:	3308      	adds	r3, #8
 800664c:	9303      	str	r3, [sp, #12]
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	443b      	add	r3, r7
 8006652:	9309      	str	r3, [sp, #36]	; 0x24
 8006654:	e768      	b.n	8006528 <_vfiprintf_r+0x78>
 8006656:	fb0c 3202 	mla	r2, ip, r2, r3
 800665a:	460c      	mov	r4, r1
 800665c:	2001      	movs	r0, #1
 800665e:	e7a6      	b.n	80065ae <_vfiprintf_r+0xfe>
 8006660:	2300      	movs	r3, #0
 8006662:	3401      	adds	r4, #1
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	4619      	mov	r1, r3
 8006668:	f04f 0c0a 	mov.w	ip, #10
 800666c:	4620      	mov	r0, r4
 800666e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006672:	3a30      	subs	r2, #48	; 0x30
 8006674:	2a09      	cmp	r2, #9
 8006676:	d903      	bls.n	8006680 <_vfiprintf_r+0x1d0>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0c6      	beq.n	800660a <_vfiprintf_r+0x15a>
 800667c:	9105      	str	r1, [sp, #20]
 800667e:	e7c4      	b.n	800660a <_vfiprintf_r+0x15a>
 8006680:	fb0c 2101 	mla	r1, ip, r1, r2
 8006684:	4604      	mov	r4, r0
 8006686:	2301      	movs	r3, #1
 8006688:	e7f0      	b.n	800666c <_vfiprintf_r+0x1bc>
 800668a:	ab03      	add	r3, sp, #12
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	462a      	mov	r2, r5
 8006690:	4b12      	ldr	r3, [pc, #72]	; (80066dc <_vfiprintf_r+0x22c>)
 8006692:	a904      	add	r1, sp, #16
 8006694:	4630      	mov	r0, r6
 8006696:	f3af 8000 	nop.w
 800669a:	4607      	mov	r7, r0
 800669c:	1c78      	adds	r0, r7, #1
 800669e:	d1d6      	bne.n	800664e <_vfiprintf_r+0x19e>
 80066a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a2:	07d9      	lsls	r1, r3, #31
 80066a4:	d405      	bmi.n	80066b2 <_vfiprintf_r+0x202>
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	059a      	lsls	r2, r3, #22
 80066aa:	d402      	bmi.n	80066b2 <_vfiprintf_r+0x202>
 80066ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ae:	f7ff fdcd 	bl	800624c <__retarget_lock_release_recursive>
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	065b      	lsls	r3, r3, #25
 80066b6:	f53f af1d 	bmi.w	80064f4 <_vfiprintf_r+0x44>
 80066ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066bc:	e71c      	b.n	80064f8 <_vfiprintf_r+0x48>
 80066be:	ab03      	add	r3, sp, #12
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	462a      	mov	r2, r5
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <_vfiprintf_r+0x22c>)
 80066c6:	a904      	add	r1, sp, #16
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 f879 	bl	80067c0 <_printf_i>
 80066ce:	e7e4      	b.n	800669a <_vfiprintf_r+0x1ea>
 80066d0:	08007d5a 	.word	0x08007d5a
 80066d4:	08007d64 	.word	0x08007d64
 80066d8:	00000000 	.word	0x00000000
 80066dc:	0800648b 	.word	0x0800648b
 80066e0:	08007d60 	.word	0x08007d60

080066e4 <_printf_common>:
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	4616      	mov	r6, r2
 80066ea:	4699      	mov	r9, r3
 80066ec:	688a      	ldr	r2, [r1, #8]
 80066ee:	690b      	ldr	r3, [r1, #16]
 80066f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066f4:	4293      	cmp	r3, r2
 80066f6:	bfb8      	it	lt
 80066f8:	4613      	movlt	r3, r2
 80066fa:	6033      	str	r3, [r6, #0]
 80066fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006700:	4607      	mov	r7, r0
 8006702:	460c      	mov	r4, r1
 8006704:	b10a      	cbz	r2, 800670a <_printf_common+0x26>
 8006706:	3301      	adds	r3, #1
 8006708:	6033      	str	r3, [r6, #0]
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	0699      	lsls	r1, r3, #26
 800670e:	bf42      	ittt	mi
 8006710:	6833      	ldrmi	r3, [r6, #0]
 8006712:	3302      	addmi	r3, #2
 8006714:	6033      	strmi	r3, [r6, #0]
 8006716:	6825      	ldr	r5, [r4, #0]
 8006718:	f015 0506 	ands.w	r5, r5, #6
 800671c:	d106      	bne.n	800672c <_printf_common+0x48>
 800671e:	f104 0a19 	add.w	sl, r4, #25
 8006722:	68e3      	ldr	r3, [r4, #12]
 8006724:	6832      	ldr	r2, [r6, #0]
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	42ab      	cmp	r3, r5
 800672a:	dc26      	bgt.n	800677a <_printf_common+0x96>
 800672c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006730:	1e13      	subs	r3, r2, #0
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	bf18      	it	ne
 8006736:	2301      	movne	r3, #1
 8006738:	0692      	lsls	r2, r2, #26
 800673a:	d42b      	bmi.n	8006794 <_printf_common+0xb0>
 800673c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006740:	4649      	mov	r1, r9
 8006742:	4638      	mov	r0, r7
 8006744:	47c0      	blx	r8
 8006746:	3001      	adds	r0, #1
 8006748:	d01e      	beq.n	8006788 <_printf_common+0xa4>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	6922      	ldr	r2, [r4, #16]
 800674e:	f003 0306 	and.w	r3, r3, #6
 8006752:	2b04      	cmp	r3, #4
 8006754:	bf02      	ittt	eq
 8006756:	68e5      	ldreq	r5, [r4, #12]
 8006758:	6833      	ldreq	r3, [r6, #0]
 800675a:	1aed      	subeq	r5, r5, r3
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	bf0c      	ite	eq
 8006760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006764:	2500      	movne	r5, #0
 8006766:	4293      	cmp	r3, r2
 8006768:	bfc4      	itt	gt
 800676a:	1a9b      	subgt	r3, r3, r2
 800676c:	18ed      	addgt	r5, r5, r3
 800676e:	2600      	movs	r6, #0
 8006770:	341a      	adds	r4, #26
 8006772:	42b5      	cmp	r5, r6
 8006774:	d11a      	bne.n	80067ac <_printf_common+0xc8>
 8006776:	2000      	movs	r0, #0
 8006778:	e008      	b.n	800678c <_printf_common+0xa8>
 800677a:	2301      	movs	r3, #1
 800677c:	4652      	mov	r2, sl
 800677e:	4649      	mov	r1, r9
 8006780:	4638      	mov	r0, r7
 8006782:	47c0      	blx	r8
 8006784:	3001      	adds	r0, #1
 8006786:	d103      	bne.n	8006790 <_printf_common+0xac>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006790:	3501      	adds	r5, #1
 8006792:	e7c6      	b.n	8006722 <_printf_common+0x3e>
 8006794:	18e1      	adds	r1, r4, r3
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	2030      	movs	r0, #48	; 0x30
 800679a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800679e:	4422      	add	r2, r4
 80067a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067a8:	3302      	adds	r3, #2
 80067aa:	e7c7      	b.n	800673c <_printf_common+0x58>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4622      	mov	r2, r4
 80067b0:	4649      	mov	r1, r9
 80067b2:	4638      	mov	r0, r7
 80067b4:	47c0      	blx	r8
 80067b6:	3001      	adds	r0, #1
 80067b8:	d0e6      	beq.n	8006788 <_printf_common+0xa4>
 80067ba:	3601      	adds	r6, #1
 80067bc:	e7d9      	b.n	8006772 <_printf_common+0x8e>
	...

080067c0 <_printf_i>:
 80067c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	7e0f      	ldrb	r7, [r1, #24]
 80067c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067c8:	2f78      	cmp	r7, #120	; 0x78
 80067ca:	4691      	mov	r9, r2
 80067cc:	4680      	mov	r8, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	469a      	mov	sl, r3
 80067d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067d6:	d807      	bhi.n	80067e8 <_printf_i+0x28>
 80067d8:	2f62      	cmp	r7, #98	; 0x62
 80067da:	d80a      	bhi.n	80067f2 <_printf_i+0x32>
 80067dc:	2f00      	cmp	r7, #0
 80067de:	f000 80d4 	beq.w	800698a <_printf_i+0x1ca>
 80067e2:	2f58      	cmp	r7, #88	; 0x58
 80067e4:	f000 80c0 	beq.w	8006968 <_printf_i+0x1a8>
 80067e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067f0:	e03a      	b.n	8006868 <_printf_i+0xa8>
 80067f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067f6:	2b15      	cmp	r3, #21
 80067f8:	d8f6      	bhi.n	80067e8 <_printf_i+0x28>
 80067fa:	a101      	add	r1, pc, #4	; (adr r1, 8006800 <_printf_i+0x40>)
 80067fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006800:	08006859 	.word	0x08006859
 8006804:	0800686d 	.word	0x0800686d
 8006808:	080067e9 	.word	0x080067e9
 800680c:	080067e9 	.word	0x080067e9
 8006810:	080067e9 	.word	0x080067e9
 8006814:	080067e9 	.word	0x080067e9
 8006818:	0800686d 	.word	0x0800686d
 800681c:	080067e9 	.word	0x080067e9
 8006820:	080067e9 	.word	0x080067e9
 8006824:	080067e9 	.word	0x080067e9
 8006828:	080067e9 	.word	0x080067e9
 800682c:	08006971 	.word	0x08006971
 8006830:	08006899 	.word	0x08006899
 8006834:	0800692b 	.word	0x0800692b
 8006838:	080067e9 	.word	0x080067e9
 800683c:	080067e9 	.word	0x080067e9
 8006840:	08006993 	.word	0x08006993
 8006844:	080067e9 	.word	0x080067e9
 8006848:	08006899 	.word	0x08006899
 800684c:	080067e9 	.word	0x080067e9
 8006850:	080067e9 	.word	0x080067e9
 8006854:	08006933 	.word	0x08006933
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	1d1a      	adds	r2, r3, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	602a      	str	r2, [r5, #0]
 8006860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006868:	2301      	movs	r3, #1
 800686a:	e09f      	b.n	80069ac <_printf_i+0x1ec>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	682b      	ldr	r3, [r5, #0]
 8006870:	0607      	lsls	r7, r0, #24
 8006872:	f103 0104 	add.w	r1, r3, #4
 8006876:	6029      	str	r1, [r5, #0]
 8006878:	d501      	bpl.n	800687e <_printf_i+0xbe>
 800687a:	681e      	ldr	r6, [r3, #0]
 800687c:	e003      	b.n	8006886 <_printf_i+0xc6>
 800687e:	0646      	lsls	r6, r0, #25
 8006880:	d5fb      	bpl.n	800687a <_printf_i+0xba>
 8006882:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006886:	2e00      	cmp	r6, #0
 8006888:	da03      	bge.n	8006892 <_printf_i+0xd2>
 800688a:	232d      	movs	r3, #45	; 0x2d
 800688c:	4276      	negs	r6, r6
 800688e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006892:	485a      	ldr	r0, [pc, #360]	; (80069fc <_printf_i+0x23c>)
 8006894:	230a      	movs	r3, #10
 8006896:	e012      	b.n	80068be <_printf_i+0xfe>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	6820      	ldr	r0, [r4, #0]
 800689c:	1d19      	adds	r1, r3, #4
 800689e:	6029      	str	r1, [r5, #0]
 80068a0:	0605      	lsls	r5, r0, #24
 80068a2:	d501      	bpl.n	80068a8 <_printf_i+0xe8>
 80068a4:	681e      	ldr	r6, [r3, #0]
 80068a6:	e002      	b.n	80068ae <_printf_i+0xee>
 80068a8:	0641      	lsls	r1, r0, #25
 80068aa:	d5fb      	bpl.n	80068a4 <_printf_i+0xe4>
 80068ac:	881e      	ldrh	r6, [r3, #0]
 80068ae:	4853      	ldr	r0, [pc, #332]	; (80069fc <_printf_i+0x23c>)
 80068b0:	2f6f      	cmp	r7, #111	; 0x6f
 80068b2:	bf0c      	ite	eq
 80068b4:	2308      	moveq	r3, #8
 80068b6:	230a      	movne	r3, #10
 80068b8:	2100      	movs	r1, #0
 80068ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068be:	6865      	ldr	r5, [r4, #4]
 80068c0:	60a5      	str	r5, [r4, #8]
 80068c2:	2d00      	cmp	r5, #0
 80068c4:	bfa2      	ittt	ge
 80068c6:	6821      	ldrge	r1, [r4, #0]
 80068c8:	f021 0104 	bicge.w	r1, r1, #4
 80068cc:	6021      	strge	r1, [r4, #0]
 80068ce:	b90e      	cbnz	r6, 80068d4 <_printf_i+0x114>
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	d04b      	beq.n	800696c <_printf_i+0x1ac>
 80068d4:	4615      	mov	r5, r2
 80068d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80068da:	fb03 6711 	mls	r7, r3, r1, r6
 80068de:	5dc7      	ldrb	r7, [r0, r7]
 80068e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068e4:	4637      	mov	r7, r6
 80068e6:	42bb      	cmp	r3, r7
 80068e8:	460e      	mov	r6, r1
 80068ea:	d9f4      	bls.n	80068d6 <_printf_i+0x116>
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d10b      	bne.n	8006908 <_printf_i+0x148>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	07de      	lsls	r6, r3, #31
 80068f4:	d508      	bpl.n	8006908 <_printf_i+0x148>
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	6861      	ldr	r1, [r4, #4]
 80068fa:	4299      	cmp	r1, r3
 80068fc:	bfde      	ittt	le
 80068fe:	2330      	movle	r3, #48	; 0x30
 8006900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006904:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006908:	1b52      	subs	r2, r2, r5
 800690a:	6122      	str	r2, [r4, #16]
 800690c:	f8cd a000 	str.w	sl, [sp]
 8006910:	464b      	mov	r3, r9
 8006912:	aa03      	add	r2, sp, #12
 8006914:	4621      	mov	r1, r4
 8006916:	4640      	mov	r0, r8
 8006918:	f7ff fee4 	bl	80066e4 <_printf_common>
 800691c:	3001      	adds	r0, #1
 800691e:	d14a      	bne.n	80069b6 <_printf_i+0x1f6>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	b004      	add	sp, #16
 8006926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	f043 0320 	orr.w	r3, r3, #32
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	4833      	ldr	r0, [pc, #204]	; (8006a00 <_printf_i+0x240>)
 8006934:	2778      	movs	r7, #120	; 0x78
 8006936:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	6829      	ldr	r1, [r5, #0]
 800693e:	061f      	lsls	r7, r3, #24
 8006940:	f851 6b04 	ldr.w	r6, [r1], #4
 8006944:	d402      	bmi.n	800694c <_printf_i+0x18c>
 8006946:	065f      	lsls	r7, r3, #25
 8006948:	bf48      	it	mi
 800694a:	b2b6      	uxthmi	r6, r6
 800694c:	07df      	lsls	r7, r3, #31
 800694e:	bf48      	it	mi
 8006950:	f043 0320 	orrmi.w	r3, r3, #32
 8006954:	6029      	str	r1, [r5, #0]
 8006956:	bf48      	it	mi
 8006958:	6023      	strmi	r3, [r4, #0]
 800695a:	b91e      	cbnz	r6, 8006964 <_printf_i+0x1a4>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	f023 0320 	bic.w	r3, r3, #32
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	2310      	movs	r3, #16
 8006966:	e7a7      	b.n	80068b8 <_printf_i+0xf8>
 8006968:	4824      	ldr	r0, [pc, #144]	; (80069fc <_printf_i+0x23c>)
 800696a:	e7e4      	b.n	8006936 <_printf_i+0x176>
 800696c:	4615      	mov	r5, r2
 800696e:	e7bd      	b.n	80068ec <_printf_i+0x12c>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	6826      	ldr	r6, [r4, #0]
 8006974:	6961      	ldr	r1, [r4, #20]
 8006976:	1d18      	adds	r0, r3, #4
 8006978:	6028      	str	r0, [r5, #0]
 800697a:	0635      	lsls	r5, r6, #24
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	d501      	bpl.n	8006984 <_printf_i+0x1c4>
 8006980:	6019      	str	r1, [r3, #0]
 8006982:	e002      	b.n	800698a <_printf_i+0x1ca>
 8006984:	0670      	lsls	r0, r6, #25
 8006986:	d5fb      	bpl.n	8006980 <_printf_i+0x1c0>
 8006988:	8019      	strh	r1, [r3, #0]
 800698a:	2300      	movs	r3, #0
 800698c:	6123      	str	r3, [r4, #16]
 800698e:	4615      	mov	r5, r2
 8006990:	e7bc      	b.n	800690c <_printf_i+0x14c>
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	1d1a      	adds	r2, r3, #4
 8006996:	602a      	str	r2, [r5, #0]
 8006998:	681d      	ldr	r5, [r3, #0]
 800699a:	6862      	ldr	r2, [r4, #4]
 800699c:	2100      	movs	r1, #0
 800699e:	4628      	mov	r0, r5
 80069a0:	f7f9 fc16 	bl	80001d0 <memchr>
 80069a4:	b108      	cbz	r0, 80069aa <_printf_i+0x1ea>
 80069a6:	1b40      	subs	r0, r0, r5
 80069a8:	6060      	str	r0, [r4, #4]
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	2300      	movs	r3, #0
 80069b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b4:	e7aa      	b.n	800690c <_printf_i+0x14c>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	462a      	mov	r2, r5
 80069ba:	4649      	mov	r1, r9
 80069bc:	4640      	mov	r0, r8
 80069be:	47d0      	blx	sl
 80069c0:	3001      	adds	r0, #1
 80069c2:	d0ad      	beq.n	8006920 <_printf_i+0x160>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	079b      	lsls	r3, r3, #30
 80069c8:	d413      	bmi.n	80069f2 <_printf_i+0x232>
 80069ca:	68e0      	ldr	r0, [r4, #12]
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	4298      	cmp	r0, r3
 80069d0:	bfb8      	it	lt
 80069d2:	4618      	movlt	r0, r3
 80069d4:	e7a6      	b.n	8006924 <_printf_i+0x164>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4632      	mov	r2, r6
 80069da:	4649      	mov	r1, r9
 80069dc:	4640      	mov	r0, r8
 80069de:	47d0      	blx	sl
 80069e0:	3001      	adds	r0, #1
 80069e2:	d09d      	beq.n	8006920 <_printf_i+0x160>
 80069e4:	3501      	adds	r5, #1
 80069e6:	68e3      	ldr	r3, [r4, #12]
 80069e8:	9903      	ldr	r1, [sp, #12]
 80069ea:	1a5b      	subs	r3, r3, r1
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	dcf2      	bgt.n	80069d6 <_printf_i+0x216>
 80069f0:	e7eb      	b.n	80069ca <_printf_i+0x20a>
 80069f2:	2500      	movs	r5, #0
 80069f4:	f104 0619 	add.w	r6, r4, #25
 80069f8:	e7f5      	b.n	80069e6 <_printf_i+0x226>
 80069fa:	bf00      	nop
 80069fc:	08007d6b 	.word	0x08007d6b
 8006a00:	08007d7c 	.word	0x08007d7c

08006a04 <__sflush_r>:
 8006a04:	898a      	ldrh	r2, [r1, #12]
 8006a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	0710      	lsls	r0, r2, #28
 8006a0e:	460c      	mov	r4, r1
 8006a10:	d458      	bmi.n	8006ac4 <__sflush_r+0xc0>
 8006a12:	684b      	ldr	r3, [r1, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dc05      	bgt.n	8006a24 <__sflush_r+0x20>
 8006a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dc02      	bgt.n	8006a24 <__sflush_r+0x20>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a26:	2e00      	cmp	r6, #0
 8006a28:	d0f9      	beq.n	8006a1e <__sflush_r+0x1a>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a30:	682f      	ldr	r7, [r5, #0]
 8006a32:	6a21      	ldr	r1, [r4, #32]
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	d032      	beq.n	8006a9e <__sflush_r+0x9a>
 8006a38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	075a      	lsls	r2, r3, #29
 8006a3e:	d505      	bpl.n	8006a4c <__sflush_r+0x48>
 8006a40:	6863      	ldr	r3, [r4, #4]
 8006a42:	1ac0      	subs	r0, r0, r3
 8006a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a46:	b10b      	cbz	r3, 8006a4c <__sflush_r+0x48>
 8006a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a4a:	1ac0      	subs	r0, r0, r3
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4602      	mov	r2, r0
 8006a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a52:	6a21      	ldr	r1, [r4, #32]
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b0      	blx	r6
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	d106      	bne.n	8006a6c <__sflush_r+0x68>
 8006a5e:	6829      	ldr	r1, [r5, #0]
 8006a60:	291d      	cmp	r1, #29
 8006a62:	d82b      	bhi.n	8006abc <__sflush_r+0xb8>
 8006a64:	4a29      	ldr	r2, [pc, #164]	; (8006b0c <__sflush_r+0x108>)
 8006a66:	410a      	asrs	r2, r1
 8006a68:	07d6      	lsls	r6, r2, #31
 8006a6a:	d427      	bmi.n	8006abc <__sflush_r+0xb8>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	6062      	str	r2, [r4, #4]
 8006a70:	04d9      	lsls	r1, r3, #19
 8006a72:	6922      	ldr	r2, [r4, #16]
 8006a74:	6022      	str	r2, [r4, #0]
 8006a76:	d504      	bpl.n	8006a82 <__sflush_r+0x7e>
 8006a78:	1c42      	adds	r2, r0, #1
 8006a7a:	d101      	bne.n	8006a80 <__sflush_r+0x7c>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b903      	cbnz	r3, 8006a82 <__sflush_r+0x7e>
 8006a80:	6560      	str	r0, [r4, #84]	; 0x54
 8006a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a84:	602f      	str	r7, [r5, #0]
 8006a86:	2900      	cmp	r1, #0
 8006a88:	d0c9      	beq.n	8006a1e <__sflush_r+0x1a>
 8006a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a8e:	4299      	cmp	r1, r3
 8006a90:	d002      	beq.n	8006a98 <__sflush_r+0x94>
 8006a92:	4628      	mov	r0, r5
 8006a94:	f7ff fbea 	bl	800626c <_free_r>
 8006a98:	2000      	movs	r0, #0
 8006a9a:	6360      	str	r0, [r4, #52]	; 0x34
 8006a9c:	e7c0      	b.n	8006a20 <__sflush_r+0x1c>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b0      	blx	r6
 8006aa4:	1c41      	adds	r1, r0, #1
 8006aa6:	d1c8      	bne.n	8006a3a <__sflush_r+0x36>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0c5      	beq.n	8006a3a <__sflush_r+0x36>
 8006aae:	2b1d      	cmp	r3, #29
 8006ab0:	d001      	beq.n	8006ab6 <__sflush_r+0xb2>
 8006ab2:	2b16      	cmp	r3, #22
 8006ab4:	d101      	bne.n	8006aba <__sflush_r+0xb6>
 8006ab6:	602f      	str	r7, [r5, #0]
 8006ab8:	e7b1      	b.n	8006a1e <__sflush_r+0x1a>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac0:	81a3      	strh	r3, [r4, #12]
 8006ac2:	e7ad      	b.n	8006a20 <__sflush_r+0x1c>
 8006ac4:	690f      	ldr	r7, [r1, #16]
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d0a9      	beq.n	8006a1e <__sflush_r+0x1a>
 8006aca:	0793      	lsls	r3, r2, #30
 8006acc:	680e      	ldr	r6, [r1, #0]
 8006ace:	bf08      	it	eq
 8006ad0:	694b      	ldreq	r3, [r1, #20]
 8006ad2:	600f      	str	r7, [r1, #0]
 8006ad4:	bf18      	it	ne
 8006ad6:	2300      	movne	r3, #0
 8006ad8:	eba6 0807 	sub.w	r8, r6, r7
 8006adc:	608b      	str	r3, [r1, #8]
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	dd9c      	ble.n	8006a1e <__sflush_r+0x1a>
 8006ae4:	6a21      	ldr	r1, [r4, #32]
 8006ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ae8:	4643      	mov	r3, r8
 8006aea:	463a      	mov	r2, r7
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b0      	blx	r6
 8006af0:	2800      	cmp	r0, #0
 8006af2:	dc06      	bgt.n	8006b02 <__sflush_r+0xfe>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	e78e      	b.n	8006a20 <__sflush_r+0x1c>
 8006b02:	4407      	add	r7, r0
 8006b04:	eba8 0800 	sub.w	r8, r8, r0
 8006b08:	e7e9      	b.n	8006ade <__sflush_r+0xda>
 8006b0a:	bf00      	nop
 8006b0c:	dfbffffe 	.word	0xdfbffffe

08006b10 <_fflush_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	690b      	ldr	r3, [r1, #16]
 8006b14:	4605      	mov	r5, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	b913      	cbnz	r3, 8006b20 <_fflush_r+0x10>
 8006b1a:	2500      	movs	r5, #0
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	b118      	cbz	r0, 8006b2a <_fflush_r+0x1a>
 8006b22:	6a03      	ldr	r3, [r0, #32]
 8006b24:	b90b      	cbnz	r3, 8006b2a <_fflush_r+0x1a>
 8006b26:	f7ff fa8b 	bl	8006040 <__sinit>
 8006b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f3      	beq.n	8006b1a <_fflush_r+0xa>
 8006b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b34:	07d0      	lsls	r0, r2, #31
 8006b36:	d404      	bmi.n	8006b42 <_fflush_r+0x32>
 8006b38:	0599      	lsls	r1, r3, #22
 8006b3a:	d402      	bmi.n	8006b42 <_fflush_r+0x32>
 8006b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3e:	f7ff fb84 	bl	800624a <__retarget_lock_acquire_recursive>
 8006b42:	4628      	mov	r0, r5
 8006b44:	4621      	mov	r1, r4
 8006b46:	f7ff ff5d 	bl	8006a04 <__sflush_r>
 8006b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b4c:	07da      	lsls	r2, r3, #31
 8006b4e:	4605      	mov	r5, r0
 8006b50:	d4e4      	bmi.n	8006b1c <_fflush_r+0xc>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	059b      	lsls	r3, r3, #22
 8006b56:	d4e1      	bmi.n	8006b1c <_fflush_r+0xc>
 8006b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5a:	f7ff fb77 	bl	800624c <__retarget_lock_release_recursive>
 8006b5e:	e7dd      	b.n	8006b1c <_fflush_r+0xc>

08006b60 <__swbuf_r>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	460e      	mov	r6, r1
 8006b64:	4614      	mov	r4, r2
 8006b66:	4605      	mov	r5, r0
 8006b68:	b118      	cbz	r0, 8006b72 <__swbuf_r+0x12>
 8006b6a:	6a03      	ldr	r3, [r0, #32]
 8006b6c:	b90b      	cbnz	r3, 8006b72 <__swbuf_r+0x12>
 8006b6e:	f7ff fa67 	bl	8006040 <__sinit>
 8006b72:	69a3      	ldr	r3, [r4, #24]
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	071a      	lsls	r2, r3, #28
 8006b7a:	d525      	bpl.n	8006bc8 <__swbuf_r+0x68>
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	b31b      	cbz	r3, 8006bc8 <__swbuf_r+0x68>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	6922      	ldr	r2, [r4, #16]
 8006b84:	1a98      	subs	r0, r3, r2
 8006b86:	6963      	ldr	r3, [r4, #20]
 8006b88:	b2f6      	uxtb	r6, r6
 8006b8a:	4283      	cmp	r3, r0
 8006b8c:	4637      	mov	r7, r6
 8006b8e:	dc04      	bgt.n	8006b9a <__swbuf_r+0x3a>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff ffbc 	bl	8006b10 <_fflush_r>
 8006b98:	b9e0      	cbnz	r0, 8006bd4 <__swbuf_r+0x74>
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	60a3      	str	r3, [r4, #8]
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	701e      	strb	r6, [r3, #0]
 8006ba8:	6962      	ldr	r2, [r4, #20]
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d004      	beq.n	8006bba <__swbuf_r+0x5a>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	07db      	lsls	r3, r3, #31
 8006bb4:	d506      	bpl.n	8006bc4 <__swbuf_r+0x64>
 8006bb6:	2e0a      	cmp	r6, #10
 8006bb8:	d104      	bne.n	8006bc4 <__swbuf_r+0x64>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f7ff ffa7 	bl	8006b10 <_fflush_r>
 8006bc2:	b938      	cbnz	r0, 8006bd4 <__swbuf_r+0x74>
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f000 f806 	bl	8006bdc <__swsetup_r>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d0d5      	beq.n	8006b80 <__swbuf_r+0x20>
 8006bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8006bd8:	e7f4      	b.n	8006bc4 <__swbuf_r+0x64>
	...

08006bdc <__swsetup_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4b2a      	ldr	r3, [pc, #168]	; (8006c88 <__swsetup_r+0xac>)
 8006be0:	4605      	mov	r5, r0
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	460c      	mov	r4, r1
 8006be6:	b118      	cbz	r0, 8006bf0 <__swsetup_r+0x14>
 8006be8:	6a03      	ldr	r3, [r0, #32]
 8006bea:	b90b      	cbnz	r3, 8006bf0 <__swsetup_r+0x14>
 8006bec:	f7ff fa28 	bl	8006040 <__sinit>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bf6:	0718      	lsls	r0, r3, #28
 8006bf8:	d422      	bmi.n	8006c40 <__swsetup_r+0x64>
 8006bfa:	06d9      	lsls	r1, r3, #27
 8006bfc:	d407      	bmi.n	8006c0e <__swsetup_r+0x32>
 8006bfe:	2309      	movs	r3, #9
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e034      	b.n	8006c78 <__swsetup_r+0x9c>
 8006c0e:	0758      	lsls	r0, r3, #29
 8006c10:	d512      	bpl.n	8006c38 <__swsetup_r+0x5c>
 8006c12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c14:	b141      	cbz	r1, 8006c28 <__swsetup_r+0x4c>
 8006c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c1a:	4299      	cmp	r1, r3
 8006c1c:	d002      	beq.n	8006c24 <__swsetup_r+0x48>
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f7ff fb24 	bl	800626c <_free_r>
 8006c24:	2300      	movs	r3, #0
 8006c26:	6363      	str	r3, [r4, #52]	; 0x34
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	2300      	movs	r3, #0
 8006c32:	6063      	str	r3, [r4, #4]
 8006c34:	6923      	ldr	r3, [r4, #16]
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f043 0308 	orr.w	r3, r3, #8
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	6923      	ldr	r3, [r4, #16]
 8006c42:	b94b      	cbnz	r3, 8006c58 <__swsetup_r+0x7c>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4e:	d003      	beq.n	8006c58 <__swsetup_r+0x7c>
 8006c50:	4621      	mov	r1, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	f000 f850 	bl	8006cf8 <__smakebuf_r>
 8006c58:	89a0      	ldrh	r0, [r4, #12]
 8006c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c5e:	f010 0301 	ands.w	r3, r0, #1
 8006c62:	d00a      	beq.n	8006c7a <__swsetup_r+0x9e>
 8006c64:	2300      	movs	r3, #0
 8006c66:	60a3      	str	r3, [r4, #8]
 8006c68:	6963      	ldr	r3, [r4, #20]
 8006c6a:	425b      	negs	r3, r3
 8006c6c:	61a3      	str	r3, [r4, #24]
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	b943      	cbnz	r3, 8006c84 <__swsetup_r+0xa8>
 8006c72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c76:	d1c4      	bne.n	8006c02 <__swsetup_r+0x26>
 8006c78:	bd38      	pop	{r3, r4, r5, pc}
 8006c7a:	0781      	lsls	r1, r0, #30
 8006c7c:	bf58      	it	pl
 8006c7e:	6963      	ldrpl	r3, [r4, #20]
 8006c80:	60a3      	str	r3, [r4, #8]
 8006c82:	e7f4      	b.n	8006c6e <__swsetup_r+0x92>
 8006c84:	2000      	movs	r0, #0
 8006c86:	e7f7      	b.n	8006c78 <__swsetup_r+0x9c>
 8006c88:	20000350 	.word	0x20000350

08006c8c <_sbrk_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d06      	ldr	r5, [pc, #24]	; (8006ca8 <_sbrk_r+0x1c>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	f7f9 ff16 	bl	8000ac8 <_sbrk>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_sbrk_r+0x1a>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_sbrk_r+0x1a>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20000790 	.word	0x20000790

08006cac <__swhatbuf_r>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	460c      	mov	r4, r1
 8006cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	b096      	sub	sp, #88	; 0x58
 8006cb8:	4615      	mov	r5, r2
 8006cba:	461e      	mov	r6, r3
 8006cbc:	da0d      	bge.n	8006cda <__swhatbuf_r+0x2e>
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cc4:	f04f 0100 	mov.w	r1, #0
 8006cc8:	bf0c      	ite	eq
 8006cca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cce:	2340      	movne	r3, #64	; 0x40
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	6031      	str	r1, [r6, #0]
 8006cd4:	602b      	str	r3, [r5, #0]
 8006cd6:	b016      	add	sp, #88	; 0x58
 8006cd8:	bd70      	pop	{r4, r5, r6, pc}
 8006cda:	466a      	mov	r2, sp
 8006cdc:	f000 f848 	bl	8006d70 <_fstat_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	dbec      	blt.n	8006cbe <__swhatbuf_r+0x12>
 8006ce4:	9901      	ldr	r1, [sp, #4]
 8006ce6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006cea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006cee:	4259      	negs	r1, r3
 8006cf0:	4159      	adcs	r1, r3
 8006cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cf6:	e7eb      	b.n	8006cd0 <__swhatbuf_r+0x24>

08006cf8 <__smakebuf_r>:
 8006cf8:	898b      	ldrh	r3, [r1, #12]
 8006cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cfc:	079d      	lsls	r5, r3, #30
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	d507      	bpl.n	8006d14 <__smakebuf_r+0x1c>
 8006d04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	6163      	str	r3, [r4, #20]
 8006d10:	b002      	add	sp, #8
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	ab01      	add	r3, sp, #4
 8006d16:	466a      	mov	r2, sp
 8006d18:	f7ff ffc8 	bl	8006cac <__swhatbuf_r>
 8006d1c:	9900      	ldr	r1, [sp, #0]
 8006d1e:	4605      	mov	r5, r0
 8006d20:	4630      	mov	r0, r6
 8006d22:	f7ff fb0f 	bl	8006344 <_malloc_r>
 8006d26:	b948      	cbnz	r0, 8006d3c <__smakebuf_r+0x44>
 8006d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2c:	059a      	lsls	r2, r3, #22
 8006d2e:	d4ef      	bmi.n	8006d10 <__smakebuf_r+0x18>
 8006d30:	f023 0303 	bic.w	r3, r3, #3
 8006d34:	f043 0302 	orr.w	r3, r3, #2
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	e7e3      	b.n	8006d04 <__smakebuf_r+0xc>
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	6020      	str	r0, [r4, #0]
 8006d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	6163      	str	r3, [r4, #20]
 8006d4a:	9b01      	ldr	r3, [sp, #4]
 8006d4c:	6120      	str	r0, [r4, #16]
 8006d4e:	b15b      	cbz	r3, 8006d68 <__smakebuf_r+0x70>
 8006d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d54:	4630      	mov	r0, r6
 8006d56:	f000 f81d 	bl	8006d94 <_isatty_r>
 8006d5a:	b128      	cbz	r0, 8006d68 <__smakebuf_r+0x70>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	431d      	orrs	r5, r3
 8006d6c:	81a5      	strh	r5, [r4, #12]
 8006d6e:	e7cf      	b.n	8006d10 <__smakebuf_r+0x18>

08006d70 <_fstat_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d07      	ldr	r5, [pc, #28]	; (8006d90 <_fstat_r+0x20>)
 8006d74:	2300      	movs	r3, #0
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	f7f9 fe7a 	bl	8000a76 <_fstat>
 8006d82:	1c43      	adds	r3, r0, #1
 8006d84:	d102      	bne.n	8006d8c <_fstat_r+0x1c>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	b103      	cbz	r3, 8006d8c <_fstat_r+0x1c>
 8006d8a:	6023      	str	r3, [r4, #0]
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000790 	.word	0x20000790

08006d94 <_isatty_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d06      	ldr	r5, [pc, #24]	; (8006db0 <_isatty_r+0x1c>)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	f7f9 fe79 	bl	8000a96 <_isatty>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_isatty_r+0x1a>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_isatty_r+0x1a>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	20000790 	.word	0x20000790

08006db4 <_init>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr

08006dc0 <_fini>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	bf00      	nop
 8006dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc6:	bc08      	pop	{r3}
 8006dc8:	469e      	mov	lr, r3
 8006dca:	4770      	bx	lr

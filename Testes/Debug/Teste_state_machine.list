
Teste_state_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007768  08007768  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007770  08007770  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08007778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200000f8  08007870  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08007870  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010359  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f2  00000000  00000000  000304c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  000335b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a26  00000000  00000000  00034330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029629  00000000  00000000  00034d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175b4  00000000  00000000  0005e37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee47b  00000000  00000000  00075933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be4  00000000  00000000  00163db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00167994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070e0 	.word	0x080070e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080070e0 	.word	0x080070e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b36      	ldr	r3, [pc, #216]	; (800065c <MX_GPIO_Init+0xf0>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a35      	ldr	r2, [pc, #212]	; (800065c <MX_GPIO_Init+0xf0>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b33      	ldr	r3, [pc, #204]	; (800065c <MX_GPIO_Init+0xf0>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	4b30      	ldr	r3, [pc, #192]	; (800065c <MX_GPIO_Init+0xf0>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_GPIO_Init+0xf0>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b2d      	ldr	r3, [pc, #180]	; (800065c <MX_GPIO_Init+0xf0>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <MX_GPIO_Init+0xf0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a29      	ldr	r2, [pc, #164]	; (800065c <MX_GPIO_Init+0xf0>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b27      	ldr	r3, [pc, #156]	; (800065c <MX_GPIO_Init+0xf0>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <MX_GPIO_Init+0xf0>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <MX_GPIO_Init+0xf0>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_GPIO_Init+0xf0>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 f831 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <MX_GPIO_Init+0xf4>)
 80005f6:	f001 f82b 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000600:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <MX_GPIO_Init+0xf4>)
 8000612:	f000 fe73 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fe64 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DE_Pin;
 8000634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_GPIO_Init+0xf4>)
 800064e:	f000 fe55 	bl	80012fc <HAL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	48000800 	.word	0x48000800

08000664 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800066c:	1d39      	adds	r1, r7, #4
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2201      	movs	r2, #1
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <__io_putchar+0x20>)
 8000676:	f002 fb71 	bl	8002d5c <HAL_UART_Transmit>
  return ch;
 800067a:	687b      	ldr	r3, [r7, #4]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001a4 	.word	0x200001a4

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fc19 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f893 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f7ff ff69 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069a:	f000 fb07 	bl	8000cac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800069e:	f000 fad5 	bl	8000c4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  et_RET et_ret = RET_UNEXPECTED;
 80006a2:	23ff      	movs	r3, #255	; 0xff
 80006a4:	71fb      	strb	r3, [r7, #7]

  /* Set initial state. */
  g_et_state = MAIN_STATE_INIT;
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <main+0x108>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (g_et_state)
 80006ac:	4b38      	ldr	r3, [pc, #224]	; (8000790 <main+0x108>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d866      	bhi.n	8000782 <main+0xfa>
 80006b4:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <main+0x34>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006cd 	.word	0x080006cd
 80006c0:	080006fd 	.word	0x080006fd
 80006c4:	0800071d 	.word	0x0800071d
 80006c8:	08000741 	.word	0x08000741
	  {
      /* ********** Initialization error **************************************** */

      case MAIN_STATE_INIT_ERROR:

          CENTI_DEBUG__Error("Initialization failed!");
 80006cc:	22d8      	movs	r2, #216	; 0xd8
 80006ce:	4931      	ldr	r1, [pc, #196]	; (8000794 <main+0x10c>)
 80006d0:	4831      	ldr	r0, [pc, #196]	; (8000798 <main+0x110>)
 80006d2:	f005 fe2b 	bl	800632c <iprintf>
 80006d6:	4831      	ldr	r0, [pc, #196]	; (800079c <main+0x114>)
 80006d8:	f005 fe28 	bl	800632c <iprintf>
 80006dc:	4830      	ldr	r0, [pc, #192]	; (80007a0 <main+0x118>)
 80006de:	f005 fe25 	bl	800632c <iprintf>
 80006e2:	200a      	movs	r0, #10
 80006e4:	f005 fe34 	bl	8006350 <putchar>
          CENTI_DEBUG__Info("Entering in an infinity loop!");
 80006e8:	482e      	ldr	r0, [pc, #184]	; (80007a4 <main+0x11c>)
 80006ea:	f005 fe1f 	bl	800632c <iprintf>
 80006ee:	482e      	ldr	r0, [pc, #184]	; (80007a8 <main+0x120>)
 80006f0:	f005 fe1c 	bl	800632c <iprintf>
 80006f4:	200a      	movs	r0, #10
 80006f6:	f005 fe2b 	bl	8006350 <putchar>

          /* Add code to handle the initialization error. */
          // ...

          while (1)
 80006fa:	e7fe      	b.n	80006fa <main+0x72>
      /* ********** Initialization ********************************************** */

      case MAIN_STATE_INIT:

          /* Initialize device. */
          et_ret = Main__Initialize();
 80006fc:	f000 f8b0 	bl	8000860 <Main__Initialize>
 8000700:	4603      	mov	r3, r0
 8000702:	71fb      	strb	r3, [r7, #7]
          /* Add code if needed. */
          // ...

          /* If initialization was successfully complete, then go to loop state.
           * Otherwise, go to initialization error state. */
          if (RET_OK == et_ret)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <main+0x8c>
          {
              g_et_state = MAIN_STATE_LOOP;
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <main+0x108>)
 800070e:	2203      	movs	r2, #3
 8000710:	701a      	strb	r2, [r3, #0]
              break;
 8000712:	e03b      	b.n	800078c <main+0x104>
          }
          else
          {
              g_et_state = MAIN_STATE_INIT_ERROR;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <main+0x108>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
              break;
 800071a:	e037      	b.n	800078c <main+0x104>
      /* ************************************************************************ */
      /* ********** Loop Error ************************************************** */

      case MAIN_STATE_LOOP_ERROR:

          CENTI_DEBUG__Error("Loop failed!");
 800071c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000720:	491c      	ldr	r1, [pc, #112]	; (8000794 <main+0x10c>)
 8000722:	481d      	ldr	r0, [pc, #116]	; (8000798 <main+0x110>)
 8000724:	f005 fe02 	bl	800632c <iprintf>
 8000728:	481c      	ldr	r0, [pc, #112]	; (800079c <main+0x114>)
 800072a:	f005 fdff 	bl	800632c <iprintf>
 800072e:	481f      	ldr	r0, [pc, #124]	; (80007ac <main+0x124>)
 8000730:	f005 fdfc 	bl	800632c <iprintf>
 8000734:	200a      	movs	r0, #10
 8000736:	f005 fe0b 	bl	8006350 <putchar>

          /* Add code to handle with a loop error. */
          // ...

          g_et_state = MAIN_STATE_LOOP;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <main+0x108>)
 800073c:	2203      	movs	r2, #3
 800073e:	701a      	strb	r2, [r3, #0]
      /* ********** Loop ******************************************************** */

      case MAIN_STATE_LOOP:

          /* Go to initialization state to perform a soft reset. */
          if (FLAG_ON == f_soft_reset)
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <main+0x128>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00f      	beq.n	800076a <main+0xe2>
          {
              f_soft_reset = FLAG_OFF;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <main+0x128>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]

              CENTI_DEBUG__Warning("SoftReset!");
 8000750:	4818      	ldr	r0, [pc, #96]	; (80007b4 <main+0x12c>)
 8000752:	f005 fdeb 	bl	800632c <iprintf>
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <main+0x130>)
 8000758:	f005 fde8 	bl	800632c <iprintf>
 800075c:	200a      	movs	r0, #10
 800075e:	f005 fdf7 	bl	8006350 <putchar>

              g_et_state = MAIN_STATE_INIT;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <main+0x108>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]

              break;
 8000768:	e010      	b.n	800078c <main+0x104>
          }

          /* Main Loop. */
          et_ret = Main__Loop();
 800076a:	f000 f8f9 	bl	8000960 <Main__Loop>
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
          /* Check for any error. */
          if (RET_OK != et_ret)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d007      	beq.n	800078a <main+0x102>
          {
              g_et_state = MAIN_STATE_LOOP_ERROR;
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <main+0x108>)
 800077c:	2202      	movs	r2, #2
 800077e:	701a      	strb	r2, [r3, #0]

              break;
 8000780:	e004      	b.n	800078c <main+0x104>
      /* ********** Default ***************************************************** */

      default:

          /* Reinitialize. */
          g_et_state = MAIN_STATE_INIT;
 8000782:	4b03      	ldr	r3, [pc, #12]	; (8000790 <main+0x108>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]

          break;
 8000788:	e000      	b.n	800078c <main+0x104>
          break;
 800078a:	bf00      	nop
	  switch (g_et_state)
 800078c:	e78e      	b.n	80006ac <main+0x24>
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000
 8000794:	080070f8 	.word	0x080070f8
 8000798:	0800710c 	.word	0x0800710c
 800079c:	0800711c 	.word	0x0800711c
 80007a0:	08007128 	.word	0x08007128
 80007a4:	08007140 	.word	0x08007140
 80007a8:	0800714c 	.word	0x0800714c
 80007ac:	0800716c 	.word	0x0800716c
 80007b0:	20000114 	.word	0x20000114
 80007b4:	0800717c 	.word	0x0800717c
 80007b8:	08007188 	.word	0x08007188

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2244      	movs	r2, #68	; 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f005 fe25 	bl	800641a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e2:	f000 ff5b 	bl	800169c <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ec:	f000 f911 	bl	8000a12 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2310      	movs	r3, #16
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800080a:	230a      	movs	r3, #10
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080e:	2307      	movs	r3, #7
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4618      	mov	r0, r3
 8000820:	f000 ff92 	bl	8001748 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800082a:	f000 f8f2 	bl	8000a12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	2104      	movs	r1, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fb5a 	bl	8001f00 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000852:	f000 f8de 	bl	8000a12 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3758      	adds	r7, #88	; 0x58
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <Main__Initialize>:

/* USER CODE BEGIN 4 */
static et_RET Main__Initialize(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
    et_RET et_ret      = RET_UNEXPECTED;
 8000866:	23ff      	movs	r3, #255	; 0xff
 8000868:	71bb      	strb	r3, [r7, #6]
    int8_t num_retries = NUM_RETRIES;
 800086a:	2303      	movs	r3, #3
 800086c:	71fb      	strb	r3, [r7, #7]

    /* Initialize device. */
    Main__InitializeDevice();
 800086e:	f000 f8c9 	bl	8000a04 <Main__InitializeDevice>

    /* Initialize SoftTimer. */
    #if (defined(__CENTI_SOFTTIMER_IN_USE__))

        et_ret = SoftTimer__Initialize();
 8000872:	f004 fa6f 	bl	8004d54 <SoftTimer__Initialize>
 8000876:	4603      	mov	r3, r0
 8000878:	71bb      	strb	r3, [r7, #6]
        CENTI_CHECK_RET(et_ret);
 800087a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da0d      	bge.n	800089e <Main__Initialize+0x3e>
 8000882:	4833      	ldr	r0, [pc, #204]	; (8000950 <Main__Initialize+0xf0>)
 8000884:	f005 fd52 	bl	800632c <iprintf>
 8000888:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fa2d 	bl	8004cec <CeNTI_Debug__Return>
 8000892:	200a      	movs	r0, #10
 8000894:	f005 fd5c 	bl	8006350 <putchar>
 8000898:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800089c:	e054      	b.n	8000948 <Main__Initialize+0xe8>

        /* Wait some time before initialize devices. */
        et_ret = SoftTimer__Delay_msec(DELAY_INIT_MS);
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 faa1 	bl	8004de8 <SoftTimer__Delay_msec>
 80008a6:	4603      	mov	r3, r0
 80008a8:	71bb      	strb	r3, [r7, #6]
        CENTI_CHECK_RET(et_ret);
 80008aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	da0d      	bge.n	80008ce <Main__Initialize+0x6e>
 80008b2:	4827      	ldr	r0, [pc, #156]	; (8000950 <Main__Initialize+0xf0>)
 80008b4:	f005 fd3a 	bl	800632c <iprintf>
 80008b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008bc:	4618      	mov	r0, r3
 80008be:	f004 fa15 	bl	8004cec <CeNTI_Debug__Return>
 80008c2:	200a      	movs	r0, #10
 80008c4:	f005 fd44 	bl	8006350 <putchar>
 80008c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008cc:	e03c      	b.n	8000948 <Main__Initialize+0xe8>

        CENTI_DEBUG__Info("SoftTimer initialization complete!");
 80008ce:	4821      	ldr	r0, [pc, #132]	; (8000954 <Main__Initialize+0xf4>)
 80008d0:	f005 fd2c 	bl	800632c <iprintf>
 80008d4:	4820      	ldr	r0, [pc, #128]	; (8000958 <Main__Initialize+0xf8>)
 80008d6:	f005 fd29 	bl	800632c <iprintf>
 80008da:	200a      	movs	r0, #10
 80008dc:	f005 fd38 	bl	8006350 <putchar>
    #endif

    do
    {
        /* Initialize Manager. */
        et_ret = Manager__Initialize();
 80008e0:	f005 f91c 	bl	8005b1c <Manager__Initialize>
 80008e4:	4603      	mov	r3, r0
 80008e6:	71bb      	strb	r3, [r7, #6]

        /* Check return. */
        if (et_ret != RET_OK)
 80008e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <Main__Initialize+0xa0>
        {
            /* Delay between retries. */
            #if (defined(__CENTI_SOFTTIMER_IN_USE__))
                SoftTimer__Delay_msec(DELAY_RETRY_MS);
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 fa78 	bl	8004de8 <SoftTimer__Delay_msec>
            #endif

            /* Reduce the number of tries. */
            --num_retries;
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	71fb      	strb	r3, [r7, #7]
        }
    }
    while ((et_ret != RET_OK) && (num_retries > 0));
 8000900:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <Main__Initialize+0xb0>
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dce7      	bgt.n	80008e0 <Main__Initialize+0x80>

    /* Check if return is not RET_OK. */
    CENTI_CHECK_RET(et_ret);
 8000910:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000914:	2b00      	cmp	r3, #0
 8000916:	da0d      	bge.n	8000934 <Main__Initialize+0xd4>
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <Main__Initialize+0xf0>)
 800091a:	f005 fd07 	bl	800632c <iprintf>
 800091e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000922:	4618      	mov	r0, r3
 8000924:	f004 f9e2 	bl	8004cec <CeNTI_Debug__Return>
 8000928:	200a      	movs	r0, #10
 800092a:	f005 fd11 	bl	8006350 <putchar>
 800092e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000932:	e009      	b.n	8000948 <Main__Initialize+0xe8>

    CENTI_DEBUG__Info("Initialization complete!");
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <Main__Initialize+0xf4>)
 8000936:	f005 fcf9 	bl	800632c <iprintf>
 800093a:	4808      	ldr	r0, [pc, #32]	; (800095c <Main__Initialize+0xfc>)
 800093c:	f005 fcf6 	bl	800632c <iprintf>
 8000940:	200a      	movs	r0, #10
 8000942:	f005 fd05 	bl	8006350 <putchar>

    return RET_OK;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08007194 	.word	0x08007194
 8000954:	08007140 	.word	0x08007140
 8000958:	080071a0 	.word	0x080071a0
 800095c:	080071c4 	.word	0x080071c4

08000960 <Main__Loop>:

static et_RET Main__Loop(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
    et_RET et_ret = RET_UNEXPECTED;
 8000966:	23ff      	movs	r3, #255	; 0xff
 8000968:	71fb      	strb	r3, [r7, #7]

    /* Check if any SoftTimer has occurred. */
    #if (defined(__CENTI_SOFTTIMER_IN_USE__))
        Main__CheckSoftTimers();
 800096a:	f000 f81d 	bl	80009a8 <Main__CheckSoftTimers>
    #endif

    /* Perform the manager loop. */
    et_ret = Manager__Loop();
 800096e:	f005 f951 	bl	8005c14 <Manager__Loop>
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
    CENTI_CHECK_RET(et_ret);
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da0d      	bge.n	800099a <Main__Loop+0x3a>
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <Main__Loop+0x44>)
 8000980:	f005 fcd4 	bl	800632c <iprintf>
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f004 f9af 	bl	8004cec <CeNTI_Debug__Return>
 800098e:	200a      	movs	r0, #10
 8000990:	f005 fcde 	bl	8006350 <putchar>
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	e000      	b.n	800099c <Main__Loop+0x3c>

    /* Add code if needed. */
    // ...

    return RET_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08007194 	.word	0x08007194

080009a8 <Main__CheckSoftTimers>:

#if (defined(__CENTI_SOFTTIMER_IN_USE__))

    static void Main__CheckSoftTimers(void)
    {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
        /* Add flags checks here. */
        for (uint8_t i=0; i<FLAGS_TOTAL; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e016      	b.n	80009e2 <Main__CheckSoftTimers+0x3a>
        {
            if (SOFTTIMER_ELAPSED_STATE_ELAPSED ==
                SoftTimer__Get_ElapsedState(ET_FLAG_SOFTTIMER_INSTANCES[i]))
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <Main__CheckSoftTimers+0x50>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f004 fb6f 	bl	80050a4 <SoftTimer__Get_ElapsedState>
 80009c6:	4603      	mov	r3, r0
            if (SOFTTIMER_ELAPSED_STATE_ELAPSED ==
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d107      	bne.n	80009dc <Main__CheckSoftTimers+0x34>
            {
                *FLAGS[i] = FLAG_ON;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <Main__CheckSoftTimers+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i<FLAGS_TOTAL; i++)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	3301      	adds	r3, #1
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <Main__CheckSoftTimers+0x58>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3e2      	bcc.n	80009b4 <Main__CheckSoftTimers+0xc>
            }
        }
    }
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000094 	.word	0x20000094
 80009fc:	2000008c 	.word	0x2000008c
 8000a00:	20000084 	.word	0x20000084

08000a04 <Main__InitializeDevice>:

/* ************************************************************************************ */
/* * Private Functions                                                                * */
/* ************************************************************************************ */
static void Main__InitializeDevice(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

		/* Initialize the device. */
		SYS_Initialize(NULL);

    #endif /* CENTI_CODE_CONFIGURATOR */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a16:	b672      	cpsid	i
}
 8000a18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <Error_Handler+0x8>

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6593      	str	r3, [r2, #88]	; 0x58
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f004 fb10 	bl	80050d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <USART1_IRQHandler+0x10>)
 8000abe:	f002 fa23 	bl	8002f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000011c 	.word	0x2000011c

08000acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <USART2_IRQHandler+0x10>)
 8000ad2:	f002 fa19 	bl	8002f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200001a4 	.word	0x200001a4

08000ae0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e00a      	b.n	8000b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af2:	f3af 8000 	nop.w
 8000af6:	4601      	mov	r1, r0
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	60ba      	str	r2, [r7, #8]
 8000afe:	b2ca      	uxtb	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbf0      	blt.n	8000af2 <_read+0x12>
  }

  return len;
 8000b10:	687b      	ldr	r3, [r7, #4]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e009      	b.n	8000b40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	60ba      	str	r2, [r7, #8]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fd95 	bl	8000664 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf1      	blt.n	8000b2c <_write+0x12>
  }
  return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_close>:

int _close(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_isatty>:

int _isatty(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <_sbrk+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <_sbrk+0x60>)
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <_sbrk+0x64>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <_sbrk+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bec:	f005 fc64 	bl	80064b8 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20018000 	.word	0x20018000
 8000c1c:	00000400 	.word	0x00000400
 8000c20:	20000118 	.word	0x20000118
 8000c24:	20000500 	.word	0x20000500

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <MX_USART1_UART_Init+0x5c>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c90:	f002 f816 	bl	8002cc0 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f7ff feba 	bl	8000a12 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000011c 	.word	0x2000011c
 8000ca8:	40013800 	.word	0x40013800

08000cac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <MX_USART2_UART_Init+0x5c>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART2_UART_Init+0x58>)
 8000cf0:	f001 ffe6 	bl	8002cc0 <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cfa:	f7ff fe8a 	bl	8000a12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200001a4 	.word	0x200001a4
 8000d08:	40004400 	.word	0x40004400

08000d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0ae      	sub	sp, #184	; 0xb8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2288      	movs	r2, #136	; 0x88
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 fb74 	bl	800641a <memset>
  if(uartHandle->Instance==USART1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a4b      	ldr	r2, [pc, #300]	; (8000e64 <HAL_UART_MspInit+0x158>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d145      	bne.n	8000dc8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d40:	2300      	movs	r3, #0
 8000d42:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 fafd 	bl	8002348 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff fe5d 	bl	8000a12 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d58:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5c:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d62:	6613      	str	r3, [r2, #96]	; 0x60
 8000d64:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	4a3c      	ldr	r2, [pc, #240]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da2:	2307      	movs	r3, #7
 8000da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f000 faa3 	bl	80012fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2025      	movs	r0, #37	; 0x25
 8000dbc:	f000 f9e9 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc0:	2025      	movs	r0, #37	; 0x25
 8000dc2:	f000 fa02 	bl	80011ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dc6:	e048      	b.n	8000e5a <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a27      	ldr	r2, [pc, #156]	; (8000e6c <HAL_UART_MspInit+0x160>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d143      	bne.n	8000e5a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 fab2 	bl	8002348 <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000dea:	f7ff fe12 	bl	8000a12 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0x15c>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e36:	2307      	movs	r3, #7
 8000e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f000 fa59 	bl	80012fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2026      	movs	r0, #38	; 0x26
 8000e50:	f000 f99f 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e54:	2026      	movs	r0, #38	; 0x26
 8000e56:	f000 f9b8 	bl	80011ca <HAL_NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	37b8      	adds	r7, #184	; 0xb8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40004400 	.word	0x40004400

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff fed8 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f005 fb11 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fbf1 	bl	8000688 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8000eb4:	08007778 	.word	0x08007778
  ldr r2, =_sbss
 8000eb8:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8000ebc:	20000500 	.word	0x20000500

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_Init+0x3c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_Init+0x3c>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 f94e 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 f80f 	bl	8000f04 <HAL_InitTick>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	e001      	b.n	8000ef6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef2:	f7ff fd93 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_InitTick+0x6c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d023      	beq.n	8000f60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_InitTick+0x70>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_InitTick+0x6c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f959 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10f      	bne.n	8000f5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d809      	bhi.n	8000f54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f923 	bl	8001192 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_InitTick+0x74>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e007      	b.n	8000f64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e004      	b.n	8000f64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e001      	b.n	8000f64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000000c 	.word	0x2000000c
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000022c 	.word	0x2000022c

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff3e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fe:	b480      	push	{r7}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d008      	beq.n	8001228 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2204      	movs	r2, #4
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e022      	b.n	800126e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 020e 	bic.w	r2, r2, #14
 8001236:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f003 021c 	and.w	r2, r3, #28
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d005      	beq.n	800129e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2204      	movs	r2, #4
 8001296:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e029      	b.n	80012f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 020e 	bic.w	r2, r2, #14
 80012ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 021c 	and.w	r2, r3, #28
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
    }
  }
  return status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	e17f      	b.n	800160c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8171 	beq.w	8001606 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d005      	beq.n	800133c <HAL_GPIO_Init+0x40>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d118      	bne.n	80013dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013b0:	2201      	movs	r2, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	f003 0201 	and.w	r2, r3, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d017      	beq.n	8001418 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80ac 	beq.w	8001606 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <HAL_GPIO_Init+0x330>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	4a5e      	ldr	r2, [pc, #376]	; (800162c <HAL_GPIO_Init+0x330>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <HAL_GPIO_Init+0x330>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c6:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <HAL_GPIO_Init+0x334>)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014f0:	d025      	beq.n	800153e <HAL_GPIO_Init+0x242>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x338>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01f      	beq.n	800153a <HAL_GPIO_Init+0x23e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x33c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x23a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x340>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x236>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x344>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x232>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_GPIO_Init+0x348>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x22e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4a      	ldr	r2, [pc, #296]	; (8001648 <HAL_GPIO_Init+0x34c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x22a>
 8001522:	2306      	movs	r3, #6
 8001524:	e00c      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001526:	2307      	movs	r3, #7
 8001528:	e00a      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800152e:	2304      	movs	r3, #4
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800153e:	2300      	movs	r3, #0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001550:	4937      	ldr	r1, [pc, #220]	; (8001630 <HAL_GPIO_Init+0x334>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_GPIO_Init+0x350>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001582:	4a32      	ldr	r2, [pc, #200]	; (800164c <HAL_GPIO_Init+0x350>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_GPIO_Init+0x350>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ac:	4a27      	ldr	r2, [pc, #156]	; (800164c <HAL_GPIO_Init+0x350>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <HAL_GPIO_Init+0x350>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d6:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_GPIO_Init+0x350>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_GPIO_Init+0x350>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_GPIO_Init+0x350>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f ae78 	bne.w	800130c <HAL_GPIO_Init+0x10>
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000
 8001634:	48000400 	.word	0x48000400
 8001638:	48000800 	.word	0x48000800
 800163c:	48000c00 	.word	0x48000c00
 8001640:	48001000 	.word	0x48001000
 8001644:	48001400 	.word	0x48001400
 8001648:	48001800 	.word	0x48001800
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800166c:	e002      	b.n	8001674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_PWREx_GetVoltageRange+0x18>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40007000 	.word	0x40007000

0800169c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016aa:	d130      	bne.n	800170e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b8:	d038      	beq.n	800172c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2232      	movs	r2, #50	; 0x32
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	3301      	adds	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e0:	e002      	b.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f4:	d102      	bne.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f2      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001708:	d110      	bne.n	800172c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e00f      	b.n	800172e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171a:	d007      	beq.n	800172c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40007000 	.word	0x40007000
 8001740:	20000004 	.word	0x20000004
 8001744:	431bde83 	.word	0x431bde83

08001748 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e3ca      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175a:	4b97      	ldr	r3, [pc, #604]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001764:	4b94      	ldr	r3, [pc, #592]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80e4 	beq.w	8001944 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_RCC_OscConfig+0x4a>
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	f040 808b 	bne.w	80018a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2b01      	cmp	r3, #1
 800178e:	f040 8087 	bne.w	80018a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x62>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e3a2      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1a      	ldr	r2, [r3, #32]
 80017ae:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <HAL_RCC_OscConfig+0x7c>
 80017ba:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c2:	e005      	b.n	80017d0 <HAL_RCC_OscConfig+0x88>
 80017c4:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d223      	bcs.n	800181c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fd55 	bl	8002288 <RCC_SetFlashLatencyFromMSIRange>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e383      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e8:	4b73      	ldr	r3, [pc, #460]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a72      	ldr	r2, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	496d      	ldr	r1, [pc, #436]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001806:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	4968      	ldr	r1, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
 800181a:	e025      	b.n	8001868 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181c:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a65      	ldr	r2, [pc, #404]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4960      	ldr	r1, [pc, #384]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183a:	4b5f      	ldr	r3, [pc, #380]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	495b      	ldr	r1, [pc, #364]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fd15 	bl	8002288 <RCC_SetFlashLatencyFromMSIRange>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e343      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001868:	f000 fc4a 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	4950      	ldr	r1, [pc, #320]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	4a4e      	ldr	r2, [pc, #312]	; (80019c0 <HAL_RCC_OscConfig+0x278>)
 8001886:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001888:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fb39 	bl	8000f04 <HAL_InitTick>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d052      	beq.n	8001942 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	e327      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d032      	beq.n	800190e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a42      	ldr	r2, [pc, #264]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb62 	bl	8000f7c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018bc:	f7ff fb5e 	bl	8000f7c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e310      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ce:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a36      	ldr	r2, [pc, #216]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4931      	ldr	r1, [pc, #196]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f8:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	492c      	ldr	r1, [pc, #176]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	e01a      	b.n	8001944 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191a:	f7ff fb2f 	bl	8000f7c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001922:	f7ff fb2b 	bl	8000f7c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e2dd      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x1da>
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001942:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d074      	beq.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b08      	cmp	r3, #8
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x21a>
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d10e      	bne.n	800197a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d10b      	bne.n	800197a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d064      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d160      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e2ba      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x24a>
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e026      	b.n	80019e0 <HAL_RCC_OscConfig+0x298>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199a:	d115      	bne.n	80019c8 <HAL_RCC_OscConfig+0x280>
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a02      	ldr	r2, [pc, #8]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e014      	b.n	80019e0 <HAL_RCC_OscConfig+0x298>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	080076ac 	.word	0x080076ac
 80019c0:	20000004 	.word	0x20000004
 80019c4:	20000008 	.word	0x20000008
 80019c8:	4ba0      	ldr	r3, [pc, #640]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a9f      	ldr	r2, [pc, #636]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b9d      	ldr	r3, [pc, #628]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a9c      	ldr	r2, [pc, #624]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fac8 	bl	8000f7c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fac4 	bl	8000f7c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e276      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a02:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2a8>
 8001a0e:	e014      	b.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff fab4 	bl	8000f7c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fab0 	bl	8000f7c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e262      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2d0>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d060      	beq.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x310>
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d116      	bne.n	8001a86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a58:	4b7c      	ldr	r3, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x328>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e23f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	4973      	ldr	r1, [pc, #460]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a84:	e040      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fa6f 	bl	8000f7c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fa6b 	bl	8000f7c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e21d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	495f      	ldr	r1, [pc, #380]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
 8001ad4:	e018      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a5c      	ldr	r2, [pc, #368]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fa4b 	bl	8000f7c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fa47 	bl	8000f7c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1f9      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fa26 	bl	8000f7c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff fa22 	bl	8000f7c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1d4      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0ef      	beq.n	8001b34 <HAL_RCC_OscConfig+0x3ec>
 8001b54:	e01b      	b.n	8001b8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fa09 	bl	8000f7c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fa05 	bl	8000f7c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1b7      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ef      	bne.n	8001b6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80a6 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d118      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be0:	f7ff f9cc 	bl	8000f7c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be8:	f7ff f9c8 	bl	8000f7c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e17a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4d8>
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1e:	e029      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d115      	bne.n	8001c54 <HAL_RCC_OscConfig+0x50c>
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c48:	e014      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	4a9b      	ldr	r2, [pc, #620]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c64:	4b98      	ldr	r3, [pc, #608]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	4a97      	ldr	r2, [pc, #604]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d016      	beq.n	8001caa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f97e 	bl	8000f7c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff f97a 	bl	8000f7c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e12a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9a:	4b8b      	ldr	r3, [pc, #556]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ed      	beq.n	8001c84 <HAL_RCC_OscConfig+0x53c>
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f967 	bl	8000f7c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff f963 	bl	8000f7c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e113      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc8:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1ed      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cdc:	4b7a      	ldr	r3, [pc, #488]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	4a79      	ldr	r2, [pc, #484]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80fe 	beq.w	8001eee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	f040 80d0 	bne.w	8001e9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cfc:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d130      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d127      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d11f      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d3c:	2a07      	cmp	r2, #7
 8001d3e:	bf14      	ite	ne
 8001d40:	2201      	movne	r2, #1
 8001d42:	2200      	moveq	r2, #0
 8001d44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d113      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	3b01      	subs	r3, #1
 8001d58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d06e      	beq.n	8001e50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d069      	beq.n	8001e4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0ad      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da0:	f7ff f8ec 	bl	8000f7c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f8e8 	bl	8000f7c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e09a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001de0:	0212      	lsls	r2, r2, #8
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001de8:	0852      	lsrs	r2, r2, #1
 8001dea:	3a01      	subs	r2, #1
 8001dec:	0552      	lsls	r2, r2, #21
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001df4:	0852      	lsrs	r2, r2, #1
 8001df6:	3a01      	subs	r2, #1
 8001df8:	0652      	lsls	r2, r2, #25
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e00:	0912      	lsrs	r2, r2, #4
 8001e02:	0452      	lsls	r2, r2, #17
 8001e04:	430a      	orrs	r2, r1
 8001e06:	4930      	ldr	r1, [pc, #192]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2d      	ldr	r2, [pc, #180]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a2a      	ldr	r2, [pc, #168]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e24:	f7ff f8aa 	bl	8000f7c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff f8a6 	bl	8000f7c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e058      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4a:	e050      	b.n	8001eee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d148      	bne.n	8001eee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e74:	f7ff f882 	bl	8000f7c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f87e 	bl	8000f7c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e030      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x734>
 8001e9a:	e028      	b.n	8001eee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d023      	beq.n	8001eea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff f865 	bl	8000f7c <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	e00c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f861 	bl	8000f7c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d905      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_OscConfig+0x7b0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ec      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_OscConfig+0x7b0>)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4905      	ldr	r1, [pc, #20]	; (8001ef8 <HAL_RCC_OscConfig+0x7b0>)
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_OscConfig+0x7b4>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60cb      	str	r3, [r1, #12]
 8001ee8:	e001      	b.n	8001eee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	feeefffc 	.word	0xfeeefffc

08001f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0e7      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b75      	ldr	r3, [pc, #468]	; (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b72      	ldr	r3, [pc, #456]	; (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	4970      	ldr	r1, [pc, #448]	; (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b6e      	ldr	r3, [pc, #440]	; (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0cf      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d908      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4960      	ldr	r1, [pc, #384]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d04c      	beq.n	8002018 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f86:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d121      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0a6      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9e:	4b54      	ldr	r3, [pc, #336]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e09a      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e08e      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e086      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4943      	ldr	r1, [pc, #268]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe8:	f7fe ffc8 	bl	8000f7c <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe ffc4 	bl	8000f7c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e06e      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002030:	429a      	cmp	r2, r3
 8002032:	d208      	bcs.n	8002046 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	492b      	ldr	r1, [pc, #172]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d210      	bcs.n	8002076 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 0207 	bic.w	r2, r3, #7
 800205c:	4923      	ldr	r1, [pc, #140]	; (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e036      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4918      	ldr	r1, [pc, #96]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4910      	ldr	r1, [pc, #64]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b4:	f000 f824 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	490b      	ldr	r1, [pc, #44]	; (80020f4 <HAL_RCC_ClockConfig+0x1f4>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1f8>)
 80020d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1fc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe ff13 	bl	8000f04 <HAL_InitTick>
 80020de:	4603      	mov	r3, r0
 80020e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80020e2:	7afb      	ldrb	r3, [r7, #11]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40021000 	.word	0x40021000
 80020f4:	080076ac 	.word	0x080076ac
 80020f8:	20000004 	.word	0x20000004
 80020fc:	20000008 	.word	0x20000008

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210e:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x34>
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d121      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d11e      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e005      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800215c:	4a2b      	ldr	r2, [pc, #172]	; (800220c <HAL_RCC_GetSysClockFreq+0x10c>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10d      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d102      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_RCC_GetSysClockFreq+0x110>)
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	e004      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d101      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002184:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_RCC_GetSysClockFreq+0x114>)
 8002186:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d134      	bne.n	80021f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d003      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0xac>
 80021a4:	e005      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_RCC_GetSysClockFreq+0x110>)
 80021a8:	617b      	str	r3, [r7, #20]
      break;
 80021aa:	e005      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ae:	617b      	str	r3, [r7, #20]
      break;
 80021b0:	e002      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	617b      	str	r3, [r7, #20]
      break;
 80021b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	3301      	adds	r3, #1
 80021c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	fb03 f202 	mul.w	r2, r3, r2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	0e5b      	lsrs	r3, r3, #25
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	3301      	adds	r3, #1
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021f8:	69bb      	ldr	r3, [r7, #24]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	080076c4 	.word	0x080076c4
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200

08002218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	080076bc 	.word	0x080076bc

0800225c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002260:	f7ff ffda 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0adb      	lsrs	r3, r3, #11
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4904      	ldr	r1, [pc, #16]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	080076bc 	.word	0x080076bc

08002288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022a0:	f7ff f9ee 	bl	8001680 <HAL_PWREx_GetVoltageRange>
 80022a4:	6178      	str	r0, [r7, #20]
 80022a6:	e014      	b.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6593      	str	r3, [r2, #88]	; 0x58
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022c0:	f7ff f9de 	bl	8001680 <HAL_PWREx_GetVoltageRange>
 80022c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d8:	d10b      	bne.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d919      	bls.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2ba0      	cmp	r3, #160	; 0xa0
 80022e4:	d902      	bls.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e6:	2302      	movs	r3, #2
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e013      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e010      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d902      	bls.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022f8:	2303      	movs	r3, #3
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e00a      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d102      	bne.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002304:	2302      	movs	r3, #2
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e004      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b70      	cmp	r3, #112	; 0x70
 800230e:	d101      	bne.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 0207 	bic.w	r2, r3, #7
 800231c:	4909      	ldr	r1, [pc, #36]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	40022000 	.word	0x40022000

08002348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002350:	2300      	movs	r3, #0
 8002352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002354:	2300      	movs	r3, #0
 8002356:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002360:	2b00      	cmp	r3, #0
 8002362:	d041      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002368:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800236c:	d02a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800236e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002372:	d824      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800237a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800237e:	d81e      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002388:	d010      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800238a:	e018      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800238c:	4b86      	ldr	r3, [pc, #536]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a85      	ldr	r2, [pc, #532]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002396:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002398:	e015      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fabb 	bl	800291c <RCCEx_PLLSAI1_Config>
 80023a6:	4603      	mov	r3, r0
 80023a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023aa:	e00c      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3320      	adds	r3, #32
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fba6 	bl	8002b04 <RCCEx_PLLSAI2_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023bc:	e003      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	74fb      	strb	r3, [r7, #19]
      break;
 80023c2:	e000      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023cc:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023da:	4973      	ldr	r1, [pc, #460]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023e2:	e001      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d041      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023fc:	d02a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002402:	d824      	bhi.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002408:	d008      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800240a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800240e:	d81e      	bhi.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002418:	d010      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800241a:	e018      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800241c:	4b62      	ldr	r3, [pc, #392]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a61      	ldr	r2, [pc, #388]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002426:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002428:	e015      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fa73 	bl	800291c <RCCEx_PLLSAI1_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800243a:	e00c      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3320      	adds	r3, #32
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fb5e 	bl	8002b04 <RCCEx_PLLSAI2_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244c:	e003      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	74fb      	strb	r3, [r7, #19]
      break;
 8002452:	e000      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800246a:	494f      	ldr	r1, [pc, #316]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002472:	e001      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a0 	beq.w	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4a40      	ldr	r2, [pc, #256]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	; 0x58
 80024ac:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024bc:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a3a      	ldr	r2, [pc, #232]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fd58 	bl	8000f7c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ce:	e009      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d0:	f7fe fd54 	bl	8000f7c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d902      	bls.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	74fb      	strb	r3, [r7, #19]
        break;
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ef      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d15c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002500:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01f      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	d019      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002540:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fd13 	bl	8000f7c <HAL_GetTick>
 8002556:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002558:	e00b      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe fd0f 	bl	8000f7c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d902      	bls.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	74fb      	strb	r3, [r7, #19]
            break;
 8002570:	e006      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ec      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002596:	4904      	ldr	r1, [pc, #16]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800259e:	e009      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
 80025a4:	e006      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b4:	7c7b      	ldrb	r3, [r7, #17]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b9e      	ldr	r3, [pc, #632]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4a9d      	ldr	r2, [pc, #628]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d2:	4b98      	ldr	r3, [pc, #608]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f023 0203 	bic.w	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	4994      	ldr	r1, [pc, #592]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f4:	4b8f      	ldr	r3, [pc, #572]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 020c 	bic.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002602:	498c      	ldr	r1, [pc, #560]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002616:	4b87      	ldr	r3, [pc, #540]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	4983      	ldr	r1, [pc, #524]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002638:	4b7e      	ldr	r3, [pc, #504]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	497b      	ldr	r1, [pc, #492]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800265a:	4b76      	ldr	r3, [pc, #472]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002668:	4972      	ldr	r1, [pc, #456]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800267c:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	496a      	ldr	r1, [pc, #424]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800269e:	4b65      	ldr	r3, [pc, #404]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	4961      	ldr	r1, [pc, #388]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026c0:	4b5c      	ldr	r3, [pc, #368]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	4959      	ldr	r1, [pc, #356]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e2:	4b54      	ldr	r3, [pc, #336]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	4950      	ldr	r1, [pc, #320]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002704:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	4948      	ldr	r1, [pc, #288]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	493f      	ldr	r1, [pc, #252]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d028      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002756:	4937      	ldr	r1, [pc, #220]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002766:	d106      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002768:	4b32      	ldr	r3, [pc, #200]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a31      	ldr	r2, [pc, #196]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002772:	60d3      	str	r3, [r2, #12]
 8002774:	e011      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800277e:	d10c      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f8c8 	bl	800291c <RCCEx_PLLSAI1_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d028      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	491f      	ldr	r1, [pc, #124]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c4:	d106      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d0:	60d3      	str	r3, [r2, #12]
 80027d2:	e011      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2101      	movs	r1, #1
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f899 	bl	800291c <RCCEx_PLLSAI1_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02b      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002822:	d109      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a02      	ldr	r2, [pc, #8]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282e:	60d3      	str	r3, [r2, #12]
 8002830:	e014      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002840:	d10c      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f867 	bl	800291c <RCCEx_PLLSAI1_Config>
 800284e:	4603      	mov	r3, r0
 8002850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02f      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002876:	4928      	ldr	r1, [pc, #160]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002886:	d10d      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	2102      	movs	r1, #2
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f844 	bl	800291c <RCCEx_PLLSAI1_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d014      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	74bb      	strb	r3, [r7, #18]
 80028a2:	e011      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3320      	adds	r3, #32
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f925 	bl	8002b04 <RCCEx_PLLSAI2_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002906:	4904      	ldr	r1, [pc, #16]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800290e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000

0800291c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800292a:	4b75      	ldr	r3, [pc, #468]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
       ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800294e:	4b6c      	ldr	r3, [pc, #432]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
       ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d047      	beq.n	80029f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e044      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d018      	beq.n	80029a2 <RCCEx_PLLSAI1_Config+0x86>
 8002970:	2b03      	cmp	r3, #3
 8002972:	d825      	bhi.n	80029c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002974:	2b01      	cmp	r3, #1
 8002976:	d002      	beq.n	800297e <RCCEx_PLLSAI1_Config+0x62>
 8002978:	2b02      	cmp	r3, #2
 800297a:	d009      	beq.n	8002990 <RCCEx_PLLSAI1_Config+0x74>
 800297c:	e020      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11d      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298e:	e01a      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002990:	4b5b      	ldr	r3, [pc, #364]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e013      	b.n	80029ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029a2:	4b57      	ldr	r3, [pc, #348]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ae:	4b54      	ldr	r3, [pc, #336]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029be:	e006      	b.n	80029ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      break;
 80029c4:	e004      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029d6:	4b4a      	ldr	r3, [pc, #296]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	430b      	orrs	r3, r1
 80029ec:	4944      	ldr	r1, [pc, #272]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d17d      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029f8:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe faba 	bl	8000f7c <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a0a:	e009      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a0c:	f7fe fab6 	bl	8000f7c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a1e:	e005      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a20:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ef      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d160      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a38:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6892      	ldr	r2, [r2, #8]
 8002a48:	0211      	lsls	r1, r2, #8
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	0912      	lsrs	r2, r2, #4
 8002a50:	0452      	lsls	r2, r2, #17
 8002a52:	430a      	orrs	r2, r1
 8002a54:	492a      	ldr	r1, [pc, #168]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	610b      	str	r3, [r1, #16]
 8002a5a:	e027      	b.n	8002aac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d112      	bne.n	8002a88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a62:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6892      	ldr	r2, [r2, #8]
 8002a72:	0211      	lsls	r1, r2, #8
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6912      	ldr	r2, [r2, #16]
 8002a78:	0852      	lsrs	r2, r2, #1
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	0552      	lsls	r2, r2, #21
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	491f      	ldr	r1, [pc, #124]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	610b      	str	r3, [r1, #16]
 8002a86:	e011      	b.n	8002aac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	0211      	lsls	r1, r2, #8
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6952      	ldr	r2, [r2, #20]
 8002a9e:	0852      	lsrs	r2, r2, #1
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	0652      	lsls	r2, r2, #25
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	4916      	ldr	r1, [pc, #88]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fa60 	bl	8000f7c <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002abe:	e009      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ac0:	f7fe fa5c 	bl	8000f7c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d902      	bls.n	8002ad4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ad2:	e005      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ef      	beq.n	8002ac0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	4904      	ldr	r1, [pc, #16]	; (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b12:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d018      	beq.n	8002b50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b1e:	4b67      	ldr	r3, [pc, #412]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0203 	and.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d10d      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
       ||
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
       ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d047      	beq.n	8002bda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e044      	b.n	8002bda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d018      	beq.n	8002b8a <RCCEx_PLLSAI2_Config+0x86>
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d825      	bhi.n	8002ba8 <RCCEx_PLLSAI2_Config+0xa4>
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d002      	beq.n	8002b66 <RCCEx_PLLSAI2_Config+0x62>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d009      	beq.n	8002b78 <RCCEx_PLLSAI2_Config+0x74>
 8002b64:	e020      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b66:	4b55      	ldr	r3, [pc, #340]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11d      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b76:	e01a      	b.n	8002bae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b88:	e013      	b.n	8002bb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b96:	4b49      	ldr	r3, [pc, #292]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ba6:	e006      	b.n	8002bb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e004      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	4939      	ldr	r1, [pc, #228]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d167      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a35      	ldr	r2, [pc, #212]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fe f9c6 	bl	8000f7c <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bf2:	e009      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bf4:	f7fe f9c2 	bl	8000f7c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	73fb      	strb	r3, [r7, #15]
        break;
 8002c06:	e005      	b.n	8002c14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c08:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ef      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d14a      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d111      	bne.n	8002c44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	0211      	lsls	r1, r2, #8
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68d2      	ldr	r2, [r2, #12]
 8002c36:	0912      	lsrs	r2, r2, #4
 8002c38:	0452      	lsls	r2, r2, #17
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	491f      	ldr	r1, [pc, #124]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	614b      	str	r3, [r1, #20]
 8002c42:	e011      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6892      	ldr	r2, [r2, #8]
 8002c54:	0211      	lsls	r1, r2, #8
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6912      	ldr	r2, [r2, #16]
 8002c5a:	0852      	lsrs	r2, r2, #1
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	0652      	lsls	r2, r2, #25
 8002c60:	430a      	orrs	r2, r1
 8002c62:	4916      	ldr	r1, [pc, #88]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe f982 	bl	8000f7c <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c7a:	e009      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c7c:	f7fe f97e 	bl	8000f7c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d902      	bls.n	8002c90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c8e:	e005      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	4904      	ldr	r1, [pc, #16]	; (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e040      	b.n	8002d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe f812 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 feb6 	bl	8003a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fbfb 	bl	8003508 <UART_SetConfig>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e01b      	b.n	8002d54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 ff35 	bl	8003bbc <UART_CheckIdleState>
 8002d52:	4603      	mov	r3, r0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d178      	bne.n	8002e66 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_UART_Transmit+0x24>
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e071      	b.n	8002e68 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2221      	movs	r2, #33	; 0x21
 8002d90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d92:	f7fe f8f3 	bl	8000f7c <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db0:	d108      	bne.n	8002dc4 <HAL_UART_Transmit+0x68>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e003      	b.n	8002dcc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dcc:	e030      	b.n	8002e30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 ff97 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e03c      	b.n	8002e68 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e00:	b292      	uxth	r2, r2
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	3302      	adds	r3, #2
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	e008      	b.n	8002e1e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b292      	uxth	r2, r2
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1c8      	bne.n	8002dce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 ff60 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e005      	b.n	8002e68 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d137      	bne.n	8002ef8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_UART_Receive_IT+0x24>
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e030      	b.n	8002efa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_UART_Receive_IT+0x94>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	e853 3f00 	ldrex	r3, [r3]
 8002ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	69f9      	ldr	r1, [r7, #28]
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e6      	bne.n	8002eb6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 ff74 	bl	8003ddc <UART_Start_Receive_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40008000 	.word	0x40008000

08002f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0ba      	sub	sp, #232	; 0xe8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f32:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f36:	4013      	ands	r3, r2
 8002f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d115      	bne.n	8002f70 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00f      	beq.n	8002f70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 82ae 	beq.w	80034c2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
      }
      return;
 8002f6e:	e2a8      	b.n	80034c2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8117 	beq.w	80031a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f8a:	4b85      	ldr	r3, [pc, #532]	; (80031a0 <HAL_UART_IRQHandler+0x298>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 810a 	beq.w	80031a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <HAL_UART_IRQHandler+0xbc>
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d011      	beq.n	8002ff4 <HAL_UART_IRQHandler+0xec>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <HAL_UART_IRQHandler+0x11c>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2204      	movs	r2, #4
 8003012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d017      	beq.n	8003060 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800303c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <HAL_UART_IRQHandler+0x18a>
 800306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00c      	beq.n	8003092 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8214 	beq.w	80034c6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d005      	beq.n	80030ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d04f      	beq.n	800318a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 ff3c 	bl	8003f68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d141      	bne.n	8003182 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3308      	adds	r3, #8
 8003126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800312a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1d9      	bne.n	80030fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	2b00      	cmp	r3, #0
 8003150:	d013      	beq.n	800317a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_UART_IRQHandler+0x29c>)
 8003158:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe f88b 	bl	800127a <HAL_DMA_Abort_IT>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d017      	beq.n	800319a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003174:	4610      	mov	r0, r2
 8003176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e00f      	b.n	800319a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9ae 	bl	80034dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	e00b      	b.n	800319a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9aa 	bl	80034dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	e007      	b.n	800319a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9a6 	bl	80034dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003198:	e195      	b.n	80034c6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319a:	bf00      	nop
    return;
 800319c:	e193      	b.n	80034c6 <HAL_UART_IRQHandler+0x5be>
 800319e:	bf00      	nop
 80031a0:	04000120 	.word	0x04000120
 80031a4:	08004031 	.word	0x08004031

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 814e 	bne.w	800344e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8147 	beq.w	800344e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8140 	beq.w	800344e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2210      	movs	r2, #16
 80031d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	f040 80b8 	bne.w	8003356 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8167 	beq.w	80034ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003206:	429a      	cmp	r2, r3
 8003208:	f080 815f 	bcs.w	80034ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003212:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 8086 	bne.w	8003334 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800323c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003256:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800325e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800326a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1da      	bne.n	8003228 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3308      	adds	r3, #8
 8003278:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3308      	adds	r3, #8
 8003292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800329a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800329e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e1      	bne.n	8003272 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3308      	adds	r3, #8
 80032b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e3      	bne.n	80032ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003304:	f023 0310 	bic.w	r3, r3, #16
 8003308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003316:	65bb      	str	r3, [r7, #88]	; 0x58
 8003318:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800331c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e4      	bne.n	80032f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd ff65 	bl	80011fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003346:	b29b      	uxth	r3, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8ce 	bl	80034f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003354:	e0b9      	b.n	80034ca <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003362:	b29b      	uxth	r3, r3
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80ab 	beq.w	80034ce <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a6 	beq.w	80034ce <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003392:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033a4:	647b      	str	r3, [r7, #68]	; 0x44
 80033a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e4      	bne.n	8003382 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3308      	adds	r3, #8
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	623b      	str	r3, [r7, #32]
   return(result);
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033dc:	633a      	str	r2, [r7, #48]	; 0x30
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e3      	bne.n	80033b8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	60fb      	str	r3, [r7, #12]
   return(result);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f023 0310 	bic.w	r3, r3, #16
 8003418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	617b      	str	r3, [r7, #20]
   return(result);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e4      	bne.n	8003404 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f852 	bl	80034f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800344c:	e03f      	b.n	80034ce <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00e      	beq.n	8003478 <HAL_UART_IRQHandler+0x570>
 800345a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800346e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 ffd9 	bl	8004428 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003476:	e02d      	b.n	80034d4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01c      	beq.n	80034d2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
    }
    return;
 80034a0:	e017      	b.n	80034d2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <HAL_UART_IRQHandler+0x5cc>
 80034ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fdce 	bl	800405c <UART_EndTransmit_IT>
    return;
 80034c0:	e008      	b.n	80034d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80034c2:	bf00      	nop
 80034c4:	e006      	b.n	80034d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80034c6:	bf00      	nop
 80034c8:	e004      	b.n	80034d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80034ca:	bf00      	nop
 80034cc:	e002      	b.n	80034d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80034ce:	bf00      	nop
 80034d0:	e000      	b.n	80034d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80034d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80034d4:	37e8      	adds	r7, #232	; 0xe8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop

080034dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800350c:	b08a      	sub	sp, #40	; 0x28
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	431a      	orrs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4313      	orrs	r3, r2
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4ba4      	ldr	r3, [pc, #656]	; (80037c8 <UART_SetConfig+0x2c0>)
 8003538:	4013      	ands	r3, r2
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003540:	430b      	orrs	r3, r1
 8003542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a99      	ldr	r2, [pc, #612]	; (80037cc <UART_SetConfig+0x2c4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	4313      	orrs	r3, r2
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a90      	ldr	r2, [pc, #576]	; (80037d0 <UART_SetConfig+0x2c8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d126      	bne.n	80035e0 <UART_SetConfig+0xd8>
 8003592:	4b90      	ldr	r3, [pc, #576]	; (80037d4 <UART_SetConfig+0x2cc>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b03      	cmp	r3, #3
 800359e:	d81b      	bhi.n	80035d8 <UART_SetConfig+0xd0>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <UART_SetConfig+0xa0>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035b9 	.word	0x080035b9
 80035ac:	080035c9 	.word	0x080035c9
 80035b0:	080035c1 	.word	0x080035c1
 80035b4:	080035d1 	.word	0x080035d1
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e116      	b.n	80037ee <UART_SetConfig+0x2e6>
 80035c0:	2302      	movs	r3, #2
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e112      	b.n	80037ee <UART_SetConfig+0x2e6>
 80035c8:	2304      	movs	r3, #4
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e10e      	b.n	80037ee <UART_SetConfig+0x2e6>
 80035d0:	2308      	movs	r3, #8
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d6:	e10a      	b.n	80037ee <UART_SetConfig+0x2e6>
 80035d8:	2310      	movs	r3, #16
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035de:	e106      	b.n	80037ee <UART_SetConfig+0x2e6>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a7c      	ldr	r2, [pc, #496]	; (80037d8 <UART_SetConfig+0x2d0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d138      	bne.n	800365c <UART_SetConfig+0x154>
 80035ea:	4b7a      	ldr	r3, [pc, #488]	; (80037d4 <UART_SetConfig+0x2cc>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d82d      	bhi.n	8003654 <UART_SetConfig+0x14c>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <UART_SetConfig+0xf8>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003635 	.word	0x08003635
 8003604:	08003655 	.word	0x08003655
 8003608:	08003655 	.word	0x08003655
 800360c:	08003655 	.word	0x08003655
 8003610:	08003645 	.word	0x08003645
 8003614:	08003655 	.word	0x08003655
 8003618:	08003655 	.word	0x08003655
 800361c:	08003655 	.word	0x08003655
 8003620:	0800363d 	.word	0x0800363d
 8003624:	08003655 	.word	0x08003655
 8003628:	08003655 	.word	0x08003655
 800362c:	08003655 	.word	0x08003655
 8003630:	0800364d 	.word	0x0800364d
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e0d8      	b.n	80037ee <UART_SetConfig+0x2e6>
 800363c:	2302      	movs	r3, #2
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e0d4      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003644:	2304      	movs	r3, #4
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364a:	e0d0      	b.n	80037ee <UART_SetConfig+0x2e6>
 800364c:	2308      	movs	r3, #8
 800364e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003652:	e0cc      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003654:	2310      	movs	r3, #16
 8003656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365a:	e0c8      	b.n	80037ee <UART_SetConfig+0x2e6>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5e      	ldr	r2, [pc, #376]	; (80037dc <UART_SetConfig+0x2d4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d125      	bne.n	80036b2 <UART_SetConfig+0x1aa>
 8003666:	4b5b      	ldr	r3, [pc, #364]	; (80037d4 <UART_SetConfig+0x2cc>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003670:	2b30      	cmp	r3, #48	; 0x30
 8003672:	d016      	beq.n	80036a2 <UART_SetConfig+0x19a>
 8003674:	2b30      	cmp	r3, #48	; 0x30
 8003676:	d818      	bhi.n	80036aa <UART_SetConfig+0x1a2>
 8003678:	2b20      	cmp	r3, #32
 800367a:	d00a      	beq.n	8003692 <UART_SetConfig+0x18a>
 800367c:	2b20      	cmp	r3, #32
 800367e:	d814      	bhi.n	80036aa <UART_SetConfig+0x1a2>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <UART_SetConfig+0x182>
 8003684:	2b10      	cmp	r3, #16
 8003686:	d008      	beq.n	800369a <UART_SetConfig+0x192>
 8003688:	e00f      	b.n	80036aa <UART_SetConfig+0x1a2>
 800368a:	2300      	movs	r3, #0
 800368c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003690:	e0ad      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003692:	2302      	movs	r3, #2
 8003694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003698:	e0a9      	b.n	80037ee <UART_SetConfig+0x2e6>
 800369a:	2304      	movs	r3, #4
 800369c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a0:	e0a5      	b.n	80037ee <UART_SetConfig+0x2e6>
 80036a2:	2308      	movs	r3, #8
 80036a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a8:	e0a1      	b.n	80037ee <UART_SetConfig+0x2e6>
 80036aa:	2310      	movs	r3, #16
 80036ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b0:	e09d      	b.n	80037ee <UART_SetConfig+0x2e6>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a4a      	ldr	r2, [pc, #296]	; (80037e0 <UART_SetConfig+0x2d8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d125      	bne.n	8003708 <UART_SetConfig+0x200>
 80036bc:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <UART_SetConfig+0x2cc>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036c6:	2bc0      	cmp	r3, #192	; 0xc0
 80036c8:	d016      	beq.n	80036f8 <UART_SetConfig+0x1f0>
 80036ca:	2bc0      	cmp	r3, #192	; 0xc0
 80036cc:	d818      	bhi.n	8003700 <UART_SetConfig+0x1f8>
 80036ce:	2b80      	cmp	r3, #128	; 0x80
 80036d0:	d00a      	beq.n	80036e8 <UART_SetConfig+0x1e0>
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d814      	bhi.n	8003700 <UART_SetConfig+0x1f8>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <UART_SetConfig+0x1d8>
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d008      	beq.n	80036f0 <UART_SetConfig+0x1e8>
 80036de:	e00f      	b.n	8003700 <UART_SetConfig+0x1f8>
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e6:	e082      	b.n	80037ee <UART_SetConfig+0x2e6>
 80036e8:	2302      	movs	r3, #2
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ee:	e07e      	b.n	80037ee <UART_SetConfig+0x2e6>
 80036f0:	2304      	movs	r3, #4
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e07a      	b.n	80037ee <UART_SetConfig+0x2e6>
 80036f8:	2308      	movs	r3, #8
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e076      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003700:	2310      	movs	r3, #16
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e072      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a35      	ldr	r2, [pc, #212]	; (80037e4 <UART_SetConfig+0x2dc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d12a      	bne.n	8003768 <UART_SetConfig+0x260>
 8003712:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <UART_SetConfig+0x2cc>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003720:	d01a      	beq.n	8003758 <UART_SetConfig+0x250>
 8003722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003726:	d81b      	bhi.n	8003760 <UART_SetConfig+0x258>
 8003728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372c:	d00c      	beq.n	8003748 <UART_SetConfig+0x240>
 800372e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003732:	d815      	bhi.n	8003760 <UART_SetConfig+0x258>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <UART_SetConfig+0x238>
 8003738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373c:	d008      	beq.n	8003750 <UART_SetConfig+0x248>
 800373e:	e00f      	b.n	8003760 <UART_SetConfig+0x258>
 8003740:	2300      	movs	r3, #0
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003746:	e052      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003748:	2302      	movs	r3, #2
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374e:	e04e      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003750:	2304      	movs	r3, #4
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e04a      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003758:	2308      	movs	r3, #8
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e046      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003760:	2310      	movs	r3, #16
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e042      	b.n	80037ee <UART_SetConfig+0x2e6>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a17      	ldr	r2, [pc, #92]	; (80037cc <UART_SetConfig+0x2c4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d13a      	bne.n	80037e8 <UART_SetConfig+0x2e0>
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <UART_SetConfig+0x2cc>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800377c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003780:	d01a      	beq.n	80037b8 <UART_SetConfig+0x2b0>
 8003782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003786:	d81b      	bhi.n	80037c0 <UART_SetConfig+0x2b8>
 8003788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378c:	d00c      	beq.n	80037a8 <UART_SetConfig+0x2a0>
 800378e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003792:	d815      	bhi.n	80037c0 <UART_SetConfig+0x2b8>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <UART_SetConfig+0x298>
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379c:	d008      	beq.n	80037b0 <UART_SetConfig+0x2a8>
 800379e:	e00f      	b.n	80037c0 <UART_SetConfig+0x2b8>
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e022      	b.n	80037ee <UART_SetConfig+0x2e6>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e01e      	b.n	80037ee <UART_SetConfig+0x2e6>
 80037b0:	2304      	movs	r3, #4
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e01a      	b.n	80037ee <UART_SetConfig+0x2e6>
 80037b8:	2308      	movs	r3, #8
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e016      	b.n	80037ee <UART_SetConfig+0x2e6>
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e012      	b.n	80037ee <UART_SetConfig+0x2e6>
 80037c8:	efff69f3 	.word	0xefff69f3
 80037cc:	40008000 	.word	0x40008000
 80037d0:	40013800 	.word	0x40013800
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40004400 	.word	0x40004400
 80037dc:	40004800 	.word	0x40004800
 80037e0:	40004c00 	.word	0x40004c00
 80037e4:	40005000 	.word	0x40005000
 80037e8:	2310      	movs	r3, #16
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a9f      	ldr	r2, [pc, #636]	; (8003a70 <UART_SetConfig+0x568>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d17a      	bne.n	80038ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d824      	bhi.n	800384a <UART_SetConfig+0x342>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0x300>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	0800382d 	.word	0x0800382d
 800380c:	0800384b 	.word	0x0800384b
 8003810:	08003835 	.word	0x08003835
 8003814:	0800384b 	.word	0x0800384b
 8003818:	0800383b 	.word	0x0800383b
 800381c:	0800384b 	.word	0x0800384b
 8003820:	0800384b 	.word	0x0800384b
 8003824:	0800384b 	.word	0x0800384b
 8003828:	08003843 	.word	0x08003843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382c:	f7fe fd00 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8003830:	61f8      	str	r0, [r7, #28]
        break;
 8003832:	e010      	b.n	8003856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003834:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <UART_SetConfig+0x56c>)
 8003836:	61fb      	str	r3, [r7, #28]
        break;
 8003838:	e00d      	b.n	8003856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383a:	f7fe fc61 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 800383e:	61f8      	str	r0, [r7, #28]
        break;
 8003840:	e009      	b.n	8003856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003846:	61fb      	str	r3, [r7, #28]
        break;
 8003848:	e005      	b.n	8003856 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80fb 	beq.w	8003a54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	429a      	cmp	r2, r3
 800386c:	d305      	bcc.n	800387a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	429a      	cmp	r2, r3
 8003878:	d903      	bls.n	8003882 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003880:	e0e8      	b.n	8003a54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	2200      	movs	r2, #0
 8003886:	461c      	mov	r4, r3
 8003888:	4615      	mov	r5, r2
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	022b      	lsls	r3, r5, #8
 8003894:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003898:	0222      	lsls	r2, r4, #8
 800389a:	68f9      	ldr	r1, [r7, #12]
 800389c:	6849      	ldr	r1, [r1, #4]
 800389e:	0849      	lsrs	r1, r1, #1
 80038a0:	2000      	movs	r0, #0
 80038a2:	4688      	mov	r8, r1
 80038a4:	4681      	mov	r9, r0
 80038a6:	eb12 0a08 	adds.w	sl, r2, r8
 80038aa:	eb43 0b09 	adc.w	fp, r3, r9
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038bc:	4650      	mov	r0, sl
 80038be:	4659      	mov	r1, fp
 80038c0:	f7fc fcd6 	bl	8000270 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4613      	mov	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d2:	d308      	bcc.n	80038e6 <UART_SetConfig+0x3de>
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038da:	d204      	bcs.n	80038e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	e0b6      	b.n	8003a54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038ec:	e0b2      	b.n	8003a54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f6:	d15e      	bne.n	80039b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d828      	bhi.n	8003952 <UART_SetConfig+0x44a>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0x400>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800392d 	.word	0x0800392d
 800390c:	08003935 	.word	0x08003935
 8003910:	0800393d 	.word	0x0800393d
 8003914:	08003953 	.word	0x08003953
 8003918:	08003943 	.word	0x08003943
 800391c:	08003953 	.word	0x08003953
 8003920:	08003953 	.word	0x08003953
 8003924:	08003953 	.word	0x08003953
 8003928:	0800394b 	.word	0x0800394b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392c:	f7fe fc80 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8003930:	61f8      	str	r0, [r7, #28]
        break;
 8003932:	e014      	b.n	800395e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003934:	f7fe fc92 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8003938:	61f8      	str	r0, [r7, #28]
        break;
 800393a:	e010      	b.n	800395e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800393c:	4b4d      	ldr	r3, [pc, #308]	; (8003a74 <UART_SetConfig+0x56c>)
 800393e:	61fb      	str	r3, [r7, #28]
        break;
 8003940:	e00d      	b.n	800395e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003942:	f7fe fbdd 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 8003946:	61f8      	str	r0, [r7, #28]
        break;
 8003948:	e009      	b.n	800395e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394e:	61fb      	str	r3, [r7, #28]
        break;
 8003950:	e005      	b.n	800395e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800395c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d077      	beq.n	8003a54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005a      	lsls	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	441a      	add	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d916      	bls.n	80039ae <UART_SetConfig+0x4a6>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d212      	bcs.n	80039ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f023 030f 	bic.w	r3, r3, #15
 8003990:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	b29b      	uxth	r3, r3
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	b29a      	uxth	r2, r3
 800399e:	8afb      	ldrh	r3, [r7, #22]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	8afa      	ldrh	r2, [r7, #22]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e052      	b.n	8003a54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039b4:	e04e      	b.n	8003a54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d827      	bhi.n	8003a0e <UART_SetConfig+0x506>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <UART_SetConfig+0x4bc>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039f9 	.word	0x080039f9
 80039d0:	08003a0f 	.word	0x08003a0f
 80039d4:	080039ff 	.word	0x080039ff
 80039d8:	08003a0f 	.word	0x08003a0f
 80039dc:	08003a0f 	.word	0x08003a0f
 80039e0:	08003a0f 	.word	0x08003a0f
 80039e4:	08003a07 	.word	0x08003a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e8:	f7fe fc22 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 80039ec:	61f8      	str	r0, [r7, #28]
        break;
 80039ee:	e014      	b.n	8003a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7fe fc34 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 80039f4:	61f8      	str	r0, [r7, #28]
        break;
 80039f6:	e010      	b.n	8003a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f8:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <UART_SetConfig+0x56c>)
 80039fa:	61fb      	str	r3, [r7, #28]
        break;
 80039fc:	e00d      	b.n	8003a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fe:	f7fe fb7f 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 8003a02:	61f8      	str	r0, [r7, #28]
        break;
 8003a04:	e009      	b.n	8003a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0a:	61fb      	str	r3, [r7, #28]
        break;
 8003a0c:	e005      	b.n	8003a1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a18:	bf00      	nop
    }

    if (pclk != 0U)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d019      	beq.n	8003a54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	085a      	lsrs	r2, r3, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	d909      	bls.n	8003a4e <UART_SetConfig+0x546>
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d205      	bcs.n	8003a4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	e002      	b.n	8003a54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3728      	adds	r7, #40	; 0x28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	40008000 	.word	0x40008000
 8003a74:	00f42400 	.word	0x00f42400

08003a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01a      	beq.n	8003b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b76:	d10a      	bne.n	8003b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b098      	sub	sp, #96	; 0x60
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bcc:	f7fd f9d6 	bl	8000f7c <HAL_GetTick>
 8003bd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d12e      	bne.n	8003c3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f88c 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d021      	beq.n	8003c3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e062      	b.n	8003d04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d149      	bne.n	8003ce0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f856 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d03c      	beq.n	8003ce0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	623b      	str	r3, [r7, #32]
   return(result);
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
 8003c86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e6      	bne.n	8003c66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb8:	61fa      	str	r2, [r7, #28]
 8003cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e5      	bne.n	8003c98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e011      	b.n	8003d04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3758      	adds	r7, #88	; 0x58
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1c:	e049      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d045      	beq.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fd f929 	bl	8000f7c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e048      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d031      	beq.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d110      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2208      	movs	r2, #8
 8003d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f8ff 	bl	8003f68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e029      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8c:	d111      	bne.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f8e5 	bl	8003f68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e00f      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	bf0c      	ite	eq
 8003dc2:	2301      	moveq	r3, #1
 8003dc4:	2300      	movne	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d0a6      	beq.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b097      	sub	sp, #92	; 0x5c
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d10e      	bne.n	8003e2e <UART_Start_Receive_IT+0x52>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <UART_Start_Receive_IT+0x48>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e22:	e02d      	b.n	8003e80 <UART_Start_Receive_IT+0xa4>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	22ff      	movs	r2, #255	; 0xff
 8003e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e2c:	e028      	b.n	8003e80 <UART_Start_Receive_IT+0xa4>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <UART_Start_Receive_IT+0x76>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <UART_Start_Receive_IT+0x6c>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	22ff      	movs	r2, #255	; 0xff
 8003e42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e46:	e01b      	b.n	8003e80 <UART_Start_Receive_IT+0xa4>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	227f      	movs	r2, #127	; 0x7f
 8003e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e50:	e016      	b.n	8003e80 <UART_Start_Receive_IT+0xa4>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e5a:	d10d      	bne.n	8003e78 <UART_Start_Receive_IT+0x9c>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <UART_Start_Receive_IT+0x92>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	227f      	movs	r2, #127	; 0x7f
 8003e68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e6c:	e008      	b.n	8003e80 <UART_Start_Receive_IT+0xa4>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	223f      	movs	r2, #63	; 0x3f
 8003e72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e76:	e003      	b.n	8003e80 <UART_Start_Receive_IT+0xa4>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2222      	movs	r2, #34	; 0x22
 8003e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3308      	adds	r3, #8
 8003eae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eb0:	64ba      	str	r2, [r7, #72]	; 0x48
 8003eb2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d107      	bne.n	8003ede <UART_Start_Receive_IT+0x102>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <UART_Start_Receive_IT+0x184>)
 8003eda:	669a      	str	r2, [r3, #104]	; 0x68
 8003edc:	e002      	b.n	8003ee4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <UART_Start_Receive_IT+0x188>)
 8003ee2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d019      	beq.n	8003f20 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e6      	bne.n	8003eec <UART_Start_Receive_IT+0x110>
 8003f1e:	e018      	b.n	8003f52 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f043 0320 	orr.w	r3, r3, #32
 8003f34:	653b      	str	r3, [r7, #80]	; 0x50
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	69f9      	ldr	r1, [r7, #28]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	375c      	adds	r7, #92	; 0x5c
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	0800426d 	.word	0x0800426d
 8003f64:	080040b1 	.word	0x080040b1

08003f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b095      	sub	sp, #84	; 0x54
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e6      	bne.n	8003f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e5      	bne.n	8003fa2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d118      	bne.n	8004010 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f023 0310 	bic.w	r3, r3, #16
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6979      	ldr	r1, [r7, #20]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	613b      	str	r3, [r7, #16]
   return(result);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e6      	bne.n	8003fde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004024:	bf00      	nop
 8004026:	3754      	adds	r7, #84	; 0x54
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff fa44 	bl	80034dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	60bb      	str	r3, [r7, #8]
   return(result);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	613b      	str	r3, [r7, #16]
   return(result);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e6      	bne.n	8004064 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb4e 	bl	8004744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a8:	bf00      	nop
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b09c      	sub	sp, #112	; 0x70
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c8:	2b22      	cmp	r3, #34	; 0x22
 80040ca:	f040 80be 	bne.w	800424a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040dc:	b2d9      	uxtb	r1, r3
 80040de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	400a      	ands	r2, r1
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	f040 80a3 	bne.w	800425e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800412c:	66bb      	str	r3, [r7, #104]	; 0x68
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004136:	65bb      	str	r3, [r7, #88]	; 0x58
 8004138:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800413c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e6      	bne.n	8004118 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3308      	adds	r3, #8
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	667b      	str	r3, [r7, #100]	; 0x64
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3308      	adds	r3, #8
 8004168:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800416a:	647a      	str	r2, [r7, #68]	; 0x44
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e5      	bne.n	800414a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a34      	ldr	r2, [pc, #208]	; (8004268 <UART_RxISR_8BIT+0x1b8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d01f      	beq.n	80041dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d018      	beq.n	80041dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	623b      	str	r3, [r7, #32]
   return(result);
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041be:	663b      	str	r3, [r7, #96]	; 0x60
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e6      	bne.n	80041aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d12e      	bne.n	8004242 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	617b      	str	r3, [r7, #20]
   return(result);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d103      	bne.n	8004232 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2210      	movs	r2, #16
 8004230:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff f958 	bl	80034f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004240:	e00d      	b.n	800425e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa48 	bl	80046d8 <HAL_UART_RxCpltCallback>
}
 8004248:	e009      	b.n	800425e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	8b1b      	ldrh	r3, [r3, #24]
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	b292      	uxth	r2, r2
 800425c:	831a      	strh	r2, [r3, #24]
}
 800425e:	bf00      	nop
 8004260:	3770      	adds	r7, #112	; 0x70
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40008000 	.word	0x40008000

0800426c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b09c      	sub	sp, #112	; 0x70
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800427a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004284:	2b22      	cmp	r3, #34	; 0x22
 8004286:	f040 80be 	bne.w	8004406 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004290:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800429a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800429e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80042a2:	4013      	ands	r3, r2
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 80a3 	bne.w	800441a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80042e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042e8:	667b      	str	r3, [r7, #100]	; 0x64
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042f2:	657b      	str	r3, [r7, #84]	; 0x54
 80042f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80042f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e6      	bne.n	80042d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3308      	adds	r3, #8
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	663b      	str	r3, [r7, #96]	; 0x60
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3308      	adds	r3, #8
 8004324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004326:	643a      	str	r2, [r7, #64]	; 0x40
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800432c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e5      	bne.n	8004306 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a34      	ldr	r2, [pc, #208]	; (8004424 <UART_RxISR_16BIT+0x1b8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01f      	beq.n	8004398 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d018      	beq.n	8004398 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	61fb      	str	r3, [r7, #28]
   return(result);
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800437a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800438a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439c:	2b01      	cmp	r3, #1
 800439e:	d12e      	bne.n	80043fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f023 0310 	bic.w	r3, r3, #16
 80043ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6979      	ldr	r1, [r7, #20]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	613b      	str	r3, [r7, #16]
   return(result);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e6      	bne.n	80043a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d103      	bne.n	80043ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2210      	movs	r2, #16
 80043ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff f87a 	bl	80034f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043fc:	e00d      	b.n	800441a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f96a 	bl	80046d8 <HAL_UART_RxCpltCallback>
}
 8004404:	e009      	b.n	800441a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	8b1b      	ldrh	r3, [r3, #24]
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0208 	orr.w	r2, r2, #8
 8004416:	b292      	uxth	r2, r2
 8004418:	831a      	strh	r2, [r3, #24]
}
 800441a:	bf00      	nop
 800441c:	3770      	adds	r7, #112	; 0x70
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40008000 	.word	0x40008000

08004428 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <UART_1_RingBuffer__Initialize>:

/* ************************************************************************************ */
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
et_RET UART_1_RingBuffer__Initialize(void)
{    
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
    /* Clear flags. */
    f_TX = FLAG_OFF;
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <UART_1_RingBuffer__Initialize+0x48>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
    f_RX = FLAG_OFF;
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <UART_1_RingBuffer__Initialize+0x4c>)
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]

    /* Clear callbacks. */
    UART_1_CB__Tx = NULL;
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <UART_1_RingBuffer__Initialize+0x50>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
    UART_1_CB__Rx = NULL;
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <UART_1_RingBuffer__Initialize+0x54>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
        UART1_RxCompleteCallbackRegister(UART_1_ISR__Rx);
        UART1_TxCompleteCallbackRegister(UART_1_ISR__Tx);

    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        MX_USART1_UART_Init();
 8004458:	f7fc fbf8 	bl	8000c4c <MX_USART1_UART_Init>

        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800445c:	2200      	movs	r2, #0
 800445e:	2100      	movs	r1, #0
 8004460:	2025      	movs	r0, #37	; 0x25
 8004462:	f7fc fe96 	bl	8001192 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004466:	2025      	movs	r0, #37	; 0x25
 8004468:	f7fc feaf 	bl	80011ca <HAL_NVIC_EnableIRQ>

        HAL_UART_Receive_IT(&huart1, &g_rx_byte, 1);
 800446c:	2201      	movs	r2, #1
 800446e:	4909      	ldr	r1, [pc, #36]	; (8004494 <UART_1_RingBuffer__Initialize+0x58>)
 8004470:	4809      	ldr	r0, [pc, #36]	; (8004498 <UART_1_RingBuffer__Initialize+0x5c>)
 8004472:	f7fe fcfd 	bl	8002e70 <HAL_UART_Receive_IT>
    
        #warning Function not supported by the current CODE_CONFIGURATOR selected!

    #endif
    
    g_initialized = true;
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <UART_1_RingBuffer__Initialize+0x60>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
    
    return RET_OK;
 800447c:	2300      	movs	r3, #0
} 
 800447e:	4618      	mov	r0, r3
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000232 	.word	0x20000232
 8004488:	20000231 	.word	0x20000231
 800448c:	20000310 	.word	0x20000310
 8004490:	2000030c 	.word	0x2000030c
 8004494:	20000233 	.word	0x20000233
 8004498:	2000011c 	.word	0x2000011c
 800449c:	20000230 	.word	0x20000230

080044a0 <UART_1_RingBuffer__Write>:

et_RET UART_1_RingBuffer__Write(uint8_t * tx_vec,\
                                size_t    tx_vec_size)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <UART_1_RingBuffer__Write+0xa0>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	f083 0301 	eor.w	r3, r3, #1
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00c      	beq.n	80044d2 <UART_1_RingBuffer__Write+0x32>
 80044b8:	4822      	ldr	r0, [pc, #136]	; (8004544 <UART_1_RingBuffer__Write+0xa4>)
 80044ba:	f001 ff37 	bl	800632c <iprintf>
 80044be:	f06f 0006 	mvn.w	r0, #6
 80044c2:	f000 fc13 	bl	8004cec <CeNTI_Debug__Return>
 80044c6:	200a      	movs	r0, #10
 80044c8:	f001 ff42 	bl	8006350 <putchar>
 80044cc:	f06f 0306 	mvn.w	r3, #6
 80044d0:	e031      	b.n	8004536 <UART_1_RingBuffer__Write+0x96>
    #if ((defined(__CENTI_CODE_CONFIGURATOR_MCC__))     ||\
         (defined(__CENTI_CODE_CONFIGURATOR_MELODY__))  ||\
         (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))	)

        /* Check if new data is not bigger than the FIFO size. */
        if (TX_BUFFER_SIZE < tx_vec_size)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b64      	cmp	r3, #100	; 0x64
 80044d6:	d90c      	bls.n	80044f2 <UART_1_RingBuffer__Write+0x52>
        {
            CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 80044d8:	481a      	ldr	r0, [pc, #104]	; (8004544 <UART_1_RingBuffer__Write+0xa4>)
 80044da:	f001 ff27 	bl	800632c <iprintf>
 80044de:	f06f 0002 	mvn.w	r0, #2
 80044e2:	f000 fc03 	bl	8004cec <CeNTI_Debug__Return>
 80044e6:	200a      	movs	r0, #10
 80044e8:	f001 ff32 	bl	8006350 <putchar>
 80044ec:	f06f 0302 	mvn.w	r3, #2
 80044f0:	e021      	b.n	8004536 <UART_1_RingBuffer__Write+0x96>
        /* Send first byte. */
        UART_1_ISR__Tx();

    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        for (uint8_t n_data=0; n_data<tx_vec_size; n_data++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
 80044f6:	e016      	b.n	8004526 <UART_1_RingBuffer__Write+0x86>
        {
            TX_FIFO_Add(tx_vec[n_data]);
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	441a      	add	r2, r3
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <UART_1_RingBuffer__Write+0xa8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	7811      	ldrb	r1, [r2, #0]
 8004504:	4a11      	ldr	r2, [pc, #68]	; (800454c <UART_1_RingBuffer__Write+0xac>)
 8004506:	54d1      	strb	r1, [r2, r3]
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <UART_1_RingBuffer__Write+0xa8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	2b63      	cmp	r3, #99	; 0x63
 8004510:	d803      	bhi.n	800451a <UART_1_RingBuffer__Write+0x7a>
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <UART_1_RingBuffer__Write+0xa8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3301      	adds	r3, #1
 8004518:	e000      	b.n	800451c <UART_1_RingBuffer__Write+0x7c>
 800451a:	2300      	movs	r3, #0
 800451c:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <UART_1_RingBuffer__Write+0xa8>)
 800451e:	6013      	str	r3, [r2, #0]
        for (uint8_t n_data=0; n_data<tx_vec_size; n_data++)
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	3301      	adds	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d8e4      	bhi.n	80044f8 <UART_1_RingBuffer__Write+0x58>
        }

        /* Send first byte. */
        HAL_UART_TxCpltCallback(&huart1);
 800452e:	4808      	ldr	r0, [pc, #32]	; (8004550 <UART_1_RingBuffer__Write+0xb0>)
 8004530:	f000 f908 	bl	8004744 <HAL_UART_TxCpltCallback>
    
        #warning Function not supported by the current CODE_CONFIGURATOR selected!

    #endif

    return RET_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000230 	.word	0x20000230
 8004544:	080071e0 	.word	0x080071e0
 8004548:	20000300 	.word	0x20000300
 800454c:	20000298 	.word	0x20000298
 8004550:	2000011c 	.word	0x2000011c

08004554 <UART_1_RingBuffer__Read>:

et_RET UART_1_RingBuffer__Read(uint8_t * rx_vec,\
                               size_t    rx_vec_size)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <UART_1_RingBuffer__Read+0xcc>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	f083 0301 	eor.w	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00c      	beq.n	8004586 <UART_1_RingBuffer__Read+0x32>
 800456c:	482d      	ldr	r0, [pc, #180]	; (8004624 <UART_1_RingBuffer__Read+0xd0>)
 800456e:	f001 fedd 	bl	800632c <iprintf>
 8004572:	f06f 0006 	mvn.w	r0, #6
 8004576:	f000 fbb9 	bl	8004cec <CeNTI_Debug__Return>
 800457a:	200a      	movs	r0, #10
 800457c:	f001 fee8 	bl	8006350 <putchar>
 8004580:	f06f 0306 	mvn.w	r3, #6
 8004584:	e047      	b.n	8004616 <UART_1_RingBuffer__Read+0xc2>
    /* Check if pointer is not NULL. */
    CENTI_CHECK_PTR(rx_vec);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10c      	bne.n	80045a6 <UART_1_RingBuffer__Read+0x52>
 800458c:	4825      	ldr	r0, [pc, #148]	; (8004624 <UART_1_RingBuffer__Read+0xd0>)
 800458e:	f001 fecd 	bl	800632c <iprintf>
 8004592:	f06f 0004 	mvn.w	r0, #4
 8004596:	f000 fba9 	bl	8004cec <CeNTI_Debug__Return>
 800459a:	200a      	movs	r0, #10
 800459c:	f001 fed8 	bl	8006350 <putchar>
 80045a0:	f06f 0304 	mvn.w	r3, #4
 80045a4:	e037      	b.n	8004616 <UART_1_RingBuffer__Read+0xc2>
    #if ((defined(__CENTI_CODE_CONFIGURATOR_MCC__))     ||\
         (defined(__CENTI_CODE_CONFIGURATOR_MELODY__))  ||\
         (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))	)

        /* Check vector size. */
        if ((rx_vec_size > UART_1_RingBuffer__GetRxRemainSize()) || \
 80045a6:	f000 f845 	bl	8004634 <UART_1_RingBuffer__GetRxRemainSize>
 80045aa:	4602      	mov	r2, r0
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d802      	bhi.n	80045b8 <UART_1_RingBuffer__Read+0x64>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <UART_1_RingBuffer__Read+0x7e>
            (rx_vec_size <= 0))
        {
            CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 80045b8:	481a      	ldr	r0, [pc, #104]	; (8004624 <UART_1_RingBuffer__Read+0xd0>)
 80045ba:	f001 feb7 	bl	800632c <iprintf>
 80045be:	f06f 0002 	mvn.w	r0, #2
 80045c2:	f000 fb93 	bl	8004cec <CeNTI_Debug__Return>
 80045c6:	200a      	movs	r0, #10
 80045c8:	f001 fec2 	bl	8006350 <putchar>
 80045cc:	f06f 0302 	mvn.w	r3, #2
 80045d0:	e021      	b.n	8004616 <UART_1_RingBuffer__Read+0xc2>
        
        f_RX = FLAG_OFF;
        
    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        for (uint8_t n_data=0; n_data<rx_vec_size; n_data++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
 80045d6:	e016      	b.n	8004606 <UART_1_RingBuffer__Read+0xb2>
        {
            RX_FIFO_Get(rx_vec[n_data]);
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <UART_1_RingBuffer__Read+0xd4>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	440b      	add	r3, r1
 80045e2:	4912      	ldr	r1, [pc, #72]	; (800462c <UART_1_RingBuffer__Read+0xd8>)
 80045e4:	5c8a      	ldrb	r2, [r1, r2]
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <UART_1_RingBuffer__Read+0xd4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	2b63      	cmp	r3, #99	; 0x63
 80045f0:	d803      	bhi.n	80045fa <UART_1_RingBuffer__Read+0xa6>
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <UART_1_RingBuffer__Read+0xd4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3301      	adds	r3, #1
 80045f8:	e000      	b.n	80045fc <UART_1_RingBuffer__Read+0xa8>
 80045fa:	2300      	movs	r3, #0
 80045fc:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <UART_1_RingBuffer__Read+0xd4>)
 80045fe:	6013      	str	r3, [r2, #0]
        for (uint8_t n_data=0; n_data<rx_vec_size; n_data++)
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	3301      	adds	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d8e4      	bhi.n	80045d8 <UART_1_RingBuffer__Read+0x84>
        }

        f_RX = FLAG_OFF;
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <UART_1_RingBuffer__Read+0xdc>)
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
    
        #warning Function not supported by the current CODE_CONFIGURATOR selected!

    #endif

    return RET_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000230 	.word	0x20000230
 8004624:	080071e0 	.word	0x080071e0
 8004628:	20000304 	.word	0x20000304
 800462c:	20000234 	.word	0x20000234
 8004630:	20000231 	.word	0x20000231

08004634 <UART_1_RingBuffer__GetRxRemainSize>:
    
    return f_aux_rx;
}

size_t UART_1_RingBuffer__GetRxRemainSize(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
    #if ((defined(__CENTI_CODE_CONFIGURATOR_MCC__))     || \
         (defined(__CENTI_CODE_CONFIGURATOR_MELODY__))  || \
         (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))  )

        return (g_rx_get_idx <= g_rx_set_idx) ? \
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <UART_1_RingBuffer__GetRxRemainSize+0x34>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <UART_1_RingBuffer__GetRxRemainSize+0x38>)
 800463e:	681b      	ldr	r3, [r3, #0]
               (g_rx_set_idx - g_rx_get_idx)  : \
 8004640:	429a      	cmp	r2, r3
 8004642:	d805      	bhi.n	8004650 <UART_1_RingBuffer__GetRxRemainSize+0x1c>
 8004644:	4b09      	ldr	r3, [pc, #36]	; (800466c <UART_1_RingBuffer__GetRxRemainSize+0x38>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <UART_1_RingBuffer__GetRxRemainSize+0x34>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	e005      	b.n	800465c <UART_1_RingBuffer__GetRxRemainSize+0x28>
               ((RX_BUFFER_SIZE - g_rx_get_idx) + g_rx_set_idx);
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <UART_1_RingBuffer__GetRxRemainSize+0x38>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <UART_1_RingBuffer__GetRxRemainSize+0x34>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1ad3      	subs	r3, r2, r3
               (g_rx_set_idx - g_rx_get_idx)  : \
 800465a:	3364      	adds	r3, #100	; 0x64
    #else
        
        return g_rx_total;
        
    #endif
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000304 	.word	0x20000304
 800466c:	200002fc 	.word	0x200002fc

08004670 <UART_1_RingBuffer__GetTxRemainSize>:

size_t UART_1_RingBuffer__GetTxRemainSize(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
    #if ((defined(__CENTI_CODE_CONFIGURATOR_MCC__))     || \
         (defined(__CENTI_CODE_CONFIGURATOR_MELODY__))  || \
         (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))  )

        return (g_tx_get_idx <= g_tx_set_idx) ? \
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <UART_1_RingBuffer__GetTxRemainSize+0x34>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <UART_1_RingBuffer__GetTxRemainSize+0x38>)
 800467a:	681b      	ldr	r3, [r3, #0]
               (g_tx_set_idx - g_tx_get_idx)  : \
 800467c:	429a      	cmp	r2, r3
 800467e:	d805      	bhi.n	800468c <UART_1_RingBuffer__GetTxRemainSize+0x1c>
 8004680:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <UART_1_RingBuffer__GetTxRemainSize+0x38>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <UART_1_RingBuffer__GetTxRemainSize+0x34>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	e005      	b.n	8004698 <UART_1_RingBuffer__GetTxRemainSize+0x28>
               ((TX_BUFFER_SIZE - g_tx_get_idx) + g_tx_set_idx);
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <UART_1_RingBuffer__GetTxRemainSize+0x38>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <UART_1_RingBuffer__GetTxRemainSize+0x34>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1ad3      	subs	r3, r2, r3
               (g_tx_set_idx - g_tx_get_idx)  : \
 8004696:	3364      	adds	r3, #100	; 0x64
    #else
        
        return 0;
        
    #endif
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000308 	.word	0x20000308
 80046a8:	20000300 	.word	0x20000300

080046ac <UART_1_RingBuffer__ClearRxFIFO>:

void UART_1_RingBuffer__ClearRxFIFO(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
    g_rx_set_idx = 0;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <UART_1_RingBuffer__ClearRxFIFO+0x20>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
    g_rx_get_idx = 0;
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <UART_1_RingBuffer__ClearRxFIFO+0x24>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
    f_RX         = FLAG_OFF;
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <UART_1_RingBuffer__ClearRxFIFO+0x28>)
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	200002fc 	.word	0x200002fc
 80046d0:	20000304 	.word	0x20000304
 80046d4:	20000231 	.word	0x20000231

080046d8 <HAL_UART_RxCpltCallback>:
#else

    static void UART_1_ISR__Rx(void)

#endif
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
        f_RX = FLAG_ON;
        
    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        /* Add data to FIFO. */
        RX_FIFO_Add(g_rx_byte);
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_UART_RxCpltCallback+0x54>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a12      	ldr	r2, [pc, #72]	; (8004730 <HAL_UART_RxCpltCallback+0x58>)
 80046e6:	7811      	ldrb	r1, [r2, #0]
 80046e8:	4a12      	ldr	r2, [pc, #72]	; (8004734 <HAL_UART_RxCpltCallback+0x5c>)
 80046ea:	54d1      	strb	r1, [r2, r3]
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <HAL_UART_RxCpltCallback+0x54>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	2b63      	cmp	r3, #99	; 0x63
 80046f4:	d803      	bhi.n	80046fe <HAL_UART_RxCpltCallback+0x26>
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <HAL_UART_RxCpltCallback+0x54>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_UART_RxCpltCallback+0x28>
 80046fe:	2300      	movs	r3, #0
 8004700:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HAL_UART_RxCpltCallback+0x54>)
 8004702:	6013      	str	r3, [r2, #0]

        HAL_UART_Receive_IT(&huart1, &g_rx_byte, 1);
 8004704:	2201      	movs	r2, #1
 8004706:	490a      	ldr	r1, [pc, #40]	; (8004730 <HAL_UART_RxCpltCallback+0x58>)
 8004708:	480b      	ldr	r0, [pc, #44]	; (8004738 <HAL_UART_RxCpltCallback+0x60>)
 800470a:	f7fe fbb1 	bl	8002e70 <HAL_UART_Receive_IT>

        /* Flag. */
        f_RX = FLAG_ON;
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_UART_RxCpltCallback+0x64>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]

        f_RX = FLAG_ON;

    #endif

    if (UART_1_CB__Rx != NULL)
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_UART_RxCpltCallback+0x68>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_UART_RxCpltCallback+0x4a>
    {
        UART_1_CB__Rx();
 800471c:	4b08      	ldr	r3, [pc, #32]	; (8004740 <HAL_UART_RxCpltCallback+0x68>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4798      	blx	r3
    }
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200002fc 	.word	0x200002fc
 8004730:	20000233 	.word	0x20000233
 8004734:	20000234 	.word	0x20000234
 8004738:	2000011c 	.word	0x2000011c
 800473c:	20000231 	.word	0x20000231
 8004740:	2000030c 	.word	0x2000030c

08004744 <HAL_UART_TxCpltCallback>:
#else

    static void UART_1_ISR__Tx(void)

#endif
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
        
        f_TX = FLAG_ON;
        
    #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

        uint8_t tx_byte = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]

        while (UART_1_RingBuffer__GetTxRemainSize() > 0)
 8004750:	e018      	b.n	8004784 <HAL_UART_TxCpltCallback+0x40>
        {
            TX_FIFO_Get(tx_byte);
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <HAL_UART_TxCpltCallback+0x68>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a16      	ldr	r2, [pc, #88]	; (80047b0 <HAL_UART_TxCpltCallback+0x6c>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_UART_TxCpltCallback+0x68>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	2b63      	cmp	r3, #99	; 0x63
 8004764:	d803      	bhi.n	800476e <HAL_UART_TxCpltCallback+0x2a>
 8004766:	4b11      	ldr	r3, [pc, #68]	; (80047ac <HAL_UART_TxCpltCallback+0x68>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3301      	adds	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_UART_TxCpltCallback+0x2c>
 800476e:	2300      	movs	r3, #0
 8004770:	4a0e      	ldr	r2, [pc, #56]	; (80047ac <HAL_UART_TxCpltCallback+0x68>)
 8004772:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(&huart1, &tx_byte, 1, UART1_TIMEOUT_TICK);
 8004774:	f107 010f 	add.w	r1, r7, #15
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	2201      	movs	r2, #1
 800477e:	480d      	ldr	r0, [pc, #52]	; (80047b4 <HAL_UART_TxCpltCallback+0x70>)
 8004780:	f7fe faec 	bl	8002d5c <HAL_UART_Transmit>
        while (UART_1_RingBuffer__GetTxRemainSize() > 0)
 8004784:	f7ff ff74 	bl	8004670 <UART_1_RingBuffer__GetTxRemainSize>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e1      	bne.n	8004752 <HAL_UART_TxCpltCallback+0xe>
        }
        /* Flag. */
        f_RX = FLAG_ON;
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <HAL_UART_TxCpltCallback+0x74>)
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]

        f_TX = FLAG_ON;

    #endif

    if (UART_1_CB__Tx != NULL)
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <HAL_UART_TxCpltCallback+0x78>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_UART_TxCpltCallback+0x5e>
    {
        UART_1_CB__Tx();
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <HAL_UART_TxCpltCallback+0x78>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4798      	blx	r3
    }
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000308 	.word	0x20000308
 80047b0:	20000298 	.word	0x20000298
 80047b4:	2000011c 	.word	0x2000011c
 80047b8:	20000231 	.word	0x20000231
 80047bc:	20000310 	.word	0x20000310

080047c0 <GPIO__MODBUS_DE_SetLevel>:
    /* ******************************************************************************** */
    /* * CUBEMX                                                                       * */
    /* ******************************************************************************** */

    void GPIO__MODBUS_DE_SetLevel (t_LEVEL level)
     {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
     	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, level);
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	461a      	mov	r2, r3
 80047ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047d2:	4803      	ldr	r0, [pc, #12]	; (80047e0 <GPIO__MODBUS_DE_SetLevel+0x20>)
 80047d4:	f7fc ff3c 	bl	8001650 <HAL_GPIO_WritePin>
     }
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	48000800 	.word	0x48000800

080047e4 <ArrayList__Initialize>:
et_RET ArrayList__Initialize(et_ARRAYLIST     et_arraylist,
                             void *           p_vector,
                             size_t           num_elem,
                             size_t           size_elem, 
                             t__ARRAYLIST_cmp cmp_fn)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]
    et_RET et_ret = RET_UNEXPECTED;
 80047f4:	23ff      	movs	r3, #255	; 0xff
 80047f6:	75fb      	strb	r3, [r7, #23]

    CENTI_CHECK_PTR(p_vector);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10c      	bne.n	8004818 <ArrayList__Initialize+0x34>
 80047fe:	4835      	ldr	r0, [pc, #212]	; (80048d4 <ArrayList__Initialize+0xf0>)
 8004800:	f001 fd94 	bl	800632c <iprintf>
 8004804:	f06f 0004 	mvn.w	r0, #4
 8004808:	f000 fa70 	bl	8004cec <CeNTI_Debug__Return>
 800480c:	200a      	movs	r0, #10
 800480e:	f001 fd9f 	bl	8006350 <putchar>
 8004812:	f06f 0304 	mvn.w	r3, #4
 8004816:	e059      	b.n	80048cc <ArrayList__Initialize+0xe8>

    if ((num_elem <= 1) || (size_elem == 0))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d902      	bls.n	8004824 <ArrayList__Initialize+0x40>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10c      	bne.n	800483e <ArrayList__Initialize+0x5a>
    {
        CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 8004824:	482b      	ldr	r0, [pc, #172]	; (80048d4 <ArrayList__Initialize+0xf0>)
 8004826:	f001 fd81 	bl	800632c <iprintf>
 800482a:	f06f 0002 	mvn.w	r0, #2
 800482e:	f000 fa5d 	bl	8004cec <CeNTI_Debug__Return>
 8004832:	200a      	movs	r0, #10
 8004834:	f001 fd8c 	bl	8006350 <putchar>
 8004838:	f06f 0302 	mvn.w	r3, #2
 800483c:	e046      	b.n	80048cc <ArrayList__Initialize+0xe8>
    }

    et_ret = ArrayList__Clear(et_arraylist);
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fa27 	bl	8004c94 <ArrayList__Clear>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]
    CENTI_CHECK_RET(et_ret);
 800484a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da0d      	bge.n	800486e <ArrayList__Initialize+0x8a>
 8004852:	4820      	ldr	r0, [pc, #128]	; (80048d4 <ArrayList__Initialize+0xf0>)
 8004854:	f001 fd6a 	bl	800632c <iprintf>
 8004858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa45 	bl	8004cec <CeNTI_Debug__Return>
 8004862:	200a      	movs	r0, #10
 8004864:	f001 fd74 	bl	8006350 <putchar>
 8004868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800486c:	e02e      	b.n	80048cc <ArrayList__Initialize+0xe8>

    g_arraylist_inst[et_arraylist].p_vector      = (uint8_t *) p_vector;
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	4919      	ldr	r1, [pc, #100]	; (80048d8 <ArrayList__Initialize+0xf4>)
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	601a      	str	r2, [r3, #0]
    g_arraylist_inst[et_arraylist].elem_capacity = num_elem;
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	4915      	ldr	r1, [pc, #84]	; (80048d8 <ArrayList__Initialize+0xf4>)
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	3304      	adds	r3, #4
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]
    g_arraylist_inst[et_arraylist].elem_size     = size_elem;
 8004894:	7bfa      	ldrb	r2, [r7, #15]
 8004896:	4910      	ldr	r1, [pc, #64]	; (80048d8 <ArrayList__Initialize+0xf4>)
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	3308      	adds	r3, #8
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	601a      	str	r2, [r3, #0]

    if (cmp_fn != NULL)
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <ArrayList__Initialize+0xde>
    {
        g_arraylist_inst[et_arraylist].cmp_fn = cmp_fn;
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	4909      	ldr	r1, [pc, #36]	; (80048d8 <ArrayList__Initialize+0xf4>)
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3310      	adds	r3, #16
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	601a      	str	r2, [r3, #0]
    }

    g_initialized_vec[et_arraylist] = true;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	4a05      	ldr	r2, [pc, #20]	; (80048dc <ArrayList__Initialize+0xf8>)
 80048c6:	2101      	movs	r1, #1
 80048c8:	54d1      	strb	r1, [r2, r3]

    return RET_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	080071ec 	.word	0x080071ec
 80048d8:	20000010 	.word	0x20000010
 80048dc:	20000314 	.word	0x20000314

080048e0 <ArrayList__Get>:
}

et_RET ArrayList__Get(et_ARRAYLIST et_arraylist,
                      size_t       index,
                      void *       elem)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_PTR(elem);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10c      	bne.n	800490e <ArrayList__Get+0x2e>
 80048f4:	482d      	ldr	r0, [pc, #180]	; (80049ac <ArrayList__Get+0xcc>)
 80048f6:	f001 fd19 	bl	800632c <iprintf>
 80048fa:	f06f 0004 	mvn.w	r0, #4
 80048fe:	f000 f9f5 	bl	8004cec <CeNTI_Debug__Return>
 8004902:	200a      	movs	r0, #10
 8004904:	f001 fd24 	bl	8006350 <putchar>
 8004908:	f06f 0304 	mvn.w	r3, #4
 800490c:	e049      	b.n	80049a2 <ArrayList__Get+0xc2>
    CENTI_CHECK_INIT(g_initialized_vec[et_arraylist]);
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <ArrayList__Get+0xd0>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	f083 0301 	eor.w	r3, r3, #1
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <ArrayList__Get+0x58>
 800491e:	4823      	ldr	r0, [pc, #140]	; (80049ac <ArrayList__Get+0xcc>)
 8004920:	f001 fd04 	bl	800632c <iprintf>
 8004924:	f06f 0006 	mvn.w	r0, #6
 8004928:	f000 f9e0 	bl	8004cec <CeNTI_Debug__Return>
 800492c:	200a      	movs	r0, #10
 800492e:	f001 fd0f 	bl	8006350 <putchar>
 8004932:	f06f 0306 	mvn.w	r3, #6
 8004936:	e034      	b.n	80049a2 <ArrayList__Get+0xc2>

    if (index >= g_arraylist_inst->elem_counter)
 8004938:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <ArrayList__Get+0xd4>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d30c      	bcc.n	800495c <ArrayList__Get+0x7c>
    {
        CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 8004942:	481a      	ldr	r0, [pc, #104]	; (80049ac <ArrayList__Get+0xcc>)
 8004944:	f001 fcf2 	bl	800632c <iprintf>
 8004948:	f06f 0002 	mvn.w	r0, #2
 800494c:	f000 f9ce 	bl	8004cec <CeNTI_Debug__Return>
 8004950:	200a      	movs	r0, #10
 8004952:	f001 fcfd 	bl	8006350 <putchar>
 8004956:	f06f 0302 	mvn.w	r3, #2
 800495a:	e022      	b.n	80049a2 <ArrayList__Get+0xc2>
    }

    memcpy(elem,
           g_arraylist_inst[et_arraylist].p_vector + (index * g_arraylist_inst[et_arraylist].elem_size),
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	4915      	ldr	r1, [pc, #84]	; (80049b4 <ArrayList__Get+0xd4>)
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	4811      	ldr	r0, [pc, #68]	; (80049b4 <ArrayList__Get+0xd4>)
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4403      	add	r3, r0
 800497a:	3308      	adds	r3, #8
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	4419      	add	r1, r3
    memcpy(elem,
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	480a      	ldr	r0, [pc, #40]	; (80049b4 <ArrayList__Get+0xd4>)
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4403      	add	r3, r0
 8004994:	3308      	adds	r3, #8
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f001 fdb9 	bl	8006512 <memcpy>
           g_arraylist_inst[et_arraylist].elem_size);

    return RET_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	080071ec 	.word	0x080071ec
 80049b0:	20000314 	.word	0x20000314
 80049b4:	20000010 	.word	0x20000010

080049b8 <ArrayList__Add>:

et_RET ArrayList__Add(et_ARRAYLIST et_arraylist,
                      void *       elem)
{
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	6039      	str	r1, [r7, #0]
 80049c2:	71fb      	strb	r3, [r7, #7]
    CENTI_CHECK_PTR(elem);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10c      	bne.n	80049e4 <ArrayList__Add+0x2c>
 80049ca:	4842      	ldr	r0, [pc, #264]	; (8004ad4 <ArrayList__Add+0x11c>)
 80049cc:	f001 fcae 	bl	800632c <iprintf>
 80049d0:	f06f 0004 	mvn.w	r0, #4
 80049d4:	f000 f98a 	bl	8004cec <CeNTI_Debug__Return>
 80049d8:	200a      	movs	r0, #10
 80049da:	f001 fcb9 	bl	8006350 <putchar>
 80049de:	f06f 0304 	mvn.w	r3, #4
 80049e2:	e072      	b.n	8004aca <ArrayList__Add+0x112>
    CENTI_CHECK_INIT(g_initialized_vec[et_arraylist]);
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	4a3c      	ldr	r2, [pc, #240]	; (8004ad8 <ArrayList__Add+0x120>)
 80049e8:	5cd3      	ldrb	r3, [r2, r3]
 80049ea:	f083 0301 	eor.w	r3, r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <ArrayList__Add+0x56>
 80049f4:	4837      	ldr	r0, [pc, #220]	; (8004ad4 <ArrayList__Add+0x11c>)
 80049f6:	f001 fc99 	bl	800632c <iprintf>
 80049fa:	f06f 0006 	mvn.w	r0, #6
 80049fe:	f000 f975 	bl	8004cec <CeNTI_Debug__Return>
 8004a02:	200a      	movs	r0, #10
 8004a04:	f001 fca4 	bl	8006350 <putchar>
 8004a08:	f06f 0306 	mvn.w	r3, #6
 8004a0c:	e05d      	b.n	8004aca <ArrayList__Add+0x112>

    if (g_arraylist_inst[et_arraylist].elem_counter == g_arraylist_inst[et_arraylist].elem_capacity)
 8004a0e:	79fa      	ldrb	r2, [r7, #7]
 8004a10:	4932      	ldr	r1, [pc, #200]	; (8004adc <ArrayList__Add+0x124>)
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	79fa      	ldrb	r2, [r7, #7]
 8004a22:	482e      	ldr	r0, [pc, #184]	; (8004adc <ArrayList__Add+0x124>)
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4403      	add	r3, r0
 8004a2e:	3304      	adds	r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4299      	cmp	r1, r3
 8004a34:	d10c      	bne.n	8004a50 <ArrayList__Add+0x98>
    {
        CENTI_CHECK_RET(RET_FULL);
 8004a36:	4827      	ldr	r0, [pc, #156]	; (8004ad4 <ArrayList__Add+0x11c>)
 8004a38:	f001 fc78 	bl	800632c <iprintf>
 8004a3c:	f06f 0009 	mvn.w	r0, #9
 8004a40:	f000 f954 	bl	8004cec <CeNTI_Debug__Return>
 8004a44:	200a      	movs	r0, #10
 8004a46:	f001 fc83 	bl	8006350 <putchar>
 8004a4a:	f06f 0309 	mvn.w	r3, #9
 8004a4e:	e03c      	b.n	8004aca <ArrayList__Add+0x112>
    }

    memcpy(g_arraylist_inst[et_arraylist].p_vector + (g_arraylist_inst[et_arraylist].elem_counter * g_arraylist_inst[et_arraylist].elem_size),
 8004a50:	79fa      	ldrb	r2, [r7, #7]
 8004a52:	4922      	ldr	r1, [pc, #136]	; (8004adc <ArrayList__Add+0x124>)
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	79fa      	ldrb	r2, [r7, #7]
 8004a62:	481e      	ldr	r0, [pc, #120]	; (8004adc <ArrayList__Add+0x124>)
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4403      	add	r3, r0
 8004a6e:	330c      	adds	r3, #12
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	79fa      	ldrb	r2, [r7, #7]
 8004a74:	4c19      	ldr	r4, [pc, #100]	; (8004adc <ArrayList__Add+0x124>)
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4423      	add	r3, r4
 8004a80:	3308      	adds	r3, #8
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	fb00 f303 	mul.w	r3, r0, r3
 8004a88:	18c8      	adds	r0, r1, r3
 8004a8a:	79fa      	ldrb	r2, [r7, #7]
 8004a8c:	4913      	ldr	r1, [pc, #76]	; (8004adc <ArrayList__Add+0x124>)
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	440b      	add	r3, r1
 8004a98:	3308      	adds	r3, #8
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6839      	ldr	r1, [r7, #0]
 8004aa0:	f001 fd37 	bl	8006512 <memcpy>
           elem,
           g_arraylist_inst[et_arraylist].elem_size);
    g_arraylist_inst[et_arraylist].elem_counter++;
 8004aa4:	79fa      	ldrb	r2, [r7, #7]
 8004aa6:	490d      	ldr	r1, [pc, #52]	; (8004adc <ArrayList__Add+0x124>)
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	4808      	ldr	r0, [pc, #32]	; (8004adc <ArrayList__Add+0x124>)
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4403      	add	r3, r0
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	6019      	str	r1, [r3, #0]

    return RET_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	080071ec 	.word	0x080071ec
 8004ad8:	20000314 	.word	0x20000314
 8004adc:	20000010 	.word	0x20000010

08004ae0 <ArrayList__RemoveAt>:

et_RET ArrayList__RemoveAt(et_ARRAYLIST et_arraylist,
                           size_t       index)
{
 8004ae0:	b5b0      	push	{r4, r5, r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	6039      	str	r1, [r7, #0]
 8004aea:	71fb      	strb	r3, [r7, #7]
    CENTI_CHECK_INIT(g_initialized_vec[et_arraylist]);
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	4a5b      	ldr	r2, [pc, #364]	; (8004c5c <ArrayList__RemoveAt+0x17c>)
 8004af0:	5cd3      	ldrb	r3, [r2, r3]
 8004af2:	f083 0301 	eor.w	r3, r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00c      	beq.n	8004b16 <ArrayList__RemoveAt+0x36>
 8004afc:	4858      	ldr	r0, [pc, #352]	; (8004c60 <ArrayList__RemoveAt+0x180>)
 8004afe:	f001 fc15 	bl	800632c <iprintf>
 8004b02:	f06f 0006 	mvn.w	r0, #6
 8004b06:	f000 f8f1 	bl	8004cec <CeNTI_Debug__Return>
 8004b0a:	200a      	movs	r0, #10
 8004b0c:	f001 fc20 	bl	8006350 <putchar>
 8004b10:	f06f 0306 	mvn.w	r3, #6
 8004b14:	e09d      	b.n	8004c52 <ArrayList__RemoveAt+0x172>

    if (index >= g_arraylist_inst[et_arraylist].elem_counter)
 8004b16:	79fa      	ldrb	r2, [r7, #7]
 8004b18:	4952      	ldr	r1, [pc, #328]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	330c      	adds	r3, #12
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d30c      	bcc.n	8004b48 <ArrayList__RemoveAt+0x68>
    {
        CENTI_CHECK_RET(RET_INVALID_PARAMETER);
 8004b2e:	484c      	ldr	r0, [pc, #304]	; (8004c60 <ArrayList__RemoveAt+0x180>)
 8004b30:	f001 fbfc 	bl	800632c <iprintf>
 8004b34:	f06f 0002 	mvn.w	r0, #2
 8004b38:	f000 f8d8 	bl	8004cec <CeNTI_Debug__Return>
 8004b3c:	200a      	movs	r0, #10
 8004b3e:	f001 fc07 	bl	8006350 <putchar>
 8004b42:	f06f 0302 	mvn.w	r3, #2
 8004b46:	e084      	b.n	8004c52 <ArrayList__RemoveAt+0x172>
    }
    
    memmove(g_arraylist_inst[et_arraylist].p_vector + (index * g_arraylist_inst[et_arraylist].elem_size),
 8004b48:	79fa      	ldrb	r2, [r7, #7]
 8004b4a:	4946      	ldr	r1, [pc, #280]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	79fa      	ldrb	r2, [r7, #7]
 8004b5a:	4842      	ldr	r0, [pc, #264]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4403      	add	r3, r0
 8004b66:	3308      	adds	r3, #8
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	18cc      	adds	r4, r1, r3
            g_arraylist_inst[et_arraylist].p_vector + ((index + 1) * g_arraylist_inst[et_arraylist].elem_size),
 8004b72:	79fa      	ldrb	r2, [r7, #7]
 8004b74:	493b      	ldr	r1, [pc, #236]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	6819      	ldr	r1, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	1c58      	adds	r0, r3, #1
 8004b86:	79fa      	ldrb	r2, [r7, #7]
 8004b88:	4d36      	ldr	r5, [pc, #216]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	442b      	add	r3, r5
 8004b94:	3308      	adds	r3, #8
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	fb00 f303 	mul.w	r3, r0, r3
 8004b9c:	18c8      	adds	r0, r1, r3
            ((g_arraylist_inst[et_arraylist].elem_counter - 1) - index) * g_arraylist_inst[et_arraylist].elem_size);
 8004b9e:	79fa      	ldrb	r2, [r7, #7]
 8004ba0:	4930      	ldr	r1, [pc, #192]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	330c      	adds	r3, #12
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	1e59      	subs	r1, r3, #1
 8004bb6:	79fa      	ldrb	r2, [r7, #7]
 8004bb8:	4d2a      	ldr	r5, [pc, #168]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	442b      	add	r3, r5
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	681b      	ldr	r3, [r3, #0]
    memmove(g_arraylist_inst[et_arraylist].p_vector + (index * g_arraylist_inst[et_arraylist].elem_size),
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4601      	mov	r1, r0
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f001 fc08 	bl	80063e6 <memmove>
    
    memset(g_arraylist_inst[et_arraylist].p_vector + ((g_arraylist_inst[et_arraylist].elem_counter - 1) * g_arraylist_inst[et_arraylist].elem_size),
 8004bd6:	79fa      	ldrb	r2, [r7, #7]
 8004bd8:	4922      	ldr	r1, [pc, #136]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	79fa      	ldrb	r2, [r7, #7]
 8004be8:	481e      	ldr	r0, [pc, #120]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4403      	add	r3, r0
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	1e58      	subs	r0, r3, #1
 8004bfa:	79fa      	ldrb	r2, [r7, #7]
 8004bfc:	4c19      	ldr	r4, [pc, #100]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4423      	add	r3, r4
 8004c08:	3308      	adds	r3, #8
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	fb00 f303 	mul.w	r3, r0, r3
 8004c10:	18c8      	adds	r0, r1, r3
 8004c12:	79fa      	ldrb	r2, [r7, #7]
 8004c14:	4913      	ldr	r1, [pc, #76]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3308      	adds	r3, #8
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	2100      	movs	r1, #0
 8004c28:	f001 fbf7 	bl	800641a <memset>
           0,
           g_arraylist_inst[et_arraylist].elem_size);

    g_arraylist_inst[et_arraylist].elem_counter--;
 8004c2c:	79fa      	ldrb	r2, [r7, #7]
 8004c2e:	490d      	ldr	r1, [pc, #52]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	1e59      	subs	r1, r3, #1
 8004c40:	4808      	ldr	r0, [pc, #32]	; (8004c64 <ArrayList__RemoveAt+0x184>)
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4403      	add	r3, r0
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	6019      	str	r1, [r3, #0]

    return RET_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000314 	.word	0x20000314
 8004c60:	080071ec 	.word	0x080071ec
 8004c64:	20000010 	.word	0x20000010

08004c68 <ArrayList__Get_ElementCounter>:

    return RET_OK;
}

size_t ArrayList__Get_ElementCounter(et_ARRAYLIST et_arraylist)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
    return g_arraylist_inst[et_arraylist].elem_counter;
 8004c72:	79fa      	ldrb	r2, [r7, #7]
 8004c74:	4906      	ldr	r1, [pc, #24]	; (8004c90 <ArrayList__Get_ElementCounter+0x28>)
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	330c      	adds	r3, #12
 8004c82:	681b      	ldr	r3, [r3, #0]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000010 	.word	0x20000010

08004c94 <ArrayList__Clear>:

et_RET ArrayList__Clear(et_ARRAYLIST et_arraylist)
{
 8004c94:	b4b0      	push	{r4, r5, r7}
 8004c96:	b089      	sub	sp, #36	; 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
    st_ARRAYLIST clear_arraylist   = STRUCT_ARRAYLIST_INIT;
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <ArrayList__Clear+0x4c>)
 8004ca0:	f107 040c 	add.w	r4, r7, #12
 8004ca4:	461d      	mov	r5, r3
 8004ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	6023      	str	r3, [r4, #0]
    g_arraylist_inst[et_arraylist] = clear_arraylist;
 8004cae:	79fa      	ldrb	r2, [r7, #7]
 8004cb0:	490c      	ldr	r1, [pc, #48]	; (8004ce4 <ArrayList__Clear+0x50>)
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	461d      	mov	r5, r3
 8004cbe:	f107 040c 	add.w	r4, r7, #12
 8004cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	602b      	str	r3, [r5, #0]

    g_initialized_vec[et_arraylist] = false;
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <ArrayList__Clear+0x54>)
 8004cce:	2100      	movs	r1, #0
 8004cd0:	54d1      	strb	r1, [r2, r3]

    return RET_OK;    
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3724      	adds	r7, #36	; 0x24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bcb0      	pop	{r4, r5, r7}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	080071f8 	.word	0x080071f8
 8004ce4:	20000010 	.word	0x20000010
 8004ce8:	20000314 	.word	0x20000314

08004cec <CeNTI_Debug__Return>:
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
#if (CENTI_DEBUG_MSG_TYPE & CENTI_DEBUG_MSG_TYPE_RETURN)

    void CeNTI_Debug__Return(et_RET et_ret)
    {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
        for (uint8_t ret_idx=0; ret_idx<CENTI_DEBUG_MSG_RET_TOTAL; ret_idx++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e01a      	b.n	8004d32 <CeNTI_Debug__Return+0x46>
        {
            if (ret_idx == CENTI_DEBUG_MSG_RET_TOTAL)
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b14      	cmp	r3, #20
 8004d00:	d104      	bne.n	8004d0c <CeNTI_Debug__Return+0x20>
            {
                CENTI_DEBUG__Output("%s", CENTI_DEBUG_MSG_NOT_AVAILABLE);
 8004d02:	4910      	ldr	r1, [pc, #64]	; (8004d44 <CeNTI_Debug__Return+0x58>)
 8004d04:	4810      	ldr	r0, [pc, #64]	; (8004d48 <CeNTI_Debug__Return+0x5c>)
 8004d06:	f001 fb11 	bl	800632c <iprintf>
                break;
 8004d0a:	e016      	b.n	8004d3a <CeNTI_Debug__Return+0x4e>
            }
            if (RET_VEC[ret_idx] == et_ret)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <CeNTI_Debug__Return+0x60>)
 8004d10:	56d3      	ldrsb	r3, [r2, r3]
 8004d12:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d108      	bne.n	8004d2c <CeNTI_Debug__Return+0x40>
            {
                CENTI_DEBUG__Output("%s", RET_MSG_VEC[ret_idx]);
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <CeNTI_Debug__Return+0x64>)
 8004d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d22:	4619      	mov	r1, r3
 8004d24:	4808      	ldr	r0, [pc, #32]	; (8004d48 <CeNTI_Debug__Return+0x5c>)
 8004d26:	f001 fb01 	bl	800632c <iprintf>
                break;
 8004d2a:	e006      	b.n	8004d3a <CeNTI_Debug__Return+0x4e>
        for (uint8_t ret_idx=0; ret_idx<CENTI_DEBUG_MSG_RET_TOTAL; ret_idx++)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b13      	cmp	r3, #19
 8004d36:	d9e1      	bls.n	8004cfc <CeNTI_Debug__Return+0x10>
            }
        }
    }
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	08007304 	.word	0x08007304
 8004d48:	08007318 	.word	0x08007318
 8004d4c:	080076f4 	.word	0x080076f4
 8004d50:	20000024 	.word	0x20000024

08004d54 <SoftTimer__Initialize>:

/* ************************************************************************************ */
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
et_RET SoftTimer__Initialize(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
    et_RET et_ret = RET_UNEXPECTED;
 8004d5a:	23ff      	movs	r3, #255	; 0xff
 8004d5c:	71bb      	strb	r3, [r7, #6]
                 (sc == SL_STATUS_NULL_POINTER) ? RET_NULL_POINTER  : \
                                                  RET_FAIL          ;

    #elif (CENTI_SOFTTIMER_TIMER == CENTI_SOFTTIMER_TIMER_HAL)

        HAL_InitTick(TICK_INT_PRIORITY);
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f7fc f8d0 	bl	8000f04 <HAL_InitTick>

        et_ret = RET_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	71bb      	strb	r3, [r7, #6]
        #error Define CENTI_SOFTTIMER_TIMER in the Project/CeNTI/Defines/SoftTimer_defines.h file!
        
    #endif

    /* Check if return is not RET_OK. */
    CENTI_CHECK_RET(et_ret);
 8004d68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	da0d      	bge.n	8004d8c <SoftTimer__Initialize+0x38>
 8004d70:	481b      	ldr	r0, [pc, #108]	; (8004de0 <SoftTimer__Initialize+0x8c>)
 8004d72:	f001 fadb 	bl	800632c <iprintf>
 8004d76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ffb6 	bl	8004cec <CeNTI_Debug__Return>
 8004d80:	200a      	movs	r0, #10
 8004d82:	f001 fae5 	bl	8006350 <putchar>
 8004d86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d8a:	e024      	b.n	8004dd6 <SoftTimer__Initialize+0x82>

    /* Indicate that initialization is complete. */
    g_initialized = true;
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <SoftTimer__Initialize+0x90>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
    
    /* Stop all the SoftTimers. */
    for (uint8_t idx=0; idx<SOFTTIMER_INSTANCE_TOTAL; idx++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	71fb      	strb	r3, [r7, #7]
 8004d96:	e01a      	b.n	8004dce <SoftTimer__Initialize+0x7a>
    {
        /* Stop timer. */
        et_ret = SoftTimer__Stop(idx);
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f8e4 	bl	8004f68 <SoftTimer__Stop>
 8004da0:	4603      	mov	r3, r0
 8004da2:	71bb      	strb	r3, [r7, #6]
        CENTI_CHECK_RET(et_ret);
 8004da4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da0d      	bge.n	8004dc8 <SoftTimer__Initialize+0x74>
 8004dac:	480c      	ldr	r0, [pc, #48]	; (8004de0 <SoftTimer__Initialize+0x8c>)
 8004dae:	f001 fabd 	bl	800632c <iprintf>
 8004db2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff ff98 	bl	8004cec <CeNTI_Debug__Return>
 8004dbc:	200a      	movs	r0, #10
 8004dbe:	f001 fac7 	bl	8006350 <putchar>
 8004dc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004dc6:	e006      	b.n	8004dd6 <SoftTimer__Initialize+0x82>
    for (uint8_t idx=0; idx<SOFTTIMER_INSTANCE_TOTAL; idx++)
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	71fb      	strb	r3, [r7, #7]
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d9e1      	bls.n	8004d98 <SoftTimer__Initialize+0x44>
    
    #if (CENTI_SOFTTIMER_DEBUG == CENTI_ENABLE)
        CENTI_DEBUG__Info("SoftTimer initialization complete!");
    #endif
    
    return RET_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	0800731c 	.word	0x0800731c
 8004de4:	20000374 	.word	0x20000374

08004de8 <SoftTimer__Delay_msec>:

et_RET SoftTimer__Delay_msec(t_time_msec delay_msec)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	80fb      	strh	r3, [r7, #6]
    et_RET  et_ret        = RET_UNEXPECTED;
 8004df2:	23ff      	movs	r3, #255	; 0xff
 8004df4:	75fb      	strb	r3, [r7, #23]
    st_TIME st_delay_time = {};
 8004df6:	f107 030c 	add.w	r3, r7, #12
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
    
    #if (CENTI_SOFTTIMER_DEBUG == CENTI_ENABLE)
        CENTI_DEBUG__Info("SoftTimer - Delay of %u msec", delay_msec);
    #endif
    
    st_delay_time.sec  = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
    st_delay_time.msec = delay_msec;
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	81bb      	strh	r3, [r7, #12]
    
    /* Start timer. */
    et_ret = SoftTimer__Start(SOFTTIMER_INSTANCE_DELAY, st_delay_time);
 8004e08:	f107 030c 	add.w	r3, r7, #12
 8004e0c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e10:	2000      	movs	r0, #0
 8004e12:	f000 f839 	bl	8004e88 <SoftTimer__Start>
 8004e16:	4603      	mov	r3, r0
 8004e18:	75fb      	strb	r3, [r7, #23]
    CENTI_CHECK_RET(et_ret);
 8004e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da0d      	bge.n	8004e3e <SoftTimer__Delay_msec+0x56>
 8004e22:	4818      	ldr	r0, [pc, #96]	; (8004e84 <SoftTimer__Delay_msec+0x9c>)
 8004e24:	f001 fa82 	bl	800632c <iprintf>
 8004e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ff5d 	bl	8004cec <CeNTI_Debug__Return>
 8004e32:	200a      	movs	r0, #10
 8004e34:	f001 fa8c 	bl	8006350 <putchar>
 8004e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e3c:	e01e      	b.n	8004e7c <SoftTimer__Delay_msec+0x94>
    
    /* Wait. */
    while (SOFTTIMER_ELAPSED_STATE_NOT_ELAPSED ==\
 8004e3e:	bf00      	nop
            SoftTimer__Get_ElapsedState(SOFTTIMER_INSTANCE_DELAY))
 8004e40:	2000      	movs	r0, #0
 8004e42:	f000 f92f 	bl	80050a4 <SoftTimer__Get_ElapsedState>
 8004e46:	4603      	mov	r3, r0
    while (SOFTTIMER_ELAPSED_STATE_NOT_ELAPSED ==\
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f9      	beq.n	8004e40 <SoftTimer__Delay_msec+0x58>
    {
        /* Stay here while delay time has not passed. */
    }

    /* Stop timer. */
    et_ret = SoftTimer__Stop(SOFTTIMER_INSTANCE_DELAY);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f000 f88b 	bl	8004f68 <SoftTimer__Stop>
 8004e52:	4603      	mov	r3, r0
 8004e54:	75fb      	strb	r3, [r7, #23]
    CENTI_CHECK_RET(et_ret);
 8004e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da0d      	bge.n	8004e7a <SoftTimer__Delay_msec+0x92>
 8004e5e:	4809      	ldr	r0, [pc, #36]	; (8004e84 <SoftTimer__Delay_msec+0x9c>)
 8004e60:	f001 fa64 	bl	800632c <iprintf>
 8004e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff ff3f 	bl	8004cec <CeNTI_Debug__Return>
 8004e6e:	200a      	movs	r0, #10
 8004e70:	f001 fa6e 	bl	8006350 <putchar>
 8004e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e78:	e000      	b.n	8004e7c <SoftTimer__Delay_msec+0x94>
    
    return RET_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	0800731c 	.word	0x0800731c

08004e88 <SoftTimer__Start>:
    return RET_OK;
}

et_RET SoftTimer__Start(et_SOFTTIMER_INSTANCE et_softtimer,\
                        st_TIME               st_timer_time)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b089      	sub	sp, #36	; 0x24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	f107 030c 	add.w	r3, r7, #12
 8004e92:	e883 0006 	stmia.w	r3, {r1, r2}
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <SoftTimer__Start+0xd0>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	f083 0301 	eor.w	r3, r3, #1
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00c      	beq.n	8004ec2 <SoftTimer__Start+0x3a>
 8004ea8:	482c      	ldr	r0, [pc, #176]	; (8004f5c <SoftTimer__Start+0xd4>)
 8004eaa:	f001 fa3f 	bl	800632c <iprintf>
 8004eae:	f06f 0006 	mvn.w	r0, #6
 8004eb2:	f7ff ff1b 	bl	8004cec <CeNTI_Debug__Return>
 8004eb6:	200a      	movs	r0, #10
 8004eb8:	f001 fa4a 	bl	8006350 <putchar>
 8004ebc:	f06f 0306 	mvn.w	r3, #6
 8004ec0:	e046      	b.n	8004f50 <SoftTimer__Start+0xc8>
    
    /* Initialize all the timer variables.
     * If timer is already initialized, it will reset all values and do a restart. */
    /* Set running state to running. */
    g_st_softtimers_vec[et_softtimer].et_running_state =\
 8004ec2:	7dfa      	ldrb	r2, [r7, #23]
 8004ec4:	4926      	ldr	r1, [pc, #152]	; (8004f60 <SoftTimer__Start+0xd8>)
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_RUNNING_STATE_RUNNING;
    /* Clear elapsed state. */
    g_st_softtimers_vec[et_softtimer].et_elapsed_state =\
 8004ed6:	7dfa      	ldrb	r2, [r7, #23]
 8004ed8:	4921      	ldr	r1, [pc, #132]	; (8004f60 <SoftTimer__Start+0xd8>)
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3319      	adds	r3, #25
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_ELAPSED_STATE_NOT_ELAPSED;
    /* Set the timer value. */
    g_st_softtimers_vec[et_softtimer].st_delay_time =\
 8004eea:	7dfa      	ldrb	r2, [r7, #23]
 8004eec:	491c      	ldr	r1, [pc, #112]	; (8004f60 <SoftTimer__Start+0xd8>)
 8004eee:	4613      	mov	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3308      	adds	r3, #8
 8004efa:	461a      	mov	r2, r3
 8004efc:	f107 030c 	add.w	r3, r7, #12
 8004f00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f04:	e882 0003 	stmia.w	r2, {r0, r1}
            st_timer_time;
    /* Update start timer value. */
    g_st_softtimers_vec[et_softtimer].st_start_time =\
 8004f08:	7dfa      	ldrb	r2, [r7, #23]
 8004f0a:	4915      	ldr	r1, [pc, #84]	; (8004f60 <SoftTimer__Start+0xd8>)
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <SoftTimer__Start+0xdc>)
 8004f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f1c:	e883 0003 	stmia.w	r3, {r0, r1}
            g_st_time_counter;
    /* Add start time and timer value to find the stop time. */
    g_st_softtimers_vec[et_softtimer].st_stop_time =\
 8004f20:	7dfa      	ldrb	r2, [r7, #23]
            Time__Add_Times(g_st_time_counter, st_timer_time);
 8004f22:	490f      	ldr	r1, [pc, #60]	; (8004f60 <SoftTimer__Start+0xd8>)
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	f103 0410 	add.w	r4, r3, #16
 8004f32:	4638      	mov	r0, r7
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <SoftTimer__Start+0xdc>)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	ca06      	ldmia	r2, {r1, r2}
 8004f3e:	f000 f9a1 	bl	8005284 <Time__Add_Times>
 8004f42:	4622      	mov	r2, r4
 8004f44:	463b      	mov	r3, r7
 8004f46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f4a:	e882 0003 	stmia.w	r2, {r0, r1}
            CENTI_DEBUG__Info("Actual time: %d", g_st_time_counter.sec);
            CENTI_DEBUG__Info("Stop time: %d", g_st_softtimers_vec[et_softtimer].st_stop_time.sec);
        }
    #endif
    
    return RET_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd90      	pop	{r4, r7, pc}
 8004f58:	20000374 	.word	0x20000374
 8004f5c:	0800731c 	.word	0x0800731c
 8004f60:	20000318 	.word	0x20000318
 8004f64:	2000036c 	.word	0x2000036c

08004f68 <SoftTimer__Stop>:

et_RET SoftTimer__Stop(et_SOFTTIMER_INSTANCE et_softtimer)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 8004f72:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <SoftTimer__Stop+0x64>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f083 0301 	eor.w	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00c      	beq.n	8004f9a <SoftTimer__Stop+0x32>
 8004f80:	4813      	ldr	r0, [pc, #76]	; (8004fd0 <SoftTimer__Stop+0x68>)
 8004f82:	f001 f9d3 	bl	800632c <iprintf>
 8004f86:	f06f 0006 	mvn.w	r0, #6
 8004f8a:	f7ff feaf 	bl	8004cec <CeNTI_Debug__Return>
 8004f8e:	200a      	movs	r0, #10
 8004f90:	f001 f9de 	bl	8006350 <putchar>
 8004f94:	f06f 0306 	mvn.w	r3, #6
 8004f98:	e014      	b.n	8004fc4 <SoftTimer__Stop+0x5c>
    
    /* Clear running state. */
    g_st_softtimers_vec[et_softtimer].et_running_state =\
 8004f9a:	79fa      	ldrb	r2, [r7, #7]
 8004f9c:	490d      	ldr	r1, [pc, #52]	; (8004fd4 <SoftTimer__Stop+0x6c>)
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3318      	adds	r3, #24
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_RUNNING_STATE_STOPPED;
    /* Clear elapsed state. */
    g_st_softtimers_vec[et_softtimer].et_elapsed_state =\
 8004fae:	79fa      	ldrb	r2, [r7, #7]
 8004fb0:	4908      	ldr	r1, [pc, #32]	; (8004fd4 <SoftTimer__Stop+0x6c>)
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3319      	adds	r3, #25
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
            CENTI_DEBUG__Info("SoftTimer - Stop timer");
            CENTI_DEBUG__Info("SoftTimer ID: %d", et_softtimer);
        }
    #endif
    
    return RET_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000374 	.word	0x20000374
 8004fd0:	0800731c 	.word	0x0800731c
 8004fd4:	20000318 	.word	0x20000318

08004fd8 <SoftTimer__Restart>:

et_RET SoftTimer__Restart(et_SOFTTIMER_INSTANCE et_softtimer)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	4603      	mov	r3, r0
 8004fe0:	73fb      	strb	r3, [r7, #15]
    /* Check if initialization was successfully complete. */
    CENTI_CHECK_INIT(g_initialized);
 8004fe2:	4b2c      	ldr	r3, [pc, #176]	; (8005094 <SoftTimer__Restart+0xbc>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	f083 0301 	eor.w	r3, r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00c      	beq.n	800500a <SoftTimer__Restart+0x32>
 8004ff0:	4829      	ldr	r0, [pc, #164]	; (8005098 <SoftTimer__Restart+0xc0>)
 8004ff2:	f001 f99b 	bl	800632c <iprintf>
 8004ff6:	f06f 0006 	mvn.w	r0, #6
 8004ffa:	f7ff fe77 	bl	8004cec <CeNTI_Debug__Return>
 8004ffe:	200a      	movs	r0, #10
 8005000:	f001 f9a6 	bl	8006350 <putchar>
 8005004:	f06f 0306 	mvn.w	r3, #6
 8005008:	e03f      	b.n	800508a <SoftTimer__Restart+0xb2>
    
    /* Update start time. */
    g_st_softtimers_vec[et_softtimer].st_start_time =\
 800500a:	7bfa      	ldrb	r2, [r7, #15]
 800500c:	4923      	ldr	r1, [pc, #140]	; (800509c <SoftTimer__Restart+0xc4>)
 800500e:	4613      	mov	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <SoftTimer__Restart+0xc8>)
 800501a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800501e:	e883 0003 	stmia.w	r3, {r0, r1}
            g_st_time_counter;
    /* Change running state to running. */
    g_st_softtimers_vec[et_softtimer].et_running_state =\
 8005022:	7bfa      	ldrb	r2, [r7, #15]
 8005024:	491d      	ldr	r1, [pc, #116]	; (800509c <SoftTimer__Restart+0xc4>)
 8005026:	4613      	mov	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	3318      	adds	r3, #24
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_RUNNING_STATE_RUNNING;
    /* Clear elapsed state. */
    g_st_softtimers_vec[et_softtimer].et_elapsed_state =\
 8005036:	7bfa      	ldrb	r2, [r7, #15]
 8005038:	4918      	ldr	r1, [pc, #96]	; (800509c <SoftTimer__Restart+0xc4>)
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3319      	adds	r3, #25
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
            SOFTTIMER_ELAPSED_STATE_NOT_ELAPSED;
    /* Add start time and timer value to find the stop time. */
    g_st_softtimers_vec[et_softtimer].st_stop_time =\
            Time__Add_Times(g_st_time_counter,\
 800504a:	7bfa      	ldrb	r2, [r7, #15]
    g_st_softtimers_vec[et_softtimer].st_stop_time =\
 800504c:	7bf9      	ldrb	r1, [r7, #15]
            Time__Add_Times(g_st_time_counter,\
 800504e:	4813      	ldr	r0, [pc, #76]	; (800509c <SoftTimer__Restart+0xc4>)
 8005050:	460b      	mov	r3, r1
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	1a5b      	subs	r3, r3, r1
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4403      	add	r3, r0
 800505a:	f103 0410 	add.w	r4, r3, #16
 800505e:	4638      	mov	r0, r7
 8005060:	490e      	ldr	r1, [pc, #56]	; (800509c <SoftTimer__Restart+0xc4>)
 8005062:	4613      	mov	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3308      	adds	r3, #8
 800506e:	490c      	ldr	r1, [pc, #48]	; (80050a0 <SoftTimer__Restart+0xc8>)
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	9200      	str	r2, [sp, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	c906      	ldmia	r1, {r1, r2}
 8005078:	f000 f904 	bl	8005284 <Time__Add_Times>
 800507c:	4622      	mov	r2, r4
 800507e:	463b      	mov	r3, r7
 8005080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005084:	e882 0003 	stmia.w	r2, {r0, r1}
            CENTI_DEBUG__Info("Actual time: %d sec", g_st_time_counter.sec);
            CENTI_DEBUG__Info("Stop time: %d sec", g_st_softtimers_vec[et_softtimer].st_stop_time.sec);
        }
    #endif
    
    return RET_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	20000374 	.word	0x20000374
 8005098:	0800731c 	.word	0x0800731c
 800509c:	20000318 	.word	0x20000318
 80050a0:	2000036c 	.word	0x2000036c

080050a4 <SoftTimer__Get_ElapsedState>:
    return g_st_softtimers_vec[et_softtimer].et_running_state;
}

et_SOFTTIMER_ELAPSED_STATE SoftTimer__Get_ElapsedState(\
        et_SOFTTIMER_INSTANCE et_softtimer)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	71fb      	strb	r3, [r7, #7]
    /* Update timer state. */
    SoftTimer_PRIV__CheckTimer(et_softtimer);
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f81f 	bl	80050f4 <SoftTimer_PRIV__CheckTimer>
    
    /* Return state. */
    return g_st_softtimers_vec[et_softtimer].et_elapsed_state;
 80050b6:	79fa      	ldrb	r2, [r7, #7]
 80050b8:	4905      	ldr	r1, [pc, #20]	; (80050d0 <SoftTimer__Get_ElapsedState+0x2c>)
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	3319      	adds	r3, #25
 80050c6:	781b      	ldrb	r3, [r3, #0]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000318 	.word	0x20000318

080050d4 <HAL_IncTick>:
#else

    static void SoftTimer_ISR__TimerInterrupt(void)

#endif
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
                Time__Add_msec(&g_st_time_counter);
            }

        #elif (defined(__CENTI_CODE_CONFIGURATOR_CUBEMX__))

            uwTick += HAL_TICK_FREQ_DEFAULT;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <HAL_IncTick+0x18>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3301      	adds	r3, #1
 80050de:	4a03      	ldr	r2, [pc, #12]	; (80050ec <HAL_IncTick+0x18>)
 80050e0:	6013      	str	r3, [r2, #0]
            Time__Add_msec(&g_st_time_counter);
 80050e2:	4803      	ldr	r0, [pc, #12]	; (80050f0 <HAL_IncTick+0x1c>)
 80050e4:	f000 f84a 	bl	800517c <Time__Add_msec>
            Time__Add_msec(&g_st_time_counter);

        #endif

    #endif
}
 80050e8:	bf00      	nop
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	2000022c 	.word	0x2000022c
 80050f0:	2000036c 	.word	0x2000036c

080050f4 <SoftTimer_PRIV__CheckTimer>:

static et_RET SoftTimer_PRIV__CheckTimer(et_SOFTTIMER_INSTANCE et_softtimer)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
    et_TIME_COMPARE et_compare = TIME_COMPARE_EQUAL;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
    
    if (SOFTTIMER_RUNNING_STATE_RUNNING ==\
            g_st_softtimers_vec[et_softtimer].et_running_state)
 8005102:	79fa      	ldrb	r2, [r7, #7]
 8005104:	491b      	ldr	r1, [pc, #108]	; (8005174 <SoftTimer_PRIV__CheckTimer+0x80>)
 8005106:	4613      	mov	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	3318      	adds	r3, #24
 8005112:	781b      	ldrb	r3, [r3, #0]
    if (SOFTTIMER_RUNNING_STATE_RUNNING ==\
 8005114:	2b01      	cmp	r3, #1
 8005116:	d128      	bne.n	800516a <SoftTimer_PRIV__CheckTimer+0x76>
    {
        /* Compare stop time with the current time. */
        et_compare = Time__Compare(g_st_time_counter,\
 8005118:	79fa      	ldrb	r2, [r7, #7]
 800511a:	4916      	ldr	r1, [pc, #88]	; (8005174 <SoftTimer_PRIV__CheckTimer+0x80>)
 800511c:	4613      	mov	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	3310      	adds	r3, #16
 8005128:	4913      	ldr	r1, [pc, #76]	; (8005178 <SoftTimer_PRIV__CheckTimer+0x84>)
 800512a:	cb0c      	ldmia	r3, {r2, r3}
 800512c:	c903      	ldmia	r1, {r0, r1}
 800512e:	f000 f880 	bl	8005232 <Time__Compare>
 8005132:	4603      	mov	r3, r0
 8005134:	73fb      	strb	r3, [r7, #15]
                                   g_st_softtimers_vec[et_softtimer].st_stop_time);
    
        /* Check if current time as passed the stop time. */
        if ((et_compare == TIME_COMPARE_EQUAL) ||\
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <SoftTimer_PRIV__CheckTimer+0x4e>
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d113      	bne.n	800516a <SoftTimer_PRIV__CheckTimer+0x76>
            (et_compare == TIME_COMPARE_BIGGER))
        {
            /* Set elapsed state to elapsed. */
            g_st_softtimers_vec[et_softtimer].et_elapsed_state =\
 8005142:	79fa      	ldrb	r2, [r7, #7]
 8005144:	490b      	ldr	r1, [pc, #44]	; (8005174 <SoftTimer_PRIV__CheckTimer+0x80>)
 8005146:	4613      	mov	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	3319      	adds	r3, #25
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
                    SOFTTIMER_ELAPSED_STATE_ELAPSED;
            /* Set running state to stopped. */
            g_st_softtimers_vec[et_softtimer].et_running_state =\
 8005156:	79fa      	ldrb	r2, [r7, #7]
 8005158:	4906      	ldr	r1, [pc, #24]	; (8005174 <SoftTimer_PRIV__CheckTimer+0x80>)
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	3318      	adds	r3, #24
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]
                    SOFTTIMER_RUNNING_STATE_STOPPED;
        }
    }
    
    return RET_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000318 	.word	0x20000318
 8005178:	2000036c 	.word	0x2000036c

0800517c <Time__Add_msec>:
    }
    
#endif

void Time__Add_msec(st_TIME *const st_time_ptr)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
    Time__AddN_msec(st_time_ptr, 1);
 8005184:	2101      	movs	r1, #1
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f804 	bl	8005194 <Time__AddN_msec>
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <Time__AddN_msec>:
    
#endif

void Time__AddN_msec(st_TIME *const st_time_ptr,\
                     t_time_msec    n_msec)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	807b      	strh	r3, [r7, #2]
    /* Check if the sum is smaller than the limit. */
    if ((st_time_ptr->msec + n_msec) < TIME_MSEC_TO_SEC)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	887b      	ldrh	r3, [r7, #2]
 80051a8:	4413      	add	r3, r2
 80051aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ae:	da07      	bge.n	80051c0 <Time__AddN_msec+0x2c>
    {
        /* Add the milliseconds. */
        st_time_ptr->msec += n_msec;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	881a      	ldrh	r2, [r3, #0]
 80051b4:	887b      	ldrh	r3, [r7, #2]
 80051b6:	4413      	add	r3, r2
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	801a      	strh	r2, [r3, #0]
        Time__AddN_sec(st_time_ptr, ((st_time_ptr->msec + n_msec) / TIME_MSEC_TO_SEC));
        
        /* Set the rest of milliseconds. */
        st_time_ptr->msec = ((st_time_ptr->msec + n_msec) % TIME_MSEC_TO_SEC);
    }
}
 80051be:	e021      	b.n	8005204 <Time__AddN_msec+0x70>
        Time__AddN_sec(st_time_ptr, ((st_time_ptr->msec + n_msec) / TIME_MSEC_TO_SEC));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	887b      	ldrh	r3, [r7, #2]
 80051c8:	4413      	add	r3, r2
 80051ca:	4a10      	ldr	r2, [pc, #64]	; (800520c <Time__AddN_msec+0x78>)
 80051cc:	fb82 1203 	smull	r1, r2, r2, r3
 80051d0:	1192      	asrs	r2, r2, #6
 80051d2:	17db      	asrs	r3, r3, #31
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f819 	bl	8005210 <Time__AddN_sec>
        st_time_ptr->msec = ((st_time_ptr->msec + n_msec) % TIME_MSEC_TO_SEC);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	887b      	ldrh	r3, [r7, #2]
 80051e6:	4413      	add	r3, r2
 80051e8:	4a08      	ldr	r2, [pc, #32]	; (800520c <Time__AddN_msec+0x78>)
 80051ea:	fb82 1203 	smull	r1, r2, r2, r3
 80051ee:	1191      	asrs	r1, r2, #6
 80051f0:	17da      	asrs	r2, r3, #31
 80051f2:	1a8a      	subs	r2, r1, r2
 80051f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051f8:	fb01 f202 	mul.w	r2, r1, r2
 80051fc:	1a9a      	subs	r2, r3, r2
 80051fe:	b292      	uxth	r2, r2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	801a      	strh	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	10624dd3 	.word	0x10624dd3

08005210 <Time__AddN_sec>:

void Time__AddN_sec(st_TIME *const st_time_ptr,\
                    t_time_sec     n_sec)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
        }
        
    #else

        /* Add the seconds. */
        st_time_ptr->sec += n_sec;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	441a      	add	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	605a      	str	r2, [r3, #4]
        
    #endif
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <Time__Compare>:
    
#endif

et_TIME_COMPARE Time__Compare(st_TIME st_time_1,\
                              st_TIME st_time_2)
{
 8005232:	b490      	push	{r4, r7}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	f107 0408 	add.w	r4, r7, #8
 800523c:	e884 0003 	stmia.w	r4, {r0, r1}
 8005240:	4639      	mov	r1, r7
 8005242:	e881 000c 	stmia.w	r1, {r2, r3}
        }
    
    #endif

    /* ****** Seconds ****** */
    if (st_time_1.sec > st_time_2.sec)
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	429a      	cmp	r2, r3
 800524c:	d901      	bls.n	8005252 <Time__Compare+0x20>
    {
        return TIME_COMPARE_BIGGER;
 800524e:	2301      	movs	r3, #1
 8005250:	e012      	b.n	8005278 <Time__Compare+0x46>
    }
    if (st_time_1.sec < st_time_2.sec)
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d201      	bcs.n	800525e <Time__Compare+0x2c>
    {
        return TIME_COMPARE_SMALLER;
 800525a:	2302      	movs	r3, #2
 800525c:	e00c      	b.n	8005278 <Time__Compare+0x46>
    }
    
    /* ****** Milliseconds ****** */
    if (st_time_1.msec > st_time_2.msec)
 800525e:	893a      	ldrh	r2, [r7, #8]
 8005260:	883b      	ldrh	r3, [r7, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d901      	bls.n	800526a <Time__Compare+0x38>
    {
        return TIME_COMPARE_BIGGER;
 8005266:	2301      	movs	r3, #1
 8005268:	e006      	b.n	8005278 <Time__Compare+0x46>
    }
    if (st_time_1.msec < st_time_2.msec)
 800526a:	893a      	ldrh	r2, [r7, #8]
 800526c:	883b      	ldrh	r3, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d201      	bcs.n	8005276 <Time__Compare+0x44>
    {
        return TIME_COMPARE_SMALLER;
 8005272:	2302      	movs	r3, #2
 8005274:	e000      	b.n	8005278 <Time__Compare+0x46>
            return TIME_COMPARE_SMALLER;
        }
    
    #endif
        
    return TIME_COMPARE_EQUAL;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bc90      	pop	{r4, r7}
 8005280:	4770      	bx	lr
	...

08005284 <Time__Add_Times>:
    
    return st_remain_time;
}

st_TIME Time__Add_Times(st_TIME time_1, st_TIME time_2)
{
 8005284:	b082      	sub	sp, #8
 8005286:	b480      	push	{r7}
 8005288:	b089      	sub	sp, #36	; 0x24
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	1d38      	adds	r0, r7, #4
 8005290:	e880 0006 	stmia.w	r0, {r1, r2}
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
    st_TIME     total_time  = {};
 8005296:	f107 0310 	add.w	r3, r7, #16
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	605a      	str	r2, [r3, #4]
    uint32_t    add_aux     = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]
    uint8_t     carry       = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	76fb      	strb	r3, [r7, #27]
        carry           = (uint8_t)(add_aux / TIME_USEC_TO_MSEC);
    
    #endif

    /* ********** Milliseconds ********** */
    add_aux = (time_1.msec + time_2.msec + carry);
 80052a8:	88bb      	ldrh	r3, [r7, #4]
 80052aa:	461a      	mov	r2, r3
 80052ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052ae:	441a      	add	r2, r3
 80052b0:	7efb      	ldrb	r3, [r7, #27]
 80052b2:	4413      	add	r3, r2
 80052b4:	61fb      	str	r3, [r7, #28]
        
    total_time.msec = (add_aux % TIME_MSEC_TO_SEC);
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <Time__Add_Times+0x84>)
 80052ba:	fba3 1302 	umull	r1, r3, r3, r2
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052c4:	fb01 f303 	mul.w	r3, r1, r3
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	823b      	strh	r3, [r7, #16]
    carry           = (uint8_t)(add_aux / TIME_MSEC_TO_SEC);
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4a0d      	ldr	r2, [pc, #52]	; (8005308 <Time__Add_Times+0x84>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	76fb      	strb	r3, [r7, #27]
    
    /* ********** Seconds ********** */
    add_aux = (time_1.sec + time_2.sec + carry);
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	441a      	add	r2, r3
 80052e0:	7efb      	ldrb	r3, [r7, #27]
 80052e2:	4413      	add	r3, r2
 80052e4:	61fb      	str	r3, [r7, #28]
        total_time.sec = (add_aux % TIME_SEC_TO_HOUR);
        carry          = (uint8_t)(add_aux / TIME_SEC_TO_HOUR);
        
    #else

        total_time.sec = add_aux;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	617b      	str	r3, [r7, #20]

        total_time.hr = (time_1.hr + time_2.hr + carry);
        
    #endif
    
    return total_time;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	461a      	mov	r2, r3
 80052ee:	f107 0310 	add.w	r3, r7, #16
 80052f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	3724      	adds	r7, #36	; 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	b002      	add	sp, #8
 8005306:	4770      	bx	lr
 8005308:	10624dd3 	.word	0x10624dd3

0800530c <MODBUS__Initialize>:

/* ************************************************************************************ */
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
et_RET MODBUS__Initialize(et_MODBUS et_dev)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	71fb      	strb	r3, [r7, #7]
    et_RET et_ret = RET_UNEXPECTED;
 8005316:	23ff      	movs	r3, #255	; 0xff
 8005318:	73fb      	strb	r3, [r7, #15]

    /* Entering debug message. */
    CENTI_DEBUG__Info("MODBUS initialization started!");
 800531a:	4867      	ldr	r0, [pc, #412]	; (80054b8 <MODBUS__Initialize+0x1ac>)
 800531c:	f001 f806 	bl	800632c <iprintf>
 8005320:	4866      	ldr	r0, [pc, #408]	; (80054bc <MODBUS__Initialize+0x1b0>)
 8005322:	f001 f803 	bl	800632c <iprintf>
 8005326:	200a      	movs	r0, #10
 8005328:	f001 f812 	bl	8006350 <putchar>
    /* Priority tasks. */
    CENTI_CHECK_PTR(ST_CONF[et_dev].uart__Initialize);
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	4964      	ldr	r1, [pc, #400]	; (80054c0 <MODBUS__Initialize+0x1b4>)
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10c      	bne.n	800535a <MODBUS__Initialize+0x4e>
 8005340:	4860      	ldr	r0, [pc, #384]	; (80054c4 <MODBUS__Initialize+0x1b8>)
 8005342:	f000 fff3 	bl	800632c <iprintf>
 8005346:	f06f 0004 	mvn.w	r0, #4
 800534a:	f7ff fccf 	bl	8004cec <CeNTI_Debug__Return>
 800534e:	200a      	movs	r0, #10
 8005350:	f000 fffe 	bl	8006350 <putchar>
 8005354:	f06f 0304 	mvn.w	r3, #4
 8005358:	e0a9      	b.n	80054ae <MODBUS__Initialize+0x1a2>
    CENTI_CHECK_PTR(ST_CONF[et_dev].uart__Write);
 800535a:	79fa      	ldrb	r2, [r7, #7]
 800535c:	4958      	ldr	r1, [pc, #352]	; (80054c0 <MODBUS__Initialize+0x1b4>)
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	3304      	adds	r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10c      	bne.n	800538a <MODBUS__Initialize+0x7e>
 8005370:	4854      	ldr	r0, [pc, #336]	; (80054c4 <MODBUS__Initialize+0x1b8>)
 8005372:	f000 ffdb 	bl	800632c <iprintf>
 8005376:	f06f 0004 	mvn.w	r0, #4
 800537a:	f7ff fcb7 	bl	8004cec <CeNTI_Debug__Return>
 800537e:	200a      	movs	r0, #10
 8005380:	f000 ffe6 	bl	8006350 <putchar>
 8005384:	f06f 0304 	mvn.w	r3, #4
 8005388:	e091      	b.n	80054ae <MODBUS__Initialize+0x1a2>
    CENTI_CHECK_PTR(ST_CONF[et_dev].uart__Read);
 800538a:	79fa      	ldrb	r2, [r7, #7]
 800538c:	494c      	ldr	r1, [pc, #304]	; (80054c0 <MODBUS__Initialize+0x1b4>)
 800538e:	4613      	mov	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3308      	adds	r3, #8
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10c      	bne.n	80053ba <MODBUS__Initialize+0xae>
 80053a0:	4848      	ldr	r0, [pc, #288]	; (80054c4 <MODBUS__Initialize+0x1b8>)
 80053a2:	f000 ffc3 	bl	800632c <iprintf>
 80053a6:	f06f 0004 	mvn.w	r0, #4
 80053aa:	f7ff fc9f 	bl	8004cec <CeNTI_Debug__Return>
 80053ae:	200a      	movs	r0, #10
 80053b0:	f000 ffce 	bl	8006350 <putchar>
 80053b4:	f06f 0304 	mvn.w	r3, #4
 80053b8:	e079      	b.n	80054ae <MODBUS__Initialize+0x1a2>
    CENTI_CHECK_PTR(ST_CONF[et_dev].uart__GetRemain);
 80053ba:	79fa      	ldrb	r2, [r7, #7]
 80053bc:	4940      	ldr	r1, [pc, #256]	; (80054c0 <MODBUS__Initialize+0x1b4>)
 80053be:	4613      	mov	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	330c      	adds	r3, #12
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10c      	bne.n	80053ea <MODBUS__Initialize+0xde>
 80053d0:	483c      	ldr	r0, [pc, #240]	; (80054c4 <MODBUS__Initialize+0x1b8>)
 80053d2:	f000 ffab 	bl	800632c <iprintf>
 80053d6:	f06f 0004 	mvn.w	r0, #4
 80053da:	f7ff fc87 	bl	8004cec <CeNTI_Debug__Return>
 80053de:	200a      	movs	r0, #10
 80053e0:	f000 ffb6 	bl	8006350 <putchar>
 80053e4:	f06f 0304 	mvn.w	r3, #4
 80053e8:	e061      	b.n	80054ae <MODBUS__Initialize+0x1a2>
    CENTI_CHECK_PTR(ST_CONF[et_dev].gpio__Setlevel);
 80053ea:	79fa      	ldrb	r2, [r7, #7]
 80053ec:	4934      	ldr	r1, [pc, #208]	; (80054c0 <MODBUS__Initialize+0x1b4>)
 80053ee:	4613      	mov	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	3314      	adds	r3, #20
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10c      	bne.n	800541a <MODBUS__Initialize+0x10e>
 8005400:	4830      	ldr	r0, [pc, #192]	; (80054c4 <MODBUS__Initialize+0x1b8>)
 8005402:	f000 ff93 	bl	800632c <iprintf>
 8005406:	f06f 0004 	mvn.w	r0, #4
 800540a:	f7ff fc6f 	bl	8004cec <CeNTI_Debug__Return>
 800540e:	200a      	movs	r0, #10
 8005410:	f000 ff9e 	bl	8006350 <putchar>
 8005414:	f06f 0304 	mvn.w	r3, #4
 8005418:	e049      	b.n	80054ae <MODBUS__Initialize+0x1a2>
    CENTI_CHECK_PTR(ST_CONF[et_dev].delay__ms);
 800541a:	4b2b      	ldr	r3, [pc, #172]	; (80054c8 <MODBUS__Initialize+0x1bc>)
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10c      	bne.n	800543a <MODBUS__Initialize+0x12e>
 8005420:	4828      	ldr	r0, [pc, #160]	; (80054c4 <MODBUS__Initialize+0x1b8>)
 8005422:	f000 ff83 	bl	800632c <iprintf>
 8005426:	f06f 0004 	mvn.w	r0, #4
 800542a:	f7ff fc5f 	bl	8004cec <CeNTI_Debug__Return>
 800542e:	200a      	movs	r0, #10
 8005430:	f000 ff8e 	bl	8006350 <putchar>
 8005434:	f06f 0304 	mvn.w	r3, #4
 8005438:	e039      	b.n	80054ae <MODBUS__Initialize+0x1a2>
    et_ret = ST_CONF[et_dev].uart__Initialize();
 800543a:	79fa      	ldrb	r2, [r7, #7]
 800543c:	4920      	ldr	r1, [pc, #128]	; (80054c0 <MODBUS__Initialize+0x1b4>)
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4798      	blx	r3
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_RET(et_ret);
 8005450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005454:	2b00      	cmp	r3, #0
 8005456:	da0d      	bge.n	8005474 <MODBUS__Initialize+0x168>
 8005458:	481a      	ldr	r0, [pc, #104]	; (80054c4 <MODBUS__Initialize+0x1b8>)
 800545a:	f000 ff67 	bl	800632c <iprintf>
 800545e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fc42 	bl	8004cec <CeNTI_Debug__Return>
 8005468:	200a      	movs	r0, #10
 800546a:	f000 ff71 	bl	8006350 <putchar>
 800546e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005472:	e01c      	b.n	80054ae <MODBUS__Initialize+0x1a2>
    ST_CONF[et_dev].gpio__Setlevel(MODBUS_MODE_READ);
 8005474:	79fa      	ldrb	r2, [r7, #7]
 8005476:	4912      	ldr	r1, [pc, #72]	; (80054c0 <MODBUS__Initialize+0x1b4>)
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	3314      	adds	r3, #20
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2000      	movs	r0, #0
 8005488:	4798      	blx	r3
    HAL_Delay(1000);
 800548a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800548e:	f7fb fd81 	bl	8000f94 <HAL_Delay>
    /* Indicate that initialization was successfully complete. */
    g_initialized[et_dev] = true;
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <MODBUS__Initialize+0x1c0>)
 8005496:	2101      	movs	r1, #1
 8005498:	54d1      	strb	r1, [r2, r3]
    /* Exiting debug message. */
    CENTI_DEBUG__Info("MODBUS initialization complete!");
 800549a:	4807      	ldr	r0, [pc, #28]	; (80054b8 <MODBUS__Initialize+0x1ac>)
 800549c:	f000 ff46 	bl	800632c <iprintf>
 80054a0:	480b      	ldr	r0, [pc, #44]	; (80054d0 <MODBUS__Initialize+0x1c4>)
 80054a2:	f000 ff43 	bl	800632c <iprintf>
 80054a6:	200a      	movs	r0, #10
 80054a8:	f000 ff52 	bl	8006350 <putchar>
    return RET_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	08007328 	.word	0x08007328
 80054bc:	08007334 	.word	0x08007334
 80054c0:	08007708 	.word	0x08007708
 80054c4:	08007354 	.word	0x08007354
 80054c8:	08004de9 	.word	0x08004de9
 80054cc:	20000378 	.word	0x20000378
 80054d0:	08007360 	.word	0x08007360

080054d4 <MODBUS__Send_Response>:

et_RET MODBUS__Send_Response(et_MODBUS et_dev, uint8_t *MODBUS_msg, uint8_t msg_size)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71bb      	strb	r3, [r7, #6]
    et_RET et_ret = RET_UNEXPECTED;
 80054e4:	23ff      	movs	r3, #255	; 0xff
 80054e6:	73fb      	strb	r3, [r7, #15]
    uint16_t crc = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	81bb      	strh	r3, [r7, #12]

    /* Entering debug message. */
    CENTI_DEBUG__Info("MODBUS Send RESPONSE!");
 80054ec:	4824      	ldr	r0, [pc, #144]	; (8005580 <MODBUS__Send_Response+0xac>)
 80054ee:	f000 ff1d 	bl	800632c <iprintf>
 80054f2:	4824      	ldr	r0, [pc, #144]	; (8005584 <MODBUS__Send_Response+0xb0>)
 80054f4:	f000 ff1a 	bl	800632c <iprintf>
 80054f8:	200a      	movs	r0, #10
 80054fa:	f000 ff29 	bl	8006350 <putchar>

    crc = MODBUS__Calc_CRC(MODBUS_msg, msg_size);
 80054fe:	79bb      	ldrb	r3, [r7, #6]
 8005500:	4619      	mov	r1, r3
 8005502:	6838      	ldr	r0, [r7, #0]
 8005504:	f000 f9de 	bl	80058c4 <MODBUS__Calc_CRC>
 8005508:	4603      	mov	r3, r0
 800550a:	81bb      	strh	r3, [r7, #12]
    MODBUS_msg[msg_size + 1] = ((crc >> 8) & 0xFF);
 800550c:	89bb      	ldrh	r3, [r7, #12]
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	b299      	uxth	r1, r3
 8005512:	79bb      	ldrb	r3, [r7, #6]
 8005514:	3301      	adds	r3, #1
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4413      	add	r3, r2
 800551a:	b2ca      	uxtb	r2, r1
 800551c:	701a      	strb	r2, [r3, #0]
    MODBUS_msg[msg_size + 2] = (crc & 0xFF);
 800551e:	79bb      	ldrb	r3, [r7, #6]
 8005520:	3302      	adds	r3, #2
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	4413      	add	r3, r2
 8005526:	89ba      	ldrh	r2, [r7, #12]
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
    et_ret = COM__Write(et_dev, MODBUS_msg, (msg_size + 2));
 800552c:	79bb      	ldrb	r3, [r7, #6]
 800552e:	3302      	adds	r3, #2
 8005530:	b2da      	uxtb	r2, r3
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fa46 	bl	80059c8 <COM__Write>
 800553c:	4603      	mov	r3, r0
 800553e:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_RET(et_ret);
 8005540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	da0d      	bge.n	8005564 <MODBUS__Send_Response+0x90>
 8005548:	480f      	ldr	r0, [pc, #60]	; (8005588 <MODBUS__Send_Response+0xb4>)
 800554a:	f000 feef 	bl	800632c <iprintf>
 800554e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fbca 	bl	8004cec <CeNTI_Debug__Return>
 8005558:	200a      	movs	r0, #10
 800555a:	f000 fef9 	bl	8006350 <putchar>
 800555e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005562:	e009      	b.n	8005578 <MODBUS__Send_Response+0xa4>
    CENTI_DEBUG__Info("MODBUS Send Request finished!");
 8005564:	4806      	ldr	r0, [pc, #24]	; (8005580 <MODBUS__Send_Response+0xac>)
 8005566:	f000 fee1 	bl	800632c <iprintf>
 800556a:	4808      	ldr	r0, [pc, #32]	; (800558c <MODBUS__Send_Response+0xb8>)
 800556c:	f000 fede 	bl	800632c <iprintf>
 8005570:	200a      	movs	r0, #10
 8005572:	f000 feed 	bl	8006350 <putchar>
    return RET_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	08007328 	.word	0x08007328
 8005584:	08007380 	.word	0x08007380
 8005588:	08007354 	.word	0x08007354
 800558c:	08007398 	.word	0x08007398

08005590 <MODBUS__Check_Receive>:
    CENTI_DEBUG__Info("MODBUS Send Request finished!");
    return RET_OK;
}

bool MODBUS__Check_Receive (et_MODBUS et_dev)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	71fb      	strb	r3, [r7, #7]
	bool received = FLAG_OFF;
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]
	(ST_CONF[et_dev].uart__GetRemain() >= COMMAND_SIZE) ? (received = FLAG_ON) : (received = FLAG_OFF);
 800559e:	79fa      	ldrb	r2, [r7, #7]
 80055a0:	490a      	ldr	r1, [pc, #40]	; (80055cc <MODBUS__Check_Receive+0x3c>)
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	330c      	adds	r3, #12
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4798      	blx	r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	d902      	bls.n	80055be <MODBUS__Check_Receive+0x2e>
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	e001      	b.n	80055c2 <MODBUS__Check_Receive+0x32>
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
	return received;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	08007708 	.word	0x08007708

080055d0 <MODBUS__Get_Command>:

et_RET MODBUS__Get_Command(et_MODBUS et_dev, st_MODBUS_COMMAND *command)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	6039      	str	r1, [r7, #0]
 80055da:	71fb      	strb	r3, [r7, #7]
    et_RET et_ret = RET_UNEXPECTED;
 80055dc:	23ff      	movs	r3, #255	; 0xff
 80055de:	75fb      	strb	r3, [r7, #23]
    uint8_t vec_received[COMMAND_SIZE] = {};
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
    CENTI_CHECK_PTR(command);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10c      	bne.n	8005608 <MODBUS__Get_Command+0x38>
 80055ee:	48a4      	ldr	r0, [pc, #656]	; (8005880 <MODBUS__Get_Command+0x2b0>)
 80055f0:	f000 fe9c 	bl	800632c <iprintf>
 80055f4:	f06f 0004 	mvn.w	r0, #4
 80055f8:	f7ff fb78 	bl	8004cec <CeNTI_Debug__Return>
 80055fc:	200a      	movs	r0, #10
 80055fe:	f000 fea7 	bl	8006350 <putchar>
 8005602:	f06f 0304 	mvn.w	r3, #4
 8005606:	e137      	b.n	8005878 <MODBUS__Get_Command+0x2a8>

    ST_CONF[et_dev].delay__ms(50);
 8005608:	4b9e      	ldr	r3, [pc, #632]	; (8005884 <MODBUS__Get_Command+0x2b4>)
 800560a:	2032      	movs	r0, #50	; 0x32
 800560c:	4798      	blx	r3
    if(ST_CONF[et_dev].uart__GetRemain() >= COMMAND_SIZE)
 800560e:	79fa      	ldrb	r2, [r7, #7]
 8005610:	499d      	ldr	r1, [pc, #628]	; (8005888 <MODBUS__Get_Command+0x2b8>)
 8005612:	4613      	mov	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	1a9b      	subs	r3, r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	330c      	adds	r3, #12
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4798      	blx	r3
 8005622:	4603      	mov	r3, r0
 8005624:	2b07      	cmp	r3, #7
 8005626:	d902      	bls.n	800562e <MODBUS__Get_Command+0x5e>
    {
    	et_ret = RET_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	75fb      	strb	r3, [r7, #23]
 800562c:	e019      	b.n	8005662 <MODBUS__Get_Command+0x92>
    }
    else
    {
    	ST_CONF[et_dev].uart__ClearRxFifo();
 800562e:	79fa      	ldrb	r2, [r7, #7]
 8005630:	4995      	ldr	r1, [pc, #596]	; (8005888 <MODBUS__Get_Command+0x2b8>)
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	3310      	adds	r3, #16
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4798      	blx	r3
    	CENTI_DEBUG__Error("Response not received");
 8005642:	2293      	movs	r2, #147	; 0x93
 8005644:	4991      	ldr	r1, [pc, #580]	; (800588c <MODBUS__Get_Command+0x2bc>)
 8005646:	4892      	ldr	r0, [pc, #584]	; (8005890 <MODBUS__Get_Command+0x2c0>)
 8005648:	f000 fe70 	bl	800632c <iprintf>
 800564c:	4891      	ldr	r0, [pc, #580]	; (8005894 <MODBUS__Get_Command+0x2c4>)
 800564e:	f000 fe6d 	bl	800632c <iprintf>
 8005652:	4891      	ldr	r0, [pc, #580]	; (8005898 <MODBUS__Get_Command+0x2c8>)
 8005654:	f000 fe6a 	bl	800632c <iprintf>
 8005658:	200a      	movs	r0, #10
 800565a:	f000 fe79 	bl	8006350 <putchar>
    	et_ret = RET_INVALID_OPERATION;
 800565e:	23fc      	movs	r3, #252	; 0xfc
 8005660:	75fb      	strb	r3, [r7, #23]
    }
	CENTI_CHECK_RET(et_ret);
 8005662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	da0d      	bge.n	8005686 <MODBUS__Get_Command+0xb6>
 800566a:	4885      	ldr	r0, [pc, #532]	; (8005880 <MODBUS__Get_Command+0x2b0>)
 800566c:	f000 fe5e 	bl	800632c <iprintf>
 8005670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fb39 	bl	8004cec <CeNTI_Debug__Return>
 800567a:	200a      	movs	r0, #10
 800567c:	f000 fe68 	bl	8006350 <putchar>
 8005680:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005684:	e0f8      	b.n	8005878 <MODBUS__Get_Command+0x2a8>
	et_ret = COM__Read(et_dev, vec_received, COMMAND_SIZE);
 8005686:	f107 010c 	add.w	r1, r7, #12
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2208      	movs	r2, #8
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f9f4 	bl	8005a7c <COM__Read>
 8005694:	4603      	mov	r3, r0
 8005696:	75fb      	strb	r3, [r7, #23]
	CENTI_CHECK_RET(et_ret);
 8005698:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800569c:	2b00      	cmp	r3, #0
 800569e:	da0d      	bge.n	80056bc <MODBUS__Get_Command+0xec>
 80056a0:	4877      	ldr	r0, [pc, #476]	; (8005880 <MODBUS__Get_Command+0x2b0>)
 80056a2:	f000 fe43 	bl	800632c <iprintf>
 80056a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fb1e 	bl	8004cec <CeNTI_Debug__Return>
 80056b0:	200a      	movs	r0, #10
 80056b2:	f000 fe4d 	bl	8006350 <putchar>
 80056b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056ba:	e0dd      	b.n	8005878 <MODBUS__Get_Command+0x2a8>

	if(!MODBUS__Check_CRC(vec_received, COMMAND_SIZE))
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	2108      	movs	r1, #8
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f94a 	bl	800595c <MODBUS__Check_CRC>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f083 0301 	eor.w	r3, r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00f      	beq.n	80056f4 <MODBUS__Get_Command+0x124>
	{
    	CENTI_DEBUG__Error("Response with checksum incorrect");
 80056d4:	229c      	movs	r2, #156	; 0x9c
 80056d6:	496d      	ldr	r1, [pc, #436]	; (800588c <MODBUS__Get_Command+0x2bc>)
 80056d8:	486d      	ldr	r0, [pc, #436]	; (8005890 <MODBUS__Get_Command+0x2c0>)
 80056da:	f000 fe27 	bl	800632c <iprintf>
 80056de:	486d      	ldr	r0, [pc, #436]	; (8005894 <MODBUS__Get_Command+0x2c4>)
 80056e0:	f000 fe24 	bl	800632c <iprintf>
 80056e4:	486d      	ldr	r0, [pc, #436]	; (800589c <MODBUS__Get_Command+0x2cc>)
 80056e6:	f000 fe21 	bl	800632c <iprintf>
 80056ea:	200a      	movs	r0, #10
 80056ec:	f000 fe30 	bl	8006350 <putchar>
    	et_ret = RET_INVALID_PARAMETER;
 80056f0:	23fd      	movs	r3, #253	; 0xfd
 80056f2:	75fb      	strb	r3, [r7, #23]
	}
	CENTI_CHECK_RET(et_ret);
 80056f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da0d      	bge.n	8005718 <MODBUS__Get_Command+0x148>
 80056fc:	4860      	ldr	r0, [pc, #384]	; (8005880 <MODBUS__Get_Command+0x2b0>)
 80056fe:	f000 fe15 	bl	800632c <iprintf>
 8005702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff faf0 	bl	8004cec <CeNTI_Debug__Return>
 800570c:	200a      	movs	r0, #10
 800570e:	f000 fe1f 	bl	8006350 <putchar>
 8005712:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005716:	e0af      	b.n	8005878 <MODBUS__Get_Command+0x2a8>
	if(vec_received[0] != command-> slave_addr)
 8005718:	7b3a      	ldrb	r2, [r7, #12]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d01d      	beq.n	800575e <MODBUS__Get_Command+0x18e>
	{
		CENTI_DEBUG__Error("Response with wrong slave address %02X", vec_received[0]);
 8005722:	22a2      	movs	r2, #162	; 0xa2
 8005724:	4959      	ldr	r1, [pc, #356]	; (800588c <MODBUS__Get_Command+0x2bc>)
 8005726:	485a      	ldr	r0, [pc, #360]	; (8005890 <MODBUS__Get_Command+0x2c0>)
 8005728:	f000 fe00 	bl	800632c <iprintf>
 800572c:	4859      	ldr	r0, [pc, #356]	; (8005894 <MODBUS__Get_Command+0x2c4>)
 800572e:	f000 fdfd 	bl	800632c <iprintf>
 8005732:	7b3b      	ldrb	r3, [r7, #12]
 8005734:	4619      	mov	r1, r3
 8005736:	485a      	ldr	r0, [pc, #360]	; (80058a0 <MODBUS__Get_Command+0x2d0>)
 8005738:	f000 fdf8 	bl	800632c <iprintf>
 800573c:	200a      	movs	r0, #10
 800573e:	f000 fe07 	bl	8006350 <putchar>
		CENTI_DEBUG__Verbose("Expected slave addr %02X", command-> slave_addr);
 8005742:	4858      	ldr	r0, [pc, #352]	; (80058a4 <MODBUS__Get_Command+0x2d4>)
 8005744:	f000 fdf2 	bl	800632c <iprintf>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	4619      	mov	r1, r3
 800574e:	4856      	ldr	r0, [pc, #344]	; (80058a8 <MODBUS__Get_Command+0x2d8>)
 8005750:	f000 fdec 	bl	800632c <iprintf>
 8005754:	200a      	movs	r0, #10
 8005756:	f000 fdfb 	bl	8006350 <putchar>
		et_ret = RET_INVALID_PARAMETER;
 800575a:	23fd      	movs	r3, #253	; 0xfd
 800575c:	75fb      	strb	r3, [r7, #23]
	}
	CENTI_CHECK_RET(et_ret);
 800575e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005762:	2b00      	cmp	r3, #0
 8005764:	da0d      	bge.n	8005782 <MODBUS__Get_Command+0x1b2>
 8005766:	4846      	ldr	r0, [pc, #280]	; (8005880 <MODBUS__Get_Command+0x2b0>)
 8005768:	f000 fde0 	bl	800632c <iprintf>
 800576c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fabb 	bl	8004cec <CeNTI_Debug__Return>
 8005776:	200a      	movs	r0, #10
 8005778:	f000 fdea 	bl	8006350 <putchar>
 800577c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005780:	e07a      	b.n	8005878 <MODBUS__Get_Command+0x2a8>
	if(vec_received[1] >= 0x80)
 8005782:	7b7b      	ldrb	r3, [r7, #13]
 8005784:	b25b      	sxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	da0f      	bge.n	80057aa <MODBUS__Get_Command+0x1da>
	{
		CENTI_DEBUG__Error("Response with a exception value, request no complete");
 800578a:	22a9      	movs	r2, #169	; 0xa9
 800578c:	493f      	ldr	r1, [pc, #252]	; (800588c <MODBUS__Get_Command+0x2bc>)
 800578e:	4840      	ldr	r0, [pc, #256]	; (8005890 <MODBUS__Get_Command+0x2c0>)
 8005790:	f000 fdcc 	bl	800632c <iprintf>
 8005794:	483f      	ldr	r0, [pc, #252]	; (8005894 <MODBUS__Get_Command+0x2c4>)
 8005796:	f000 fdc9 	bl	800632c <iprintf>
 800579a:	4844      	ldr	r0, [pc, #272]	; (80058ac <MODBUS__Get_Command+0x2dc>)
 800579c:	f000 fdc6 	bl	800632c <iprintf>
 80057a0:	200a      	movs	r0, #10
 80057a2:	f000 fdd5 	bl	8006350 <putchar>
		et_ret = RET_INVALID_OPERATION;
 80057a6:	23fc      	movs	r3, #252	; 0xfc
 80057a8:	75fb      	strb	r3, [r7, #23]
	}
	CENTI_CHECK_RET(et_ret);
 80057aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	da0d      	bge.n	80057ce <MODBUS__Get_Command+0x1fe>
 80057b2:	4833      	ldr	r0, [pc, #204]	; (8005880 <MODBUS__Get_Command+0x2b0>)
 80057b4:	f000 fdba 	bl	800632c <iprintf>
 80057b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fa95 	bl	8004cec <CeNTI_Debug__Return>
 80057c2:	200a      	movs	r0, #10
 80057c4:	f000 fdc4 	bl	8006350 <putchar>
 80057c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057cc:	e054      	b.n	8005878 <MODBUS__Get_Command+0x2a8>
	command->slave_addr                    		= vec_received[0];
 80057ce:	7b3a      	ldrb	r2, [r7, #12]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	701a      	strb	r2, [r3, #0]
	command->function_code                 		= vec_received[1];
 80057d4:	7b7a      	ldrb	r2, [r7, #13]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	705a      	strb	r2, [r3, #1]
	command->register_addr.ut_high_u1B.value_u8 = vec_received[2];
 80057da:	7bba      	ldrb	r2, [r7, #14]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	709a      	strb	r2, [r3, #2]
	command->register_addr.ut_low_u1B.value_u8	= vec_received[3];
 80057e0:	7bfa      	ldrb	r2, [r7, #15]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	70da      	strb	r2, [r3, #3]
	command->size.ut_high_u1B.value_u8			= vec_received[4];
 80057e6:	7c3a      	ldrb	r2, [r7, #16]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	711a      	strb	r2, [r3, #4]
	command->size.ut_low_u1B.value_u8			= vec_received[5];
 80057ec:	7c7a      	ldrb	r2, [r7, #17]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	715a      	strb	r2, [r3, #5]
	command->crc_16.ut_low_u1B.value_u8    		= vec_received[6];
 80057f2:	7cba      	ldrb	r2, [r7, #18]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	71da      	strb	r2, [r3, #7]
	command->crc_16.ut_high_u1B.value_u8   		= vec_received[7];
 80057f8:	7cfa      	ldrb	r2, [r7, #19]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	719a      	strb	r2, [r3, #6]

	CENTI_DEBUG__Verbose("slave_addr:0x%02X", 		 		command->slave_addr);
 80057fe:	4829      	ldr	r0, [pc, #164]	; (80058a4 <MODBUS__Get_Command+0x2d4>)
 8005800:	f000 fd94 	bl	800632c <iprintf>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	4829      	ldr	r0, [pc, #164]	; (80058b0 <MODBUS__Get_Command+0x2e0>)
 800580c:	f000 fd8e 	bl	800632c <iprintf>
 8005810:	200a      	movs	r0, #10
 8005812:	f000 fd9d 	bl	8006350 <putchar>
	CENTI_DEBUG__Verbose("function_code:0x%02X", 			command->function_code);
 8005816:	4823      	ldr	r0, [pc, #140]	; (80058a4 <MODBUS__Get_Command+0x2d4>)
 8005818:	f000 fd88 	bl	800632c <iprintf>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	4619      	mov	r1, r3
 8005822:	4824      	ldr	r0, [pc, #144]	; (80058b4 <MODBUS__Get_Command+0x2e4>)
 8005824:	f000 fd82 	bl	800632c <iprintf>
 8005828:	200a      	movs	r0, #10
 800582a:	f000 fd91 	bl	8006350 <putchar>
	CENTI_DEBUG__Verbose("register:0x%04X",		 			command->register_addr.value_u16);
 800582e:	481d      	ldr	r0, [pc, #116]	; (80058a4 <MODBUS__Get_Command+0x2d4>)
 8005830:	f000 fd7c 	bl	800632c <iprintf>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	885b      	ldrh	r3, [r3, #2]
 8005838:	4619      	mov	r1, r3
 800583a:	481f      	ldr	r0, [pc, #124]	; (80058b8 <MODBUS__Get_Command+0x2e8>)
 800583c:	f000 fd76 	bl	800632c <iprintf>
 8005840:	200a      	movs	r0, #10
 8005842:	f000 fd85 	bl	8006350 <putchar>
	CENTI_DEBUG__Verbose("size of expected data:0x%04X", 	command->size.value_u16);
 8005846:	4817      	ldr	r0, [pc, #92]	; (80058a4 <MODBUS__Get_Command+0x2d4>)
 8005848:	f000 fd70 	bl	800632c <iprintf>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	889b      	ldrh	r3, [r3, #4]
 8005850:	4619      	mov	r1, r3
 8005852:	481a      	ldr	r0, [pc, #104]	; (80058bc <MODBUS__Get_Command+0x2ec>)
 8005854:	f000 fd6a 	bl	800632c <iprintf>
 8005858:	200a      	movs	r0, #10
 800585a:	f000 fd79 	bl	8006350 <putchar>
	CENTI_DEBUG__Verbose("crc:0x%04X", 			 			command->crc_16.value_u16);
 800585e:	4811      	ldr	r0, [pc, #68]	; (80058a4 <MODBUS__Get_Command+0x2d4>)
 8005860:	f000 fd64 	bl	800632c <iprintf>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	88db      	ldrh	r3, [r3, #6]
 8005868:	4619      	mov	r1, r3
 800586a:	4815      	ldr	r0, [pc, #84]	; (80058c0 <MODBUS__Get_Command+0x2f0>)
 800586c:	f000 fd5e 	bl	800632c <iprintf>
 8005870:	200a      	movs	r0, #10
 8005872:	f000 fd6d 	bl	8006350 <putchar>
    return RET_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	08007354 	.word	0x08007354
 8005884:	08004de9 	.word	0x08004de9
 8005888:	08007708 	.word	0x08007708
 800588c:	080073d0 	.word	0x080073d0
 8005890:	080073f4 	.word	0x080073f4
 8005894:	08007404 	.word	0x08007404
 8005898:	08007410 	.word	0x08007410
 800589c:	08007428 	.word	0x08007428
 80058a0:	0800744c 	.word	0x0800744c
 80058a4:	08007474 	.word	0x08007474
 80058a8:	08007480 	.word	0x08007480
 80058ac:	0800749c 	.word	0x0800749c
 80058b0:	080074d4 	.word	0x080074d4
 80058b4:	080074e8 	.word	0x080074e8
 80058b8:	08007500 	.word	0x08007500
 80058bc:	08007510 	.word	0x08007510
 80058c0:	08007530 	.word	0x08007530

080058c4 <MODBUS__Calc_CRC>:
/* ************************************************************************************ */
/* * Private Functions                                                          * */
/* ************************************************************************************ */

static uint16_t MODBUS__Calc_CRC(uint8_t *vec, uint8_t size)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
	uint16_t aux_crc = 0xFFFF;
 80058d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058d4:	81fb      	strh	r3, [r7, #14]
	uint16_t crc = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	817b      	strh	r3, [r7, #10]
	uint8_t j;

	for (j = 0; j < size; j++)
 80058da:	2300      	movs	r3, #0
 80058dc:	737b      	strb	r3, [r7, #13]
 80058de:	e026      	b.n	800592e <MODBUS__Calc_CRC+0x6a>
	{
		aux_crc ^= vec[j];
 80058e0:	7b7b      	ldrb	r3, [r7, #13]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4413      	add	r3, r2
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	89fb      	ldrh	r3, [r7, #14]
 80058ec:	4053      	eors	r3, r2
 80058ee:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0; i < 8; i++)
 80058f0:	2300      	movs	r3, #0
 80058f2:	733b      	strb	r3, [r7, #12]
 80058f4:	e015      	b.n	8005922 <MODBUS__Calc_CRC+0x5e>
		{
			if (aux_crc & 0x01)
 80058f6:	89fb      	ldrh	r3, [r7, #14]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <MODBUS__Calc_CRC+0x52>
			{
				aux_crc >>= 1;
 8005900:	89fb      	ldrh	r3, [r7, #14]
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	81fb      	strh	r3, [r7, #14]
				aux_crc ^= 0xA001;
 8005906:	89fb      	ldrh	r3, [r7, #14]
 8005908:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800590c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8005910:	43db      	mvns	r3, r3
 8005912:	81fb      	strh	r3, [r7, #14]
 8005914:	e002      	b.n	800591c <MODBUS__Calc_CRC+0x58>
			}
			else
				aux_crc >>= 1;
 8005916:	89fb      	ldrh	r3, [r7, #14]
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0; i < 8; i++)
 800591c:	7b3b      	ldrb	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	733b      	strb	r3, [r7, #12]
 8005922:	7b3b      	ldrb	r3, [r7, #12]
 8005924:	2b07      	cmp	r3, #7
 8005926:	d9e6      	bls.n	80058f6 <MODBUS__Calc_CRC+0x32>
	for (j = 0; j < size; j++)
 8005928:	7b7b      	ldrb	r3, [r7, #13]
 800592a:	3301      	adds	r3, #1
 800592c:	737b      	strb	r3, [r7, #13]
 800592e:	7b7a      	ldrb	r2, [r7, #13]
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	429a      	cmp	r2, r3
 8005934:	d3d4      	bcc.n	80058e0 <MODBUS__Calc_CRC+0x1c>
		}
	}
	crc = ((aux_crc & 0xFF) << 8);
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	817b      	strh	r3, [r7, #10]
	crc |= ((aux_crc >> 8) & 0xFF);
 800593c:	89fb      	ldrh	r3, [r7, #14]
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	b29b      	uxth	r3, r3
 8005942:	b21a      	sxth	r2, r3
 8005944:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005948:	4313      	orrs	r3, r2
 800594a:	b21b      	sxth	r3, r3
 800594c:	817b      	strh	r3, [r7, #10]
	return crc;
 800594e:	897b      	ldrh	r3, [r7, #10]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <MODBUS__Check_CRC>:

static bool MODBUS__Check_CRC(uint8_t *vec, uint8_t size)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8005968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800596c:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_crc = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	817b      	strh	r3, [r7, #10]
	bool valid_crc = FLAG_OFF;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]

	crc = MODBUS__Calc_CRC(vec, size - 2);
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	3b02      	subs	r3, #2
 800597a:	b2db      	uxtb	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ffa0 	bl	80058c4 <MODBUS__Calc_CRC>
 8005984:	4603      	mov	r3, r0
 8005986:	81bb      	strh	r3, [r7, #12]
	aux_crc = ((vec[size - 2] & 0xFF) << 8);
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	3b02      	subs	r3, #2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4413      	add	r3, r2
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	817b      	strh	r3, [r7, #10]
	aux_crc |= (vec[size - 1] & 0xFF);
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	3b01      	subs	r3, #1
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	897b      	ldrh	r3, [r7, #10]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	817b      	strh	r3, [r7, #10]
	(aux_crc == crc) ? (valid_crc = FLAG_ON) : (valid_crc = FLAG_OFF);
 80059aa:	897a      	ldrh	r2, [r7, #10]
 80059ac:	89bb      	ldrh	r3, [r7, #12]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d102      	bne.n	80059b8 <MODBUS__Check_CRC+0x5c>
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
 80059b6:	e001      	b.n	80059bc <MODBUS__Check_CRC+0x60>
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]

	return valid_crc;
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <COM__Write>:

/* ************************************************************************************ */
/* * Communication Functions                                                          * */
/* ************************************************************************************ */
static et_RET COM__Write(et_MODBUS et_dev, uint8_t *vec, uint8_t size)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	6039      	str	r1, [r7, #0]
 80059d2:	71fb      	strb	r3, [r7, #7]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71bb      	strb	r3, [r7, #6]
    et_RET et_ret = RET_UNEXPECTED;
 80059d8:	23ff      	movs	r3, #255	; 0xff
 80059da:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_PTR(vec);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10c      	bne.n	80059fc <COM__Write+0x34>
 80059e2:	4824      	ldr	r0, [pc, #144]	; (8005a74 <COM__Write+0xac>)
 80059e4:	f000 fca2 	bl	800632c <iprintf>
 80059e8:	f06f 0004 	mvn.w	r0, #4
 80059ec:	f7ff f97e 	bl	8004cec <CeNTI_Debug__Return>
 80059f0:	200a      	movs	r0, #10
 80059f2:	f000 fcad 	bl	8006350 <putchar>
 80059f6:	f06f 0304 	mvn.w	r3, #4
 80059fa:	e037      	b.n	8005a6c <COM__Write+0xa4>
	ST_CONF[et_dev].gpio__Setlevel(MODBUS_MODE_WRITE);
 80059fc:	79fa      	ldrb	r2, [r7, #7]
 80059fe:	491e      	ldr	r1, [pc, #120]	; (8005a78 <COM__Write+0xb0>)
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	3314      	adds	r3, #20
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2001      	movs	r0, #1
 8005a10:	4798      	blx	r3
	et_ret = ST_CONF[et_dev].uart__Write(vec, size);
 8005a12:	79fa      	ldrb	r2, [r7, #7]
 8005a14:	4918      	ldr	r1, [pc, #96]	; (8005a78 <COM__Write+0xb0>)
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3304      	adds	r3, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	79ba      	ldrb	r2, [r7, #6]
 8005a26:	4611      	mov	r1, r2
 8005a28:	6838      	ldr	r0, [r7, #0]
 8005a2a:	4798      	blx	r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
	CENTI_CHECK_RET(et_ret);
 8005a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da0d      	bge.n	8005a54 <COM__Write+0x8c>
 8005a38:	480e      	ldr	r0, [pc, #56]	; (8005a74 <COM__Write+0xac>)
 8005a3a:	f000 fc77 	bl	800632c <iprintf>
 8005a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff f952 	bl	8004cec <CeNTI_Debug__Return>
 8005a48:	200a      	movs	r0, #10
 8005a4a:	f000 fc81 	bl	8006350 <putchar>
 8005a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a52:	e00b      	b.n	8005a6c <COM__Write+0xa4>
	ST_CONF[et_dev].gpio__Setlevel(MODBUS_MODE_READ);
 8005a54:	79fa      	ldrb	r2, [r7, #7]
 8005a56:	4908      	ldr	r1, [pc, #32]	; (8005a78 <COM__Write+0xb0>)
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	3314      	adds	r3, #20
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2000      	movs	r0, #0
 8005a68:	4798      	blx	r3
	return RET_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	08007354 	.word	0x08007354
 8005a78:	08007708 	.word	0x08007708

08005a7c <COM__Read>:

static et_RET COM__Read(et_MODBUS et_dev, uint8_t *vec, uint8_t size)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	71fb      	strb	r3, [r7, #7]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71bb      	strb	r3, [r7, #6]
    et_RET et_ret = RET_UNEXPECTED;
 8005a8c:	23ff      	movs	r3, #255	; 0xff
 8005a8e:	73fb      	strb	r3, [r7, #15]
    CENTI_CHECK_PTR(vec);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10c      	bne.n	8005ab0 <COM__Read+0x34>
 8005a96:	481f      	ldr	r0, [pc, #124]	; (8005b14 <COM__Read+0x98>)
 8005a98:	f000 fc48 	bl	800632c <iprintf>
 8005a9c:	f06f 0004 	mvn.w	r0, #4
 8005aa0:	f7ff f924 	bl	8004cec <CeNTI_Debug__Return>
 8005aa4:	200a      	movs	r0, #10
 8005aa6:	f000 fc53 	bl	8006350 <putchar>
 8005aaa:	f06f 0304 	mvn.w	r3, #4
 8005aae:	e02c      	b.n	8005b0a <COM__Read+0x8e>
	ST_CONF[et_dev].gpio__Setlevel(MODBUS_MODE_READ);
 8005ab0:	79fa      	ldrb	r2, [r7, #7]
 8005ab2:	4919      	ldr	r1, [pc, #100]	; (8005b18 <COM__Read+0x9c>)
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	3314      	adds	r3, #20
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	4798      	blx	r3
	et_ret = ST_CONF[et_dev].uart__Read(vec, size);
 8005ac6:	79fa      	ldrb	r2, [r7, #7]
 8005ac8:	4913      	ldr	r1, [pc, #76]	; (8005b18 <COM__Read+0x9c>)
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	79ba      	ldrb	r2, [r7, #6]
 8005ada:	4611      	mov	r1, r2
 8005adc:	6838      	ldr	r0, [r7, #0]
 8005ade:	4798      	blx	r3
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]
	CENTI_CHECK_RET(et_ret);
 8005ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	da0d      	bge.n	8005b08 <COM__Read+0x8c>
 8005aec:	4809      	ldr	r0, [pc, #36]	; (8005b14 <COM__Read+0x98>)
 8005aee:	f000 fc1d 	bl	800632c <iprintf>
 8005af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff f8f8 	bl	8004cec <CeNTI_Debug__Return>
 8005afc:	200a      	movs	r0, #10
 8005afe:	f000 fc27 	bl	8006350 <putchar>
 8005b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b06:	e000      	b.n	8005b0a <COM__Read+0x8e>
	return RET_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	08007354 	.word	0x08007354
 8005b18:	08007708 	.word	0x08007708

08005b1c <Manager__Initialize>:

/* ************************************************************************************ */
/* * Public Functions                                                                 * */
/* ************************************************************************************ */
et_RET Manager__Initialize(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
    et_RET et_ret = RET_UNEXPECTED;
 8005b22:	23ff      	movs	r3, #255	; 0xff
 8005b24:	73fb      	strb	r3, [r7, #15]
    st_TIME ST_COLLECT_DATA_TIME = { .sec = 5, .msec = 0 };
 8005b26:	2300      	movs	r3, #0
 8005b28:	80bb      	strh	r3, [r7, #4]
 8005b2a:	2305      	movs	r3, #5
 8005b2c:	60bb      	str	r3, [r7, #8]
    CENTI_DEBUG__Info("Manager initialization");
 8005b2e:	4832      	ldr	r0, [pc, #200]	; (8005bf8 <Manager__Initialize+0xdc>)
 8005b30:	f000 fbfc 	bl	800632c <iprintf>
 8005b34:	4831      	ldr	r0, [pc, #196]	; (8005bfc <Manager__Initialize+0xe0>)
 8005b36:	f000 fbf9 	bl	800632c <iprintf>
 8005b3a:	200a      	movs	r0, #10
 8005b3c:	f000 fc08 	bl	8006350 <putchar>
    /* Initialize each device. */
    SoftTimer__Start(SOFTTIMER_INSTANCE_collect_data_LOOP, ST_COLLECT_DATA_TIME);
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005b46:	2001      	movs	r0, #1
 8005b48:	f7ff f99e 	bl	8004e88 <SoftTimer__Start>
    et_ret = ArrayList__Initialize(LIST_MANAGER_COMMANDS_WAITING, vec_MANAGER_CMDS__waiting, MAX_WAITING_MANAGER_CMDS, sizeof(et_DEVICE_CMD), NULL);
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2301      	movs	r3, #1
 8005b52:	221e      	movs	r2, #30
 8005b54:	492a      	ldr	r1, [pc, #168]	; (8005c00 <Manager__Initialize+0xe4>)
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7fe fe44 	bl	80047e4 <ArrayList__Initialize>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
    MANAGER_CHECK_RET(et_ret);
 8005b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d014      	beq.n	8005b92 <Manager__Initialize+0x76>
 8005b68:	4b26      	ldr	r3, [pc, #152]	; (8005c04 <Manager__Initialize+0xe8>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da0d      	bge.n	8005b92 <Manager__Initialize+0x76>
 8005b76:	4824      	ldr	r0, [pc, #144]	; (8005c08 <Manager__Initialize+0xec>)
 8005b78:	f000 fbd8 	bl	800632c <iprintf>
 8005b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff f8b3 	bl	8004cec <CeNTI_Debug__Return>
 8005b86:	200a      	movs	r0, #10
 8005b88:	f000 fbe2 	bl	8006350 <putchar>
 8005b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b90:	e02d      	b.n	8005bee <Manager__Initialize+0xd2>
    et_ret = MODBUS__Initialize(MODBUS_DEFAULT);
 8005b92:	2000      	movs	r0, #0
 8005b94:	f7ff fbba 	bl	800530c <MODBUS__Initialize>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]
    MANAGER_CHECK_RET(et_ret);
 8005b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d014      	beq.n	8005bce <Manager__Initialize+0xb2>
 8005ba4:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <Manager__Initialize+0xe8>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da0d      	bge.n	8005bce <Manager__Initialize+0xb2>
 8005bb2:	4815      	ldr	r0, [pc, #84]	; (8005c08 <Manager__Initialize+0xec>)
 8005bb4:	f000 fbba 	bl	800632c <iprintf>
 8005bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff f895 	bl	8004cec <CeNTI_Debug__Return>
 8005bc2:	200a      	movs	r0, #10
 8005bc4:	f000 fbc4 	bl	8006350 <putchar>
 8005bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bcc:	e00f      	b.n	8005bee <Manager__Initialize+0xd2>

    /* Indicate that initialization was successfully complete. */
    g_initialized = true;
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <Manager__Initialize+0xf0>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
    g_et_state = MANAGER_STATE_IDLE;
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <Manager__Initialize+0xe8>)
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	701a      	strb	r2, [r3, #0]
    CENTI_DEBUG__Info("Manager initialization complete");
 8005bda:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <Manager__Initialize+0xdc>)
 8005bdc:	f000 fba6 	bl	800632c <iprintf>
 8005be0:	480b      	ldr	r0, [pc, #44]	; (8005c10 <Manager__Initialize+0xf4>)
 8005be2:	f000 fba3 	bl	800632c <iprintf>
 8005be6:	200a      	movs	r0, #10
 8005be8:	f000 fbb2 	bl	8006350 <putchar>
    return RET_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	0800753c 	.word	0x0800753c
 8005bfc:	08007548 	.word	0x08007548
 8005c00:	2000037c 	.word	0x2000037c
 8005c04:	20000098 	.word	0x20000098
 8005c08:	08007560 	.word	0x08007560
 8005c0c:	2000037a 	.word	0x2000037a
 8005c10:	0800756c 	.word	0x0800756c

08005c14 <Manager__Loop>:

et_RET Manager__Loop(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
    et_RET et_ret = RET_UNEXPECTED;
 8005c1a:	23ff      	movs	r3, #255	; 0xff
 8005c1c:	73fb      	strb	r3, [r7, #15]
    static et_DEVICE_CMD et_cmd = DEVICE_CMD__NONE;
    et_DEVICE_CMD et_aux_cmd = DEVICE_STATE_GET_DATA;
 8005c1e:	2302      	movs	r3, #2
 8005c20:	73bb      	strb	r3, [r7, #14]
    st_MODBUS_COMMAND command = {};
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]
        
    switch (g_et_state)
 8005c2a:	4b97      	ldr	r3, [pc, #604]	; (8005e88 <Manager__Loop+0x274>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	f200 811e 	bhi.w	8005e70 <Manager__Loop+0x25c>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <Manager__Loop+0x28>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c4d 	.word	0x08005c4d
 8005c40:	08005c83 	.word	0x08005c83
 8005c44:	08005d0d 	.word	0x08005d0d
 8005c48:	08005e19 	.word	0x08005e19
    {
        case MANAGER_STATE_ERROR:
            CENTI_DEBUG__Error("Manager error");
 8005c4c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8005c50:	498e      	ldr	r1, [pc, #568]	; (8005e8c <Manager__Loop+0x278>)
 8005c52:	488f      	ldr	r0, [pc, #572]	; (8005e90 <Manager__Loop+0x27c>)
 8005c54:	f000 fb6a 	bl	800632c <iprintf>
 8005c58:	488e      	ldr	r0, [pc, #568]	; (8005e94 <Manager__Loop+0x280>)
 8005c5a:	f000 fb67 	bl	800632c <iprintf>
 8005c5e:	488e      	ldr	r0, [pc, #568]	; (8005e98 <Manager__Loop+0x284>)
 8005c60:	f000 fb64 	bl	800632c <iprintf>
 8005c64:	200a      	movs	r0, #10
 8005c66:	f000 fb73 	bl	8006350 <putchar>
            CENTI_DEBUG__Info("Reinitializing manager");
 8005c6a:	488c      	ldr	r0, [pc, #560]	; (8005e9c <Manager__Loop+0x288>)
 8005c6c:	f000 fb5e 	bl	800632c <iprintf>
 8005c70:	488b      	ldr	r0, [pc, #556]	; (8005ea0 <Manager__Loop+0x28c>)
 8005c72:	f000 fb5b 	bl	800632c <iprintf>
 8005c76:	200a      	movs	r0, #10
 8005c78:	f000 fb6a 	bl	8006350 <putchar>
            g_et_state = MANAGER_STATE_INIT;
 8005c7c:	4b82      	ldr	r3, [pc, #520]	; (8005e88 <Manager__Loop+0x274>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
        case MANAGER_STATE_INIT:
            et_ret = Manager__Initialize();
 8005c82:	f7ff ff4b 	bl	8005b1c <Manager__Initialize>
 8005c86:	4603      	mov	r3, r0
 8005c88:	73fb      	strb	r3, [r7, #15]
            MANAGER_CHECK_RET(et_ret);
 8005c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d014      	beq.n	8005cbc <Manager__Loop+0xa8>
 8005c92:	4b7d      	ldr	r3, [pc, #500]	; (8005e88 <Manager__Loop+0x274>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	da0d      	bge.n	8005cbc <Manager__Loop+0xa8>
 8005ca0:	4880      	ldr	r0, [pc, #512]	; (8005ea4 <Manager__Loop+0x290>)
 8005ca2:	f000 fb43 	bl	800632c <iprintf>
 8005ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f81e 	bl	8004cec <CeNTI_Debug__Return>
 8005cb0:	200a      	movs	r0, #10
 8005cb2:	f000 fb4d 	bl	8006350 <putchar>
 8005cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cba:	e0e1      	b.n	8005e80 <Manager__Loop+0x26c>
            et_cmd = DEVICE_CMD_STATE__INIT;
 8005cbc:	4b7a      	ldr	r3, [pc, #488]	; (8005ea8 <Manager__Loop+0x294>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
            et_ret = Manager_DEVICE__StateMachine(et_cmd);
 8005cc2:	4b79      	ldr	r3, [pc, #484]	; (8005ea8 <Manager__Loop+0x294>)
 8005cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f8f7 	bl	8005ebc <Manager_DEVICE__StateMachine>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]
			MANAGER_CHECK_RET(et_ret);
 8005cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d014      	beq.n	8005d04 <Manager__Loop+0xf0>
 8005cda:	4b6b      	ldr	r3, [pc, #428]	; (8005e88 <Manager__Loop+0x274>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	da0d      	bge.n	8005d04 <Manager__Loop+0xf0>
 8005ce8:	486e      	ldr	r0, [pc, #440]	; (8005ea4 <Manager__Loop+0x290>)
 8005cea:	f000 fb1f 	bl	800632c <iprintf>
 8005cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe fffa 	bl	8004cec <CeNTI_Debug__Return>
 8005cf8:	200a      	movs	r0, #10
 8005cfa:	f000 fb29 	bl	8006350 <putchar>
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d02:	e0bd      	b.n	8005e80 <Manager__Loop+0x26c>
			g_et_state = MANAGER_STATE_IDLE;
 8005d04:	4b60      	ldr	r3, [pc, #384]	; (8005e88 <Manager__Loop+0x274>)
 8005d06:	2202      	movs	r2, #2
 8005d08:	701a      	strb	r2, [r3, #0]
            break;
 8005d0a:	e0b8      	b.n	8005e7e <Manager__Loop+0x26a>
        case MANAGER_STATE_IDLE:
        	if (f_collect_data == FLAG_ON)
 8005d0c:	4b67      	ldr	r3, [pc, #412]	; (8005eac <Manager__Loop+0x298>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d033      	beq.n	8005d7c <Manager__Loop+0x168>
            {
				CENTI_DEBUG__Info("Time to get data");
 8005d14:	4861      	ldr	r0, [pc, #388]	; (8005e9c <Manager__Loop+0x288>)
 8005d16:	f000 fb09 	bl	800632c <iprintf>
 8005d1a:	4865      	ldr	r0, [pc, #404]	; (8005eb0 <Manager__Loop+0x29c>)
 8005d1c:	f000 fb06 	bl	800632c <iprintf>
 8005d20:	200a      	movs	r0, #10
 8005d22:	f000 fb15 	bl	8006350 <putchar>
				f_collect_data = FLAG_OFF;
 8005d26:	4b61      	ldr	r3, [pc, #388]	; (8005eac <Manager__Loop+0x298>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
				et_ret = ArrayList__Add(LIST_MANAGER_COMMANDS_WAITING, &et_aux_cmd);
 8005d2c:	f107 030e 	add.w	r3, r7, #14
 8005d30:	4619      	mov	r1, r3
 8005d32:	2000      	movs	r0, #0
 8005d34:	f7fe fe40 	bl	80049b8 <ArrayList__Add>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	73fb      	strb	r3, [r7, #15]
				MANAGER_CHECK_RET(et_ret);
 8005d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d014      	beq.n	8005d6e <Manager__Loop+0x15a>
 8005d44:	4b50      	ldr	r3, [pc, #320]	; (8005e88 <Manager__Loop+0x274>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da0d      	bge.n	8005d6e <Manager__Loop+0x15a>
 8005d52:	4854      	ldr	r0, [pc, #336]	; (8005ea4 <Manager__Loop+0x290>)
 8005d54:	f000 faea 	bl	800632c <iprintf>
 8005d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe ffc5 	bl	8004cec <CeNTI_Debug__Return>
 8005d62:	200a      	movs	r0, #10
 8005d64:	f000 faf4 	bl	8006350 <putchar>
 8005d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d6c:	e088      	b.n	8005e80 <Manager__Loop+0x26c>
				SoftTimer__Restart(SOFTTIMER_INSTANCE_collect_data_LOOP);
 8005d6e:	2001      	movs	r0, #1
 8005d70:	f7ff f932 	bl	8004fd8 <SoftTimer__Restart>
				g_et_state = MANAGER_STATE_IDLE;
 8005d74:	4b44      	ldr	r3, [pc, #272]	; (8005e88 <Manager__Loop+0x274>)
 8005d76:	2202      	movs	r2, #2
 8005d78:	701a      	strb	r2, [r3, #0]
                break;
 8005d7a:	e080      	b.n	8005e7e <Manager__Loop+0x26a>
            }
        	if (Manager__NewCommandAvailable())
 8005d7c:	f000 f962 	bl	8006044 <Manager__NewCommandAvailable>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d02a      	beq.n	8005ddc <Manager__Loop+0x1c8>
			{
				CENTI_DEBUG__Info("New command available");
 8005d86:	4845      	ldr	r0, [pc, #276]	; (8005e9c <Manager__Loop+0x288>)
 8005d88:	f000 fad0 	bl	800632c <iprintf>
 8005d8c:	4849      	ldr	r0, [pc, #292]	; (8005eb4 <Manager__Loop+0x2a0>)
 8005d8e:	f000 facd 	bl	800632c <iprintf>
 8005d92:	200a      	movs	r0, #10
 8005d94:	f000 fadc 	bl	8006350 <putchar>
				et_ret = Manager__GetCommand(&et_cmd);
 8005d98:	4843      	ldr	r0, [pc, #268]	; (8005ea8 <Manager__Loop+0x294>)
 8005d9a:	f000 f969 	bl	8006070 <Manager__GetCommand>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
				MANAGER_CHECK_RET(et_ret);
 8005da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d014      	beq.n	8005dd4 <Manager__Loop+0x1c0>
 8005daa:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <Manager__Loop+0x274>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	da0d      	bge.n	8005dd4 <Manager__Loop+0x1c0>
 8005db8:	483a      	ldr	r0, [pc, #232]	; (8005ea4 <Manager__Loop+0x290>)
 8005dba:	f000 fab7 	bl	800632c <iprintf>
 8005dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe ff92 	bl	8004cec <CeNTI_Debug__Return>
 8005dc8:	200a      	movs	r0, #10
 8005dca:	f000 fac1 	bl	8006350 <putchar>
 8005dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd2:	e055      	b.n	8005e80 <Manager__Loop+0x26c>
				g_et_state = MANAGER_STATE_PROCESS_CMD;
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <Manager__Loop+0x274>)
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	701a      	strb	r2, [r3, #0]
				break;
 8005dda:	e050      	b.n	8005e7e <Manager__Loop+0x26a>
			}
        	if (MODBUS__Check_Receive(MODBUS_DEFAULT))
 8005ddc:	2000      	movs	r0, #0
 8005dde:	f7ff fbd7 	bl	8005590 <MODBUS__Check_Receive>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d047      	beq.n	8005e78 <Manager__Loop+0x264>
        	{
        		command.slave_addr = SLAVE_ADDRESS;
 8005de8:	2330      	movs	r3, #48	; 0x30
 8005dea:	713b      	strb	r3, [r7, #4]
        		MODBUS__Get_Command(MODBUS_DEFAULT, &command);
 8005dec:	1d3b      	adds	r3, r7, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	2000      	movs	r0, #0
 8005df2:	f7ff fbed 	bl	80055d0 <MODBUS__Get_Command>
        		switch (command.function_code) {
 8005df6:	797b      	ldrb	r3, [r7, #5]
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d10b      	bne.n	8005e14 <Manager__Loop+0x200>
					case MODBUS_FUNCTION_CODES__READ_INPUT:
						et_aux_cmd = DEVICE_STATE_REPORT_DATA;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	73bb      	strb	r3, [r7, #14]
		        		ArrayList__Add(LIST_MANAGER_COMMANDS_WAITING, &et_aux_cmd);
 8005e00:	f107 030e 	add.w	r3, r7, #14
 8005e04:	4619      	mov	r1, r3
 8005e06:	2000      	movs	r0, #0
 8005e08:	f7fe fdd6 	bl	80049b8 <ArrayList__Add>

						g_et_state = MANAGER_STATE_IDLE;
 8005e0c:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <Manager__Loop+0x274>)
 8005e0e:	2202      	movs	r2, #2
 8005e10:	701a      	strb	r2, [r3, #0]
						break;
 8005e12:	e000      	b.n	8005e16 <Manager__Loop+0x202>
					default:
						break;
 8005e14:	bf00      	nop
				}
        	}
        	break;
 8005e16:	e02f      	b.n	8005e78 <Manager__Loop+0x264>

        case MANAGER_STATE_PROCESS_CMD:
        	et_ret = Manager_DEVICE__StateMachine(et_cmd);
 8005e18:	4b23      	ldr	r3, [pc, #140]	; (8005ea8 <Manager__Loop+0x294>)
 8005e1a:	f993 3000 	ldrsb.w	r3, [r3]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 f84c 	bl	8005ebc <Manager_DEVICE__StateMachine>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
			MANAGER_CHECK_RET(et_ret);
 8005e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d014      	beq.n	8005e5a <Manager__Loop+0x246>
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <Manager__Loop+0x274>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	da0d      	bge.n	8005e5a <Manager__Loop+0x246>
 8005e3e:	4819      	ldr	r0, [pc, #100]	; (8005ea4 <Manager__Loop+0x290>)
 8005e40:	f000 fa74 	bl	800632c <iprintf>
 8005e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe ff4f 	bl	8004cec <CeNTI_Debug__Return>
 8005e4e:	200a      	movs	r0, #10
 8005e50:	f000 fa7e 	bl	8006350 <putchar>
 8005e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e58:	e012      	b.n	8005e80 <Manager__Loop+0x26c>
			if (g_et_device_process_status == DEVICE_PROCESS_STATUS__DONE)
 8005e5a:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <Manager__Loop+0x2a4>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d10c      	bne.n	8005e7c <Manager__Loop+0x268>
			{
				g_et_state = MANAGER_STATE_IDLE;
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <Manager__Loop+0x274>)
 8005e64:	2202      	movs	r2, #2
 8005e66:	701a      	strb	r2, [r3, #0]
				et_cmd = DEVICE_CMD__NONE;
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <Manager__Loop+0x294>)
 8005e6a:	22ff      	movs	r2, #255	; 0xff
 8005e6c:	701a      	strb	r2, [r3, #0]
			}
            break;
 8005e6e:	e005      	b.n	8005e7c <Manager__Loop+0x268>
        default:
            g_et_state = MANAGER_STATE_ERROR;
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <Manager__Loop+0x274>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
            break;
 8005e76:	e002      	b.n	8005e7e <Manager__Loop+0x26a>
        	break;
 8005e78:	bf00      	nop
 8005e7a:	e000      	b.n	8005e7e <Manager__Loop+0x26a>
            break;
 8005e7c:	bf00      	nop
    }
    return RET_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000098 	.word	0x20000098
 8005e8c:	0800758c 	.word	0x0800758c
 8005e90:	080075ac 	.word	0x080075ac
 8005e94:	080075bc 	.word	0x080075bc
 8005e98:	080075c8 	.word	0x080075c8
 8005e9c:	0800753c 	.word	0x0800753c
 8005ea0:	080075d8 	.word	0x080075d8
 8005ea4:	08007560 	.word	0x08007560
 8005ea8:	20000099 	.word	0x20000099
 8005eac:	20000379 	.word	0x20000379
 8005eb0:	080075f0 	.word	0x080075f0
 8005eb4:	08007604 	.word	0x08007604
 8005eb8:	2000037b 	.word	0x2000037b

08005ebc <Manager_DEVICE__StateMachine>:

/* ************************************************************************************ */
/* * Private Functions                                                                * */
/* ************************************************************************************ */
static et_RET Manager_DEVICE__StateMachine(et_DEVICE_CMD et_cmd)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	71fb      	strb	r3, [r7, #7]
    et_RET et_ret = RET_UNEXPECTED;
 8005ec6:	23ff      	movs	r3, #255	; 0xff
 8005ec8:	73fb      	strb	r3, [r7, #15]
    static uint8_t msg_size = 0;
    static uint8_t MODBUS_msg[MAX_MODBUS_MSG_SIZE] = {};
    static et_MODBUS_FUNCTION_CODES function_code = MODBUS_FUNCTION_CODES__NONE;
    static uint16_t data = 0;

    switch (DEVICE_STATE_vec[et_cmd][state_idx])
 8005eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ece:	4a4f      	ldr	r2, [pc, #316]	; (800600c <Manager_DEVICE__StateMachine+0x150>)
 8005ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed4:	4a4e      	ldr	r2, [pc, #312]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005ed6:	7812      	ldrb	r2, [r2, #0]
 8005ed8:	4413      	add	r3, r2
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	f200 808b 	bhi.w	8005ff8 <Manager_DEVICE__StateMachine+0x13c>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <Manager_DEVICE__StateMachine+0x2c>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f01 	.word	0x08005f01
 8005eec:	08005f4f 	.word	0x08005f4f
 8005ef0:	08005f27 	.word	0x08005f27
 8005ef4:	08005f75 	.word	0x08005f75
 8005ef8:	08005f95 	.word	0x08005f95
 8005efc:	08005fd9 	.word	0x08005fd9
    {
        case DEVICE_CMD_STATE__INIT:
            CENTI_DEBUG__Info("Device initialization");
 8005f00:	4844      	ldr	r0, [pc, #272]	; (8006014 <Manager_DEVICE__StateMachine+0x158>)
 8005f02:	f000 fa13 	bl	800632c <iprintf>
 8005f06:	4844      	ldr	r0, [pc, #272]	; (8006018 <Manager_DEVICE__StateMachine+0x15c>)
 8005f08:	f000 fa10 	bl	800632c <iprintf>
 8005f0c:	200a      	movs	r0, #10
 8005f0e:	f000 fa1f 	bl	8006350 <putchar>
            g_et_device_process_status = DEVICE_PROCESS_STATUS__PROCESSING;
 8005f12:	4b42      	ldr	r3, [pc, #264]	; (800601c <Manager_DEVICE__StateMachine+0x160>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
            state_idx++;
 8005f18:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	4b3b      	ldr	r3, [pc, #236]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005f22:	701a      	strb	r2, [r3, #0]
            break;
 8005f24:	e06c      	b.n	8006000 <Manager_DEVICE__StateMachine+0x144>
        case DEVICE_CMD_STATE__READ_SENSOR:
            CENTI_DEBUG__Info("Collect data from sensors connected");
 8005f26:	483b      	ldr	r0, [pc, #236]	; (8006014 <Manager_DEVICE__StateMachine+0x158>)
 8005f28:	f000 fa00 	bl	800632c <iprintf>
 8005f2c:	483c      	ldr	r0, [pc, #240]	; (8006020 <Manager_DEVICE__StateMachine+0x164>)
 8005f2e:	f000 f9fd 	bl	800632c <iprintf>
 8005f32:	200a      	movs	r0, #10
 8005f34:	f000 fa0c 	bl	8006350 <putchar>
            /* random data */
            data = 0x0145;
 8005f38:	4b3a      	ldr	r3, [pc, #232]	; (8006024 <Manager_DEVICE__StateMachine+0x168>)
 8005f3a:	f240 1245 	movw	r2, #325	; 0x145
 8005f3e:	801a      	strh	r2, [r3, #0]
            state_idx++;
 8005f40:	4b33      	ldr	r3, [pc, #204]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	3301      	adds	r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	4b31      	ldr	r3, [pc, #196]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005f4a:	701a      	strb	r2, [r3, #0]
			break;
 8005f4c:	e058      	b.n	8006000 <Manager_DEVICE__StateMachine+0x144>
        case DEVICE_CMD_STATE__RECEIVE_CMD:
            CENTI_DEBUG__Info("Device received command");
 8005f4e:	4831      	ldr	r0, [pc, #196]	; (8006014 <Manager_DEVICE__StateMachine+0x158>)
 8005f50:	f000 f9ec 	bl	800632c <iprintf>
 8005f54:	4834      	ldr	r0, [pc, #208]	; (8006028 <Manager_DEVICE__StateMachine+0x16c>)
 8005f56:	f000 f9e9 	bl	800632c <iprintf>
 8005f5a:	200a      	movs	r0, #10
 8005f5c:	f000 f9f8 	bl	8006350 <putchar>
            function_code = MODBUS_FUNCTION_CODES__READ_INPUT;
 8005f60:	4b32      	ldr	r3, [pc, #200]	; (800602c <Manager_DEVICE__StateMachine+0x170>)
 8005f62:	2204      	movs	r2, #4
 8005f64:	701a      	strb	r2, [r3, #0]
            state_idx++;
 8005f66:	4b2a      	ldr	r3, [pc, #168]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	4b28      	ldr	r3, [pc, #160]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005f70:	701a      	strb	r2, [r3, #0]
            break;
 8005f72:	e045      	b.n	8006000 <Manager_DEVICE__StateMachine+0x144>
        case DEVICE_CMD_STATE__PROCESS_DATA:
        	CENTI_DEBUG__Info("Device processing data");
 8005f74:	4827      	ldr	r0, [pc, #156]	; (8006014 <Manager_DEVICE__StateMachine+0x158>)
 8005f76:	f000 f9d9 	bl	800632c <iprintf>
 8005f7a:	482d      	ldr	r0, [pc, #180]	; (8006030 <Manager_DEVICE__StateMachine+0x174>)
 8005f7c:	f000 f9d6 	bl	800632c <iprintf>
 8005f80:	200a      	movs	r0, #10
 8005f82:	f000 f9e5 	bl	8006350 <putchar>
        	state_idx++;
 8005f86:	4b22      	ldr	r3, [pc, #136]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005f90:	701a      	strb	r2, [r3, #0]
        	break;
 8005f92:	e035      	b.n	8006000 <Manager_DEVICE__StateMachine+0x144>
        case DEVICE_CMD_STATE__REPORT_DATA:
            CENTI_DEBUG__Info("Device reporting data");
 8005f94:	481f      	ldr	r0, [pc, #124]	; (8006014 <Manager_DEVICE__StateMachine+0x158>)
 8005f96:	f000 f9c9 	bl	800632c <iprintf>
 8005f9a:	4826      	ldr	r0, [pc, #152]	; (8006034 <Manager_DEVICE__StateMachine+0x178>)
 8005f9c:	f000 f9c6 	bl	800632c <iprintf>
 8005fa0:	200a      	movs	r0, #10
 8005fa2:	f000 f9d5 	bl	8006350 <putchar>

            function_code = MODBUS_FUNCTION_CODES__READ_INPUT;
 8005fa6:	4b21      	ldr	r3, [pc, #132]	; (800602c <Manager_DEVICE__StateMachine+0x170>)
 8005fa8:	2204      	movs	r2, #4
 8005faa:	701a      	strb	r2, [r3, #0]

            DEVICE__Build_Data_Message (MODBUS_msg, function_code, data, &msg_size);
 8005fac:	4b1f      	ldr	r3, [pc, #124]	; (800602c <Manager_DEVICE__StateMachine+0x170>)
 8005fae:	7819      	ldrb	r1, [r3, #0]
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	; (8006024 <Manager_DEVICE__StateMachine+0x168>)
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	4b20      	ldr	r3, [pc, #128]	; (8006038 <Manager_DEVICE__StateMachine+0x17c>)
 8005fb6:	4821      	ldr	r0, [pc, #132]	; (800603c <Manager_DEVICE__StateMachine+0x180>)
 8005fb8:	f000 f8a8 	bl	800610c <DEVICE__Build_Data_Message>
            MODBUS__Send_Response(MODBUS_DEFAULT, MODBUS_msg, msg_size);
 8005fbc:	4b1e      	ldr	r3, [pc, #120]	; (8006038 <Manager_DEVICE__StateMachine+0x17c>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	491e      	ldr	r1, [pc, #120]	; (800603c <Manager_DEVICE__StateMachine+0x180>)
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f7ff fa85 	bl	80054d4 <MODBUS__Send_Response>
            state_idx++;
 8005fca:	4b11      	ldr	r3, [pc, #68]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005fd4:	701a      	strb	r2, [r3, #0]
            break;
 8005fd6:	e013      	b.n	8006000 <Manager_DEVICE__StateMachine+0x144>
        case DEVICE_CMD_STATE__DONE:
            CENTI_DEBUG__Info("Device done");
 8005fd8:	480e      	ldr	r0, [pc, #56]	; (8006014 <Manager_DEVICE__StateMachine+0x158>)
 8005fda:	f000 f9a7 	bl	800632c <iprintf>
 8005fde:	4818      	ldr	r0, [pc, #96]	; (8006040 <Manager_DEVICE__StateMachine+0x184>)
 8005fe0:	f000 f9a4 	bl	800632c <iprintf>
 8005fe4:	200a      	movs	r0, #10
 8005fe6:	f000 f9b3 	bl	8006350 <putchar>
            g_et_device_process_status = DEVICE_PROCESS_STATUS__DONE;
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <Manager_DEVICE__StateMachine+0x160>)
 8005fec:	2202      	movs	r2, #2
 8005fee:	701a      	strb	r2, [r3, #0]
            state_idx = 0;
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
            break;
 8005ff6:	e003      	b.n	8006000 <Manager_DEVICE__StateMachine+0x144>
        default:
            state_idx = 0;
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <Manager_DEVICE__StateMachine+0x154>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
            break;
 8005ffe:	bf00      	nop
    }
    return RET_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000074 	.word	0x20000074
 8006010:	2000039a 	.word	0x2000039a
 8006014:	0800753c 	.word	0x0800753c
 8006018:	0800761c 	.word	0x0800761c
 800601c:	2000037b 	.word	0x2000037b
 8006020:	08007634 	.word	0x08007634
 8006024:	2000039c 	.word	0x2000039c
 8006028:	08007658 	.word	0x08007658
 800602c:	2000039e 	.word	0x2000039e
 8006030:	08007670 	.word	0x08007670
 8006034:	08007688 	.word	0x08007688
 8006038:	200003b0 	.word	0x200003b0
 800603c:	200003a0 	.word	0x200003a0
 8006040:	080076a0 	.word	0x080076a0

08006044 <Manager__NewCommandAvailable>:


static bool Manager__NewCommandAvailable(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
	bool counter = FLAG_OFF;
 800604a:	2300      	movs	r3, #0
 800604c:	71fb      	strb	r3, [r7, #7]

    (ArrayList__Get_ElementCounter(LIST_MANAGER_COMMANDS_WAITING) > 0) ? (counter = FLAG_ON) : (counter = FLAG_OFF);
 800604e:	2000      	movs	r0, #0
 8006050:	f7fe fe0a 	bl	8004c68 <ArrayList__Get_ElementCounter>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <Manager__NewCommandAvailable+0x1c>
 800605a:	2301      	movs	r3, #1
 800605c:	71fb      	strb	r3, [r7, #7]
 800605e:	e001      	b.n	8006064 <Manager__NewCommandAvailable+0x20>
 8006060:	2300      	movs	r3, #0
 8006062:	71fb      	strb	r3, [r7, #7]
    return counter;
 8006064:	79fb      	ldrb	r3, [r7, #7]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <Manager__GetCommand>:


static et_RET Manager__GetCommand(et_DEVICE_CMD *et_cmd)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
    et_RET et_ret = RET_UNEXPECTED;
 8006078:	23ff      	movs	r3, #255	; 0xff
 800607a:	73fb      	strb	r3, [r7, #15]
	et_ret = ArrayList__Get(LIST_MANAGER_COMMANDS_WAITING, 0, et_cmd);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	2100      	movs	r1, #0
 8006080:	2000      	movs	r0, #0
 8006082:	f7fe fc2d 	bl	80048e0 <ArrayList__Get>
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
	MANAGER_CHECK_RET(et_ret);
 800608a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d014      	beq.n	80060bc <Manager__GetCommand+0x4c>
 8006092:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <Manager__GetCommand+0x94>)
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800609c:	2b00      	cmp	r3, #0
 800609e:	da0d      	bge.n	80060bc <Manager__GetCommand+0x4c>
 80060a0:	4819      	ldr	r0, [pc, #100]	; (8006108 <Manager__GetCommand+0x98>)
 80060a2:	f000 f943 	bl	800632c <iprintf>
 80060a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fe1e 	bl	8004cec <CeNTI_Debug__Return>
 80060b0:	200a      	movs	r0, #10
 80060b2:	f000 f94d 	bl	8006350 <putchar>
 80060b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ba:	e01f      	b.n	80060fc <Manager__GetCommand+0x8c>
	et_ret = ArrayList__RemoveAt(LIST_MANAGER_COMMANDS_WAITING, 0);
 80060bc:	2100      	movs	r1, #0
 80060be:	2000      	movs	r0, #0
 80060c0:	f7fe fd0e 	bl	8004ae0 <ArrayList__RemoveAt>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
	MANAGER_CHECK_RET(et_ret);
 80060c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d014      	beq.n	80060fa <Manager__GetCommand+0x8a>
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <Manager__GetCommand+0x94>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da0d      	bge.n	80060fa <Manager__GetCommand+0x8a>
 80060de:	480a      	ldr	r0, [pc, #40]	; (8006108 <Manager__GetCommand+0x98>)
 80060e0:	f000 f924 	bl	800632c <iprintf>
 80060e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe fdff 	bl	8004cec <CeNTI_Debug__Return>
 80060ee:	200a      	movs	r0, #10
 80060f0:	f000 f92e 	bl	8006350 <putchar>
 80060f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f8:	e000      	b.n	80060fc <Manager__GetCommand+0x8c>
    return RET_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000098 	.word	0x20000098
 8006108:	08007560 	.word	0x08007560

0800610c <DEVICE__Build_Data_Message>:

static void DEVICE__Build_Data_Message (uint8_t *MODBUS_msg, et_MODBUS_FUNCTION_CODES function_code, uint16_t data, uint8_t *msg_size)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	72fb      	strb	r3, [r7, #11]
 800611a:	4613      	mov	r3, r2
 800611c:	813b      	strh	r3, [r7, #8]
	// verificar se comando válido ou excepção
	*msg_size = 0;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
	MODBUS_msg[(*msg_size)++] = SLAVE_ADDRESS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	b2d1      	uxtb	r1, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7011      	strb	r1, [r2, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	2230      	movs	r2, #48	; 0x30
 8006138:	701a      	strb	r2, [r3, #0]
	MODBUS_msg[(*msg_size)++] = function_code;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	b2d1      	uxtb	r1, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	7011      	strb	r1, [r2, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	7afa      	ldrb	r2, [r7, #11]
 800614e:	701a      	strb	r2, [r3, #0]
	MODBUS_msg[(*msg_size)++] = sizeof(data);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	b2d1      	uxtb	r1, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	7011      	strb	r1, [r2, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	2202      	movs	r2, #2
 8006164:	701a      	strb	r2, [r3, #0]
	MODBUS_msg[(*msg_size)++] = ((data >> 8) & 0xFF);
 8006166:	893b      	ldrh	r3, [r7, #8]
 8006168:	0a1b      	lsrs	r3, r3, #8
 800616a:	b299      	uxth	r1, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	b2d0      	uxtb	r0, r2
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	7010      	strb	r0, [r2, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	b2ca      	uxtb	r2, r1
 8006180:	701a      	strb	r2, [r3, #0]
	MODBUS_msg[(*msg_size)++] = (data & 0xFF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	b2d1      	uxtb	r1, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	7011      	strb	r1, [r2, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	893a      	ldrh	r2, [r7, #8]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]


}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <std>:
 80061a8:	2300      	movs	r3, #0
 80061aa:	b510      	push	{r4, lr}
 80061ac:	4604      	mov	r4, r0
 80061ae:	e9c0 3300 	strd	r3, r3, [r0]
 80061b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061b6:	6083      	str	r3, [r0, #8]
 80061b8:	8181      	strh	r1, [r0, #12]
 80061ba:	6643      	str	r3, [r0, #100]	; 0x64
 80061bc:	81c2      	strh	r2, [r0, #14]
 80061be:	6183      	str	r3, [r0, #24]
 80061c0:	4619      	mov	r1, r3
 80061c2:	2208      	movs	r2, #8
 80061c4:	305c      	adds	r0, #92	; 0x5c
 80061c6:	f000 f928 	bl	800641a <memset>
 80061ca:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <std+0x58>)
 80061cc:	6263      	str	r3, [r4, #36]	; 0x24
 80061ce:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <std+0x5c>)
 80061d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061d2:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <std+0x60>)
 80061d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061d6:	4b0d      	ldr	r3, [pc, #52]	; (800620c <std+0x64>)
 80061d8:	6323      	str	r3, [r4, #48]	; 0x30
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <std+0x68>)
 80061dc:	6224      	str	r4, [r4, #32]
 80061de:	429c      	cmp	r4, r3
 80061e0:	d006      	beq.n	80061f0 <std+0x48>
 80061e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80061e6:	4294      	cmp	r4, r2
 80061e8:	d002      	beq.n	80061f0 <std+0x48>
 80061ea:	33d0      	adds	r3, #208	; 0xd0
 80061ec:	429c      	cmp	r4, r3
 80061ee:	d105      	bne.n	80061fc <std+0x54>
 80061f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f8:	f000 b988 	b.w	800650c <__retarget_lock_init_recursive>
 80061fc:	bd10      	pop	{r4, pc}
 80061fe:	bf00      	nop
 8006200:	08006361 	.word	0x08006361
 8006204:	08006383 	.word	0x08006383
 8006208:	080063bb 	.word	0x080063bb
 800620c:	080063df 	.word	0x080063df
 8006210:	200003b4 	.word	0x200003b4

08006214 <stdio_exit_handler>:
 8006214:	4a02      	ldr	r2, [pc, #8]	; (8006220 <stdio_exit_handler+0xc>)
 8006216:	4903      	ldr	r1, [pc, #12]	; (8006224 <stdio_exit_handler+0x10>)
 8006218:	4803      	ldr	r0, [pc, #12]	; (8006228 <stdio_exit_handler+0x14>)
 800621a:	f000 b869 	b.w	80062f0 <_fwalk_sglue>
 800621e:	bf00      	nop
 8006220:	2000009c 	.word	0x2000009c
 8006224:	08006dd5 	.word	0x08006dd5
 8006228:	200000a8 	.word	0x200000a8

0800622c <cleanup_stdio>:
 800622c:	6841      	ldr	r1, [r0, #4]
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <cleanup_stdio+0x34>)
 8006230:	4299      	cmp	r1, r3
 8006232:	b510      	push	{r4, lr}
 8006234:	4604      	mov	r4, r0
 8006236:	d001      	beq.n	800623c <cleanup_stdio+0x10>
 8006238:	f000 fdcc 	bl	8006dd4 <_fflush_r>
 800623c:	68a1      	ldr	r1, [r4, #8]
 800623e:	4b09      	ldr	r3, [pc, #36]	; (8006264 <cleanup_stdio+0x38>)
 8006240:	4299      	cmp	r1, r3
 8006242:	d002      	beq.n	800624a <cleanup_stdio+0x1e>
 8006244:	4620      	mov	r0, r4
 8006246:	f000 fdc5 	bl	8006dd4 <_fflush_r>
 800624a:	68e1      	ldr	r1, [r4, #12]
 800624c:	4b06      	ldr	r3, [pc, #24]	; (8006268 <cleanup_stdio+0x3c>)
 800624e:	4299      	cmp	r1, r3
 8006250:	d004      	beq.n	800625c <cleanup_stdio+0x30>
 8006252:	4620      	mov	r0, r4
 8006254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006258:	f000 bdbc 	b.w	8006dd4 <_fflush_r>
 800625c:	bd10      	pop	{r4, pc}
 800625e:	bf00      	nop
 8006260:	200003b4 	.word	0x200003b4
 8006264:	2000041c 	.word	0x2000041c
 8006268:	20000484 	.word	0x20000484

0800626c <global_stdio_init.part.0>:
 800626c:	b510      	push	{r4, lr}
 800626e:	4b0b      	ldr	r3, [pc, #44]	; (800629c <global_stdio_init.part.0+0x30>)
 8006270:	4c0b      	ldr	r4, [pc, #44]	; (80062a0 <global_stdio_init.part.0+0x34>)
 8006272:	4a0c      	ldr	r2, [pc, #48]	; (80062a4 <global_stdio_init.part.0+0x38>)
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	4620      	mov	r0, r4
 8006278:	2200      	movs	r2, #0
 800627a:	2104      	movs	r1, #4
 800627c:	f7ff ff94 	bl	80061a8 <std>
 8006280:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006284:	2201      	movs	r2, #1
 8006286:	2109      	movs	r1, #9
 8006288:	f7ff ff8e 	bl	80061a8 <std>
 800628c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006290:	2202      	movs	r2, #2
 8006292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006296:	2112      	movs	r1, #18
 8006298:	f7ff bf86 	b.w	80061a8 <std>
 800629c:	200004ec 	.word	0x200004ec
 80062a0:	200003b4 	.word	0x200003b4
 80062a4:	08006215 	.word	0x08006215

080062a8 <__sfp_lock_acquire>:
 80062a8:	4801      	ldr	r0, [pc, #4]	; (80062b0 <__sfp_lock_acquire+0x8>)
 80062aa:	f000 b930 	b.w	800650e <__retarget_lock_acquire_recursive>
 80062ae:	bf00      	nop
 80062b0:	200004f5 	.word	0x200004f5

080062b4 <__sfp_lock_release>:
 80062b4:	4801      	ldr	r0, [pc, #4]	; (80062bc <__sfp_lock_release+0x8>)
 80062b6:	f000 b92b 	b.w	8006510 <__retarget_lock_release_recursive>
 80062ba:	bf00      	nop
 80062bc:	200004f5 	.word	0x200004f5

080062c0 <__sinit>:
 80062c0:	b510      	push	{r4, lr}
 80062c2:	4604      	mov	r4, r0
 80062c4:	f7ff fff0 	bl	80062a8 <__sfp_lock_acquire>
 80062c8:	6a23      	ldr	r3, [r4, #32]
 80062ca:	b11b      	cbz	r3, 80062d4 <__sinit+0x14>
 80062cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d0:	f7ff bff0 	b.w	80062b4 <__sfp_lock_release>
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <__sinit+0x28>)
 80062d6:	6223      	str	r3, [r4, #32]
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <__sinit+0x2c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1f5      	bne.n	80062cc <__sinit+0xc>
 80062e0:	f7ff ffc4 	bl	800626c <global_stdio_init.part.0>
 80062e4:	e7f2      	b.n	80062cc <__sinit+0xc>
 80062e6:	bf00      	nop
 80062e8:	0800622d 	.word	0x0800622d
 80062ec:	200004ec 	.word	0x200004ec

080062f0 <_fwalk_sglue>:
 80062f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062f4:	4607      	mov	r7, r0
 80062f6:	4688      	mov	r8, r1
 80062f8:	4614      	mov	r4, r2
 80062fa:	2600      	movs	r6, #0
 80062fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006300:	f1b9 0901 	subs.w	r9, r9, #1
 8006304:	d505      	bpl.n	8006312 <_fwalk_sglue+0x22>
 8006306:	6824      	ldr	r4, [r4, #0]
 8006308:	2c00      	cmp	r4, #0
 800630a:	d1f7      	bne.n	80062fc <_fwalk_sglue+0xc>
 800630c:	4630      	mov	r0, r6
 800630e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d907      	bls.n	8006328 <_fwalk_sglue+0x38>
 8006318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800631c:	3301      	adds	r3, #1
 800631e:	d003      	beq.n	8006328 <_fwalk_sglue+0x38>
 8006320:	4629      	mov	r1, r5
 8006322:	4638      	mov	r0, r7
 8006324:	47c0      	blx	r8
 8006326:	4306      	orrs	r6, r0
 8006328:	3568      	adds	r5, #104	; 0x68
 800632a:	e7e9      	b.n	8006300 <_fwalk_sglue+0x10>

0800632c <iprintf>:
 800632c:	b40f      	push	{r0, r1, r2, r3}
 800632e:	b507      	push	{r0, r1, r2, lr}
 8006330:	4906      	ldr	r1, [pc, #24]	; (800634c <iprintf+0x20>)
 8006332:	ab04      	add	r3, sp, #16
 8006334:	6808      	ldr	r0, [r1, #0]
 8006336:	f853 2b04 	ldr.w	r2, [r3], #4
 800633a:	6881      	ldr	r1, [r0, #8]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	f000 fa19 	bl	8006774 <_vfiprintf_r>
 8006342:	b003      	add	sp, #12
 8006344:	f85d eb04 	ldr.w	lr, [sp], #4
 8006348:	b004      	add	sp, #16
 800634a:	4770      	bx	lr
 800634c:	200000f4 	.word	0x200000f4

08006350 <putchar>:
 8006350:	4b02      	ldr	r3, [pc, #8]	; (800635c <putchar+0xc>)
 8006352:	4601      	mov	r1, r0
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	6882      	ldr	r2, [r0, #8]
 8006358:	f000 bd64 	b.w	8006e24 <_putc_r>
 800635c:	200000f4 	.word	0x200000f4

08006360 <__sread>:
 8006360:	b510      	push	{r4, lr}
 8006362:	460c      	mov	r4, r1
 8006364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006368:	f000 f882 	bl	8006470 <_read_r>
 800636c:	2800      	cmp	r0, #0
 800636e:	bfab      	itete	ge
 8006370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006372:	89a3      	ldrhlt	r3, [r4, #12]
 8006374:	181b      	addge	r3, r3, r0
 8006376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800637a:	bfac      	ite	ge
 800637c:	6563      	strge	r3, [r4, #84]	; 0x54
 800637e:	81a3      	strhlt	r3, [r4, #12]
 8006380:	bd10      	pop	{r4, pc}

08006382 <__swrite>:
 8006382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006386:	461f      	mov	r7, r3
 8006388:	898b      	ldrh	r3, [r1, #12]
 800638a:	05db      	lsls	r3, r3, #23
 800638c:	4605      	mov	r5, r0
 800638e:	460c      	mov	r4, r1
 8006390:	4616      	mov	r6, r2
 8006392:	d505      	bpl.n	80063a0 <__swrite+0x1e>
 8006394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006398:	2302      	movs	r3, #2
 800639a:	2200      	movs	r2, #0
 800639c:	f000 f856 	bl	800644c <_lseek_r>
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	4632      	mov	r2, r6
 80063ae:	463b      	mov	r3, r7
 80063b0:	4628      	mov	r0, r5
 80063b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b6:	f000 b86d 	b.w	8006494 <_write_r>

080063ba <__sseek>:
 80063ba:	b510      	push	{r4, lr}
 80063bc:	460c      	mov	r4, r1
 80063be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c2:	f000 f843 	bl	800644c <_lseek_r>
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	bf15      	itete	ne
 80063cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063d6:	81a3      	strheq	r3, [r4, #12]
 80063d8:	bf18      	it	ne
 80063da:	81a3      	strhne	r3, [r4, #12]
 80063dc:	bd10      	pop	{r4, pc}

080063de <__sclose>:
 80063de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e2:	f000 b823 	b.w	800642c <_close_r>

080063e6 <memmove>:
 80063e6:	4288      	cmp	r0, r1
 80063e8:	b510      	push	{r4, lr}
 80063ea:	eb01 0402 	add.w	r4, r1, r2
 80063ee:	d902      	bls.n	80063f6 <memmove+0x10>
 80063f0:	4284      	cmp	r4, r0
 80063f2:	4623      	mov	r3, r4
 80063f4:	d807      	bhi.n	8006406 <memmove+0x20>
 80063f6:	1e43      	subs	r3, r0, #1
 80063f8:	42a1      	cmp	r1, r4
 80063fa:	d008      	beq.n	800640e <memmove+0x28>
 80063fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006400:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006404:	e7f8      	b.n	80063f8 <memmove+0x12>
 8006406:	4402      	add	r2, r0
 8006408:	4601      	mov	r1, r0
 800640a:	428a      	cmp	r2, r1
 800640c:	d100      	bne.n	8006410 <memmove+0x2a>
 800640e:	bd10      	pop	{r4, pc}
 8006410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006414:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006418:	e7f7      	b.n	800640a <memmove+0x24>

0800641a <memset>:
 800641a:	4402      	add	r2, r0
 800641c:	4603      	mov	r3, r0
 800641e:	4293      	cmp	r3, r2
 8006420:	d100      	bne.n	8006424 <memset+0xa>
 8006422:	4770      	bx	lr
 8006424:	f803 1b01 	strb.w	r1, [r3], #1
 8006428:	e7f9      	b.n	800641e <memset+0x4>
	...

0800642c <_close_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d06      	ldr	r5, [pc, #24]	; (8006448 <_close_r+0x1c>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f7fa fb8b 	bl	8000b52 <_close>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_close_r+0x1a>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_close_r+0x1a>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	200004f0 	.word	0x200004f0

0800644c <_lseek_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4d07      	ldr	r5, [pc, #28]	; (800646c <_lseek_r+0x20>)
 8006450:	4604      	mov	r4, r0
 8006452:	4608      	mov	r0, r1
 8006454:	4611      	mov	r1, r2
 8006456:	2200      	movs	r2, #0
 8006458:	602a      	str	r2, [r5, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	f7fa fba0 	bl	8000ba0 <_lseek>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_lseek_r+0x1e>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_lseek_r+0x1e>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200004f0 	.word	0x200004f0

08006470 <_read_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d07      	ldr	r5, [pc, #28]	; (8006490 <_read_r+0x20>)
 8006474:	4604      	mov	r4, r0
 8006476:	4608      	mov	r0, r1
 8006478:	4611      	mov	r1, r2
 800647a:	2200      	movs	r2, #0
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f7fa fb2e 	bl	8000ae0 <_read>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_read_r+0x1e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_read_r+0x1e>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	200004f0 	.word	0x200004f0

08006494 <_write_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d07      	ldr	r5, [pc, #28]	; (80064b4 <_write_r+0x20>)
 8006498:	4604      	mov	r4, r0
 800649a:	4608      	mov	r0, r1
 800649c:	4611      	mov	r1, r2
 800649e:	2200      	movs	r2, #0
 80064a0:	602a      	str	r2, [r5, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7fa fb39 	bl	8000b1a <_write>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_write_r+0x1e>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_write_r+0x1e>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	200004f0 	.word	0x200004f0

080064b8 <__errno>:
 80064b8:	4b01      	ldr	r3, [pc, #4]	; (80064c0 <__errno+0x8>)
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	200000f4 	.word	0x200000f4

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	; (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	; (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	; (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	; (8006508 <__libc_init_array+0x44>)
 80064d8:	f000 fe02 	bl	80070e0 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	08007770 	.word	0x08007770
 8006500:	08007770 	.word	0x08007770
 8006504:	08007770 	.word	0x08007770
 8006508:	08007774 	.word	0x08007774

0800650c <__retarget_lock_init_recursive>:
 800650c:	4770      	bx	lr

0800650e <__retarget_lock_acquire_recursive>:
 800650e:	4770      	bx	lr

08006510 <__retarget_lock_release_recursive>:
 8006510:	4770      	bx	lr

08006512 <memcpy>:
 8006512:	440a      	add	r2, r1
 8006514:	4291      	cmp	r1, r2
 8006516:	f100 33ff 	add.w	r3, r0, #4294967295
 800651a:	d100      	bne.n	800651e <memcpy+0xc>
 800651c:	4770      	bx	lr
 800651e:	b510      	push	{r4, lr}
 8006520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006528:	4291      	cmp	r1, r2
 800652a:	d1f9      	bne.n	8006520 <memcpy+0xe>
 800652c:	bd10      	pop	{r4, pc}
	...

08006530 <_free_r>:
 8006530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006532:	2900      	cmp	r1, #0
 8006534:	d044      	beq.n	80065c0 <_free_r+0x90>
 8006536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653a:	9001      	str	r0, [sp, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f1a1 0404 	sub.w	r4, r1, #4
 8006542:	bfb8      	it	lt
 8006544:	18e4      	addlt	r4, r4, r3
 8006546:	f000 f8df 	bl	8006708 <__malloc_lock>
 800654a:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <_free_r+0x94>)
 800654c:	9801      	ldr	r0, [sp, #4]
 800654e:	6813      	ldr	r3, [r2, #0]
 8006550:	b933      	cbnz	r3, 8006560 <_free_r+0x30>
 8006552:	6063      	str	r3, [r4, #4]
 8006554:	6014      	str	r4, [r2, #0]
 8006556:	b003      	add	sp, #12
 8006558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800655c:	f000 b8da 	b.w	8006714 <__malloc_unlock>
 8006560:	42a3      	cmp	r3, r4
 8006562:	d908      	bls.n	8006576 <_free_r+0x46>
 8006564:	6825      	ldr	r5, [r4, #0]
 8006566:	1961      	adds	r1, r4, r5
 8006568:	428b      	cmp	r3, r1
 800656a:	bf01      	itttt	eq
 800656c:	6819      	ldreq	r1, [r3, #0]
 800656e:	685b      	ldreq	r3, [r3, #4]
 8006570:	1949      	addeq	r1, r1, r5
 8006572:	6021      	streq	r1, [r4, #0]
 8006574:	e7ed      	b.n	8006552 <_free_r+0x22>
 8006576:	461a      	mov	r2, r3
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	b10b      	cbz	r3, 8006580 <_free_r+0x50>
 800657c:	42a3      	cmp	r3, r4
 800657e:	d9fa      	bls.n	8006576 <_free_r+0x46>
 8006580:	6811      	ldr	r1, [r2, #0]
 8006582:	1855      	adds	r5, r2, r1
 8006584:	42a5      	cmp	r5, r4
 8006586:	d10b      	bne.n	80065a0 <_free_r+0x70>
 8006588:	6824      	ldr	r4, [r4, #0]
 800658a:	4421      	add	r1, r4
 800658c:	1854      	adds	r4, r2, r1
 800658e:	42a3      	cmp	r3, r4
 8006590:	6011      	str	r1, [r2, #0]
 8006592:	d1e0      	bne.n	8006556 <_free_r+0x26>
 8006594:	681c      	ldr	r4, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	6053      	str	r3, [r2, #4]
 800659a:	440c      	add	r4, r1
 800659c:	6014      	str	r4, [r2, #0]
 800659e:	e7da      	b.n	8006556 <_free_r+0x26>
 80065a0:	d902      	bls.n	80065a8 <_free_r+0x78>
 80065a2:	230c      	movs	r3, #12
 80065a4:	6003      	str	r3, [r0, #0]
 80065a6:	e7d6      	b.n	8006556 <_free_r+0x26>
 80065a8:	6825      	ldr	r5, [r4, #0]
 80065aa:	1961      	adds	r1, r4, r5
 80065ac:	428b      	cmp	r3, r1
 80065ae:	bf04      	itt	eq
 80065b0:	6819      	ldreq	r1, [r3, #0]
 80065b2:	685b      	ldreq	r3, [r3, #4]
 80065b4:	6063      	str	r3, [r4, #4]
 80065b6:	bf04      	itt	eq
 80065b8:	1949      	addeq	r1, r1, r5
 80065ba:	6021      	streq	r1, [r4, #0]
 80065bc:	6054      	str	r4, [r2, #4]
 80065be:	e7ca      	b.n	8006556 <_free_r+0x26>
 80065c0:	b003      	add	sp, #12
 80065c2:	bd30      	pop	{r4, r5, pc}
 80065c4:	200004f8 	.word	0x200004f8

080065c8 <sbrk_aligned>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	4e0e      	ldr	r6, [pc, #56]	; (8006604 <sbrk_aligned+0x3c>)
 80065cc:	460c      	mov	r4, r1
 80065ce:	6831      	ldr	r1, [r6, #0]
 80065d0:	4605      	mov	r5, r0
 80065d2:	b911      	cbnz	r1, 80065da <sbrk_aligned+0x12>
 80065d4:	f000 fcf0 	bl	8006fb8 <_sbrk_r>
 80065d8:	6030      	str	r0, [r6, #0]
 80065da:	4621      	mov	r1, r4
 80065dc:	4628      	mov	r0, r5
 80065de:	f000 fceb 	bl	8006fb8 <_sbrk_r>
 80065e2:	1c43      	adds	r3, r0, #1
 80065e4:	d00a      	beq.n	80065fc <sbrk_aligned+0x34>
 80065e6:	1cc4      	adds	r4, r0, #3
 80065e8:	f024 0403 	bic.w	r4, r4, #3
 80065ec:	42a0      	cmp	r0, r4
 80065ee:	d007      	beq.n	8006600 <sbrk_aligned+0x38>
 80065f0:	1a21      	subs	r1, r4, r0
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 fce0 	bl	8006fb8 <_sbrk_r>
 80065f8:	3001      	adds	r0, #1
 80065fa:	d101      	bne.n	8006600 <sbrk_aligned+0x38>
 80065fc:	f04f 34ff 	mov.w	r4, #4294967295
 8006600:	4620      	mov	r0, r4
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	200004fc 	.word	0x200004fc

08006608 <_malloc_r>:
 8006608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800660c:	1ccd      	adds	r5, r1, #3
 800660e:	f025 0503 	bic.w	r5, r5, #3
 8006612:	3508      	adds	r5, #8
 8006614:	2d0c      	cmp	r5, #12
 8006616:	bf38      	it	cc
 8006618:	250c      	movcc	r5, #12
 800661a:	2d00      	cmp	r5, #0
 800661c:	4607      	mov	r7, r0
 800661e:	db01      	blt.n	8006624 <_malloc_r+0x1c>
 8006620:	42a9      	cmp	r1, r5
 8006622:	d905      	bls.n	8006630 <_malloc_r+0x28>
 8006624:	230c      	movs	r3, #12
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	2600      	movs	r6, #0
 800662a:	4630      	mov	r0, r6
 800662c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006630:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006704 <_malloc_r+0xfc>
 8006634:	f000 f868 	bl	8006708 <__malloc_lock>
 8006638:	f8d8 3000 	ldr.w	r3, [r8]
 800663c:	461c      	mov	r4, r3
 800663e:	bb5c      	cbnz	r4, 8006698 <_malloc_r+0x90>
 8006640:	4629      	mov	r1, r5
 8006642:	4638      	mov	r0, r7
 8006644:	f7ff ffc0 	bl	80065c8 <sbrk_aligned>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	4604      	mov	r4, r0
 800664c:	d155      	bne.n	80066fa <_malloc_r+0xf2>
 800664e:	f8d8 4000 	ldr.w	r4, [r8]
 8006652:	4626      	mov	r6, r4
 8006654:	2e00      	cmp	r6, #0
 8006656:	d145      	bne.n	80066e4 <_malloc_r+0xdc>
 8006658:	2c00      	cmp	r4, #0
 800665a:	d048      	beq.n	80066ee <_malloc_r+0xe6>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	4631      	mov	r1, r6
 8006660:	4638      	mov	r0, r7
 8006662:	eb04 0903 	add.w	r9, r4, r3
 8006666:	f000 fca7 	bl	8006fb8 <_sbrk_r>
 800666a:	4581      	cmp	r9, r0
 800666c:	d13f      	bne.n	80066ee <_malloc_r+0xe6>
 800666e:	6821      	ldr	r1, [r4, #0]
 8006670:	1a6d      	subs	r5, r5, r1
 8006672:	4629      	mov	r1, r5
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff ffa7 	bl	80065c8 <sbrk_aligned>
 800667a:	3001      	adds	r0, #1
 800667c:	d037      	beq.n	80066ee <_malloc_r+0xe6>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	442b      	add	r3, r5
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	f8d8 3000 	ldr.w	r3, [r8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d038      	beq.n	80066fe <_malloc_r+0xf6>
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	42a2      	cmp	r2, r4
 8006690:	d12b      	bne.n	80066ea <_malloc_r+0xe2>
 8006692:	2200      	movs	r2, #0
 8006694:	605a      	str	r2, [r3, #4]
 8006696:	e00f      	b.n	80066b8 <_malloc_r+0xb0>
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	1b52      	subs	r2, r2, r5
 800669c:	d41f      	bmi.n	80066de <_malloc_r+0xd6>
 800669e:	2a0b      	cmp	r2, #11
 80066a0:	d917      	bls.n	80066d2 <_malloc_r+0xca>
 80066a2:	1961      	adds	r1, r4, r5
 80066a4:	42a3      	cmp	r3, r4
 80066a6:	6025      	str	r5, [r4, #0]
 80066a8:	bf18      	it	ne
 80066aa:	6059      	strne	r1, [r3, #4]
 80066ac:	6863      	ldr	r3, [r4, #4]
 80066ae:	bf08      	it	eq
 80066b0:	f8c8 1000 	streq.w	r1, [r8]
 80066b4:	5162      	str	r2, [r4, r5]
 80066b6:	604b      	str	r3, [r1, #4]
 80066b8:	4638      	mov	r0, r7
 80066ba:	f104 060b 	add.w	r6, r4, #11
 80066be:	f000 f829 	bl	8006714 <__malloc_unlock>
 80066c2:	f026 0607 	bic.w	r6, r6, #7
 80066c6:	1d23      	adds	r3, r4, #4
 80066c8:	1af2      	subs	r2, r6, r3
 80066ca:	d0ae      	beq.n	800662a <_malloc_r+0x22>
 80066cc:	1b9b      	subs	r3, r3, r6
 80066ce:	50a3      	str	r3, [r4, r2]
 80066d0:	e7ab      	b.n	800662a <_malloc_r+0x22>
 80066d2:	42a3      	cmp	r3, r4
 80066d4:	6862      	ldr	r2, [r4, #4]
 80066d6:	d1dd      	bne.n	8006694 <_malloc_r+0x8c>
 80066d8:	f8c8 2000 	str.w	r2, [r8]
 80066dc:	e7ec      	b.n	80066b8 <_malloc_r+0xb0>
 80066de:	4623      	mov	r3, r4
 80066e0:	6864      	ldr	r4, [r4, #4]
 80066e2:	e7ac      	b.n	800663e <_malloc_r+0x36>
 80066e4:	4634      	mov	r4, r6
 80066e6:	6876      	ldr	r6, [r6, #4]
 80066e8:	e7b4      	b.n	8006654 <_malloc_r+0x4c>
 80066ea:	4613      	mov	r3, r2
 80066ec:	e7cc      	b.n	8006688 <_malloc_r+0x80>
 80066ee:	230c      	movs	r3, #12
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4638      	mov	r0, r7
 80066f4:	f000 f80e 	bl	8006714 <__malloc_unlock>
 80066f8:	e797      	b.n	800662a <_malloc_r+0x22>
 80066fa:	6025      	str	r5, [r4, #0]
 80066fc:	e7dc      	b.n	80066b8 <_malloc_r+0xb0>
 80066fe:	605b      	str	r3, [r3, #4]
 8006700:	deff      	udf	#255	; 0xff
 8006702:	bf00      	nop
 8006704:	200004f8 	.word	0x200004f8

08006708 <__malloc_lock>:
 8006708:	4801      	ldr	r0, [pc, #4]	; (8006710 <__malloc_lock+0x8>)
 800670a:	f7ff bf00 	b.w	800650e <__retarget_lock_acquire_recursive>
 800670e:	bf00      	nop
 8006710:	200004f4 	.word	0x200004f4

08006714 <__malloc_unlock>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__malloc_unlock+0x8>)
 8006716:	f7ff befb 	b.w	8006510 <__retarget_lock_release_recursive>
 800671a:	bf00      	nop
 800671c:	200004f4 	.word	0x200004f4

08006720 <__sfputc_r>:
 8006720:	6893      	ldr	r3, [r2, #8]
 8006722:	3b01      	subs	r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	b410      	push	{r4}
 8006728:	6093      	str	r3, [r2, #8]
 800672a:	da08      	bge.n	800673e <__sfputc_r+0x1e>
 800672c:	6994      	ldr	r4, [r2, #24]
 800672e:	42a3      	cmp	r3, r4
 8006730:	db01      	blt.n	8006736 <__sfputc_r+0x16>
 8006732:	290a      	cmp	r1, #10
 8006734:	d103      	bne.n	800673e <__sfputc_r+0x1e>
 8006736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800673a:	f000 bba7 	b.w	8006e8c <__swbuf_r>
 800673e:	6813      	ldr	r3, [r2, #0]
 8006740:	1c58      	adds	r0, r3, #1
 8006742:	6010      	str	r0, [r2, #0]
 8006744:	7019      	strb	r1, [r3, #0]
 8006746:	4608      	mov	r0, r1
 8006748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800674c:	4770      	bx	lr

0800674e <__sfputs_r>:
 800674e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006750:	4606      	mov	r6, r0
 8006752:	460f      	mov	r7, r1
 8006754:	4614      	mov	r4, r2
 8006756:	18d5      	adds	r5, r2, r3
 8006758:	42ac      	cmp	r4, r5
 800675a:	d101      	bne.n	8006760 <__sfputs_r+0x12>
 800675c:	2000      	movs	r0, #0
 800675e:	e007      	b.n	8006770 <__sfputs_r+0x22>
 8006760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006764:	463a      	mov	r2, r7
 8006766:	4630      	mov	r0, r6
 8006768:	f7ff ffda 	bl	8006720 <__sfputc_r>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d1f3      	bne.n	8006758 <__sfputs_r+0xa>
 8006770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006774 <_vfiprintf_r>:
 8006774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006778:	460d      	mov	r5, r1
 800677a:	b09d      	sub	sp, #116	; 0x74
 800677c:	4614      	mov	r4, r2
 800677e:	4698      	mov	r8, r3
 8006780:	4606      	mov	r6, r0
 8006782:	b118      	cbz	r0, 800678c <_vfiprintf_r+0x18>
 8006784:	6a03      	ldr	r3, [r0, #32]
 8006786:	b90b      	cbnz	r3, 800678c <_vfiprintf_r+0x18>
 8006788:	f7ff fd9a 	bl	80062c0 <__sinit>
 800678c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800678e:	07d9      	lsls	r1, r3, #31
 8006790:	d405      	bmi.n	800679e <_vfiprintf_r+0x2a>
 8006792:	89ab      	ldrh	r3, [r5, #12]
 8006794:	059a      	lsls	r2, r3, #22
 8006796:	d402      	bmi.n	800679e <_vfiprintf_r+0x2a>
 8006798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679a:	f7ff feb8 	bl	800650e <__retarget_lock_acquire_recursive>
 800679e:	89ab      	ldrh	r3, [r5, #12]
 80067a0:	071b      	lsls	r3, r3, #28
 80067a2:	d501      	bpl.n	80067a8 <_vfiprintf_r+0x34>
 80067a4:	692b      	ldr	r3, [r5, #16]
 80067a6:	b99b      	cbnz	r3, 80067d0 <_vfiprintf_r+0x5c>
 80067a8:	4629      	mov	r1, r5
 80067aa:	4630      	mov	r0, r6
 80067ac:	f000 fbac 	bl	8006f08 <__swsetup_r>
 80067b0:	b170      	cbz	r0, 80067d0 <_vfiprintf_r+0x5c>
 80067b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b4:	07dc      	lsls	r4, r3, #31
 80067b6:	d504      	bpl.n	80067c2 <_vfiprintf_r+0x4e>
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	b01d      	add	sp, #116	; 0x74
 80067be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	0598      	lsls	r0, r3, #22
 80067c6:	d4f7      	bmi.n	80067b8 <_vfiprintf_r+0x44>
 80067c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ca:	f7ff fea1 	bl	8006510 <__retarget_lock_release_recursive>
 80067ce:	e7f3      	b.n	80067b8 <_vfiprintf_r+0x44>
 80067d0:	2300      	movs	r3, #0
 80067d2:	9309      	str	r3, [sp, #36]	; 0x24
 80067d4:	2320      	movs	r3, #32
 80067d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067da:	f8cd 800c 	str.w	r8, [sp, #12]
 80067de:	2330      	movs	r3, #48	; 0x30
 80067e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006994 <_vfiprintf_r+0x220>
 80067e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067e8:	f04f 0901 	mov.w	r9, #1
 80067ec:	4623      	mov	r3, r4
 80067ee:	469a      	mov	sl, r3
 80067f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f4:	b10a      	cbz	r2, 80067fa <_vfiprintf_r+0x86>
 80067f6:	2a25      	cmp	r2, #37	; 0x25
 80067f8:	d1f9      	bne.n	80067ee <_vfiprintf_r+0x7a>
 80067fa:	ebba 0b04 	subs.w	fp, sl, r4
 80067fe:	d00b      	beq.n	8006818 <_vfiprintf_r+0xa4>
 8006800:	465b      	mov	r3, fp
 8006802:	4622      	mov	r2, r4
 8006804:	4629      	mov	r1, r5
 8006806:	4630      	mov	r0, r6
 8006808:	f7ff ffa1 	bl	800674e <__sfputs_r>
 800680c:	3001      	adds	r0, #1
 800680e:	f000 80a9 	beq.w	8006964 <_vfiprintf_r+0x1f0>
 8006812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006814:	445a      	add	r2, fp
 8006816:	9209      	str	r2, [sp, #36]	; 0x24
 8006818:	f89a 3000 	ldrb.w	r3, [sl]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80a1 	beq.w	8006964 <_vfiprintf_r+0x1f0>
 8006822:	2300      	movs	r3, #0
 8006824:	f04f 32ff 	mov.w	r2, #4294967295
 8006828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800682c:	f10a 0a01 	add.w	sl, sl, #1
 8006830:	9304      	str	r3, [sp, #16]
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006838:	931a      	str	r3, [sp, #104]	; 0x68
 800683a:	4654      	mov	r4, sl
 800683c:	2205      	movs	r2, #5
 800683e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006842:	4854      	ldr	r0, [pc, #336]	; (8006994 <_vfiprintf_r+0x220>)
 8006844:	f7f9 fcc4 	bl	80001d0 <memchr>
 8006848:	9a04      	ldr	r2, [sp, #16]
 800684a:	b9d8      	cbnz	r0, 8006884 <_vfiprintf_r+0x110>
 800684c:	06d1      	lsls	r1, r2, #27
 800684e:	bf44      	itt	mi
 8006850:	2320      	movmi	r3, #32
 8006852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006856:	0713      	lsls	r3, r2, #28
 8006858:	bf44      	itt	mi
 800685a:	232b      	movmi	r3, #43	; 0x2b
 800685c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006860:	f89a 3000 	ldrb.w	r3, [sl]
 8006864:	2b2a      	cmp	r3, #42	; 0x2a
 8006866:	d015      	beq.n	8006894 <_vfiprintf_r+0x120>
 8006868:	9a07      	ldr	r2, [sp, #28]
 800686a:	4654      	mov	r4, sl
 800686c:	2000      	movs	r0, #0
 800686e:	f04f 0c0a 	mov.w	ip, #10
 8006872:	4621      	mov	r1, r4
 8006874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006878:	3b30      	subs	r3, #48	; 0x30
 800687a:	2b09      	cmp	r3, #9
 800687c:	d94d      	bls.n	800691a <_vfiprintf_r+0x1a6>
 800687e:	b1b0      	cbz	r0, 80068ae <_vfiprintf_r+0x13a>
 8006880:	9207      	str	r2, [sp, #28]
 8006882:	e014      	b.n	80068ae <_vfiprintf_r+0x13a>
 8006884:	eba0 0308 	sub.w	r3, r0, r8
 8006888:	fa09 f303 	lsl.w	r3, r9, r3
 800688c:	4313      	orrs	r3, r2
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	46a2      	mov	sl, r4
 8006892:	e7d2      	b.n	800683a <_vfiprintf_r+0xc6>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	1d19      	adds	r1, r3, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	9103      	str	r1, [sp, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	bfbb      	ittet	lt
 80068a0:	425b      	neglt	r3, r3
 80068a2:	f042 0202 	orrlt.w	r2, r2, #2
 80068a6:	9307      	strge	r3, [sp, #28]
 80068a8:	9307      	strlt	r3, [sp, #28]
 80068aa:	bfb8      	it	lt
 80068ac:	9204      	strlt	r2, [sp, #16]
 80068ae:	7823      	ldrb	r3, [r4, #0]
 80068b0:	2b2e      	cmp	r3, #46	; 0x2e
 80068b2:	d10c      	bne.n	80068ce <_vfiprintf_r+0x15a>
 80068b4:	7863      	ldrb	r3, [r4, #1]
 80068b6:	2b2a      	cmp	r3, #42	; 0x2a
 80068b8:	d134      	bne.n	8006924 <_vfiprintf_r+0x1b0>
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	9203      	str	r2, [sp, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfb8      	it	lt
 80068c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80068ca:	3402      	adds	r4, #2
 80068cc:	9305      	str	r3, [sp, #20]
 80068ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80069a4 <_vfiprintf_r+0x230>
 80068d2:	7821      	ldrb	r1, [r4, #0]
 80068d4:	2203      	movs	r2, #3
 80068d6:	4650      	mov	r0, sl
 80068d8:	f7f9 fc7a 	bl	80001d0 <memchr>
 80068dc:	b138      	cbz	r0, 80068ee <_vfiprintf_r+0x17a>
 80068de:	9b04      	ldr	r3, [sp, #16]
 80068e0:	eba0 000a 	sub.w	r0, r0, sl
 80068e4:	2240      	movs	r2, #64	; 0x40
 80068e6:	4082      	lsls	r2, r0
 80068e8:	4313      	orrs	r3, r2
 80068ea:	3401      	adds	r4, #1
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f2:	4829      	ldr	r0, [pc, #164]	; (8006998 <_vfiprintf_r+0x224>)
 80068f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068f8:	2206      	movs	r2, #6
 80068fa:	f7f9 fc69 	bl	80001d0 <memchr>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d03f      	beq.n	8006982 <_vfiprintf_r+0x20e>
 8006902:	4b26      	ldr	r3, [pc, #152]	; (800699c <_vfiprintf_r+0x228>)
 8006904:	bb1b      	cbnz	r3, 800694e <_vfiprintf_r+0x1da>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	3307      	adds	r3, #7
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	3308      	adds	r3, #8
 8006910:	9303      	str	r3, [sp, #12]
 8006912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006914:	443b      	add	r3, r7
 8006916:	9309      	str	r3, [sp, #36]	; 0x24
 8006918:	e768      	b.n	80067ec <_vfiprintf_r+0x78>
 800691a:	fb0c 3202 	mla	r2, ip, r2, r3
 800691e:	460c      	mov	r4, r1
 8006920:	2001      	movs	r0, #1
 8006922:	e7a6      	b.n	8006872 <_vfiprintf_r+0xfe>
 8006924:	2300      	movs	r3, #0
 8006926:	3401      	adds	r4, #1
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	4619      	mov	r1, r3
 800692c:	f04f 0c0a 	mov.w	ip, #10
 8006930:	4620      	mov	r0, r4
 8006932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006936:	3a30      	subs	r2, #48	; 0x30
 8006938:	2a09      	cmp	r2, #9
 800693a:	d903      	bls.n	8006944 <_vfiprintf_r+0x1d0>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0c6      	beq.n	80068ce <_vfiprintf_r+0x15a>
 8006940:	9105      	str	r1, [sp, #20]
 8006942:	e7c4      	b.n	80068ce <_vfiprintf_r+0x15a>
 8006944:	fb0c 2101 	mla	r1, ip, r1, r2
 8006948:	4604      	mov	r4, r0
 800694a:	2301      	movs	r3, #1
 800694c:	e7f0      	b.n	8006930 <_vfiprintf_r+0x1bc>
 800694e:	ab03      	add	r3, sp, #12
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	462a      	mov	r2, r5
 8006954:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <_vfiprintf_r+0x22c>)
 8006956:	a904      	add	r1, sp, #16
 8006958:	4630      	mov	r0, r6
 800695a:	f3af 8000 	nop.w
 800695e:	4607      	mov	r7, r0
 8006960:	1c78      	adds	r0, r7, #1
 8006962:	d1d6      	bne.n	8006912 <_vfiprintf_r+0x19e>
 8006964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006966:	07d9      	lsls	r1, r3, #31
 8006968:	d405      	bmi.n	8006976 <_vfiprintf_r+0x202>
 800696a:	89ab      	ldrh	r3, [r5, #12]
 800696c:	059a      	lsls	r2, r3, #22
 800696e:	d402      	bmi.n	8006976 <_vfiprintf_r+0x202>
 8006970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006972:	f7ff fdcd 	bl	8006510 <__retarget_lock_release_recursive>
 8006976:	89ab      	ldrh	r3, [r5, #12]
 8006978:	065b      	lsls	r3, r3, #25
 800697a:	f53f af1d 	bmi.w	80067b8 <_vfiprintf_r+0x44>
 800697e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006980:	e71c      	b.n	80067bc <_vfiprintf_r+0x48>
 8006982:	ab03      	add	r3, sp, #12
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	462a      	mov	r2, r5
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <_vfiprintf_r+0x22c>)
 800698a:	a904      	add	r1, sp, #16
 800698c:	4630      	mov	r0, r6
 800698e:	f000 f879 	bl	8006a84 <_printf_i>
 8006992:	e7e4      	b.n	800695e <_vfiprintf_r+0x1ea>
 8006994:	08007735 	.word	0x08007735
 8006998:	0800773f 	.word	0x0800773f
 800699c:	00000000 	.word	0x00000000
 80069a0:	0800674f 	.word	0x0800674f
 80069a4:	0800773b 	.word	0x0800773b

080069a8 <_printf_common>:
 80069a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	4616      	mov	r6, r2
 80069ae:	4699      	mov	r9, r3
 80069b0:	688a      	ldr	r2, [r1, #8]
 80069b2:	690b      	ldr	r3, [r1, #16]
 80069b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069b8:	4293      	cmp	r3, r2
 80069ba:	bfb8      	it	lt
 80069bc:	4613      	movlt	r3, r2
 80069be:	6033      	str	r3, [r6, #0]
 80069c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069c4:	4607      	mov	r7, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	b10a      	cbz	r2, 80069ce <_printf_common+0x26>
 80069ca:	3301      	adds	r3, #1
 80069cc:	6033      	str	r3, [r6, #0]
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	0699      	lsls	r1, r3, #26
 80069d2:	bf42      	ittt	mi
 80069d4:	6833      	ldrmi	r3, [r6, #0]
 80069d6:	3302      	addmi	r3, #2
 80069d8:	6033      	strmi	r3, [r6, #0]
 80069da:	6825      	ldr	r5, [r4, #0]
 80069dc:	f015 0506 	ands.w	r5, r5, #6
 80069e0:	d106      	bne.n	80069f0 <_printf_common+0x48>
 80069e2:	f104 0a19 	add.w	sl, r4, #25
 80069e6:	68e3      	ldr	r3, [r4, #12]
 80069e8:	6832      	ldr	r2, [r6, #0]
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	dc26      	bgt.n	8006a3e <_printf_common+0x96>
 80069f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069f4:	1e13      	subs	r3, r2, #0
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	bf18      	it	ne
 80069fa:	2301      	movne	r3, #1
 80069fc:	0692      	lsls	r2, r2, #26
 80069fe:	d42b      	bmi.n	8006a58 <_printf_common+0xb0>
 8006a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a04:	4649      	mov	r1, r9
 8006a06:	4638      	mov	r0, r7
 8006a08:	47c0      	blx	r8
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d01e      	beq.n	8006a4c <_printf_common+0xa4>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	6922      	ldr	r2, [r4, #16]
 8006a12:	f003 0306 	and.w	r3, r3, #6
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	bf02      	ittt	eq
 8006a1a:	68e5      	ldreq	r5, [r4, #12]
 8006a1c:	6833      	ldreq	r3, [r6, #0]
 8006a1e:	1aed      	subeq	r5, r5, r3
 8006a20:	68a3      	ldr	r3, [r4, #8]
 8006a22:	bf0c      	ite	eq
 8006a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a28:	2500      	movne	r5, #0
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	bfc4      	itt	gt
 8006a2e:	1a9b      	subgt	r3, r3, r2
 8006a30:	18ed      	addgt	r5, r5, r3
 8006a32:	2600      	movs	r6, #0
 8006a34:	341a      	adds	r4, #26
 8006a36:	42b5      	cmp	r5, r6
 8006a38:	d11a      	bne.n	8006a70 <_printf_common+0xc8>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	e008      	b.n	8006a50 <_printf_common+0xa8>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4652      	mov	r2, sl
 8006a42:	4649      	mov	r1, r9
 8006a44:	4638      	mov	r0, r7
 8006a46:	47c0      	blx	r8
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d103      	bne.n	8006a54 <_printf_common+0xac>
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a54:	3501      	adds	r5, #1
 8006a56:	e7c6      	b.n	80069e6 <_printf_common+0x3e>
 8006a58:	18e1      	adds	r1, r4, r3
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	2030      	movs	r0, #48	; 0x30
 8006a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a62:	4422      	add	r2, r4
 8006a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	e7c7      	b.n	8006a00 <_printf_common+0x58>
 8006a70:	2301      	movs	r3, #1
 8006a72:	4622      	mov	r2, r4
 8006a74:	4649      	mov	r1, r9
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c0      	blx	r8
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d0e6      	beq.n	8006a4c <_printf_common+0xa4>
 8006a7e:	3601      	adds	r6, #1
 8006a80:	e7d9      	b.n	8006a36 <_printf_common+0x8e>
	...

08006a84 <_printf_i>:
 8006a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	7e0f      	ldrb	r7, [r1, #24]
 8006a8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a8c:	2f78      	cmp	r7, #120	; 0x78
 8006a8e:	4691      	mov	r9, r2
 8006a90:	4680      	mov	r8, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	469a      	mov	sl, r3
 8006a96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a9a:	d807      	bhi.n	8006aac <_printf_i+0x28>
 8006a9c:	2f62      	cmp	r7, #98	; 0x62
 8006a9e:	d80a      	bhi.n	8006ab6 <_printf_i+0x32>
 8006aa0:	2f00      	cmp	r7, #0
 8006aa2:	f000 80d4 	beq.w	8006c4e <_printf_i+0x1ca>
 8006aa6:	2f58      	cmp	r7, #88	; 0x58
 8006aa8:	f000 80c0 	beq.w	8006c2c <_printf_i+0x1a8>
 8006aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ab4:	e03a      	b.n	8006b2c <_printf_i+0xa8>
 8006ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aba:	2b15      	cmp	r3, #21
 8006abc:	d8f6      	bhi.n	8006aac <_printf_i+0x28>
 8006abe:	a101      	add	r1, pc, #4	; (adr r1, 8006ac4 <_printf_i+0x40>)
 8006ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ac4:	08006b1d 	.word	0x08006b1d
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006aad 	.word	0x08006aad
 8006ad0:	08006aad 	.word	0x08006aad
 8006ad4:	08006aad 	.word	0x08006aad
 8006ad8:	08006aad 	.word	0x08006aad
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006aad 	.word	0x08006aad
 8006ae4:	08006aad 	.word	0x08006aad
 8006ae8:	08006aad 	.word	0x08006aad
 8006aec:	08006aad 	.word	0x08006aad
 8006af0:	08006c35 	.word	0x08006c35
 8006af4:	08006b5d 	.word	0x08006b5d
 8006af8:	08006bef 	.word	0x08006bef
 8006afc:	08006aad 	.word	0x08006aad
 8006b00:	08006aad 	.word	0x08006aad
 8006b04:	08006c57 	.word	0x08006c57
 8006b08:	08006aad 	.word	0x08006aad
 8006b0c:	08006b5d 	.word	0x08006b5d
 8006b10:	08006aad 	.word	0x08006aad
 8006b14:	08006aad 	.word	0x08006aad
 8006b18:	08006bf7 	.word	0x08006bf7
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	1d1a      	adds	r2, r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	602a      	str	r2, [r5, #0]
 8006b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e09f      	b.n	8006c70 <_printf_i+0x1ec>
 8006b30:	6820      	ldr	r0, [r4, #0]
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	0607      	lsls	r7, r0, #24
 8006b36:	f103 0104 	add.w	r1, r3, #4
 8006b3a:	6029      	str	r1, [r5, #0]
 8006b3c:	d501      	bpl.n	8006b42 <_printf_i+0xbe>
 8006b3e:	681e      	ldr	r6, [r3, #0]
 8006b40:	e003      	b.n	8006b4a <_printf_i+0xc6>
 8006b42:	0646      	lsls	r6, r0, #25
 8006b44:	d5fb      	bpl.n	8006b3e <_printf_i+0xba>
 8006b46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	da03      	bge.n	8006b56 <_printf_i+0xd2>
 8006b4e:	232d      	movs	r3, #45	; 0x2d
 8006b50:	4276      	negs	r6, r6
 8006b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b56:	485a      	ldr	r0, [pc, #360]	; (8006cc0 <_printf_i+0x23c>)
 8006b58:	230a      	movs	r3, #10
 8006b5a:	e012      	b.n	8006b82 <_printf_i+0xfe>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	6820      	ldr	r0, [r4, #0]
 8006b60:	1d19      	adds	r1, r3, #4
 8006b62:	6029      	str	r1, [r5, #0]
 8006b64:	0605      	lsls	r5, r0, #24
 8006b66:	d501      	bpl.n	8006b6c <_printf_i+0xe8>
 8006b68:	681e      	ldr	r6, [r3, #0]
 8006b6a:	e002      	b.n	8006b72 <_printf_i+0xee>
 8006b6c:	0641      	lsls	r1, r0, #25
 8006b6e:	d5fb      	bpl.n	8006b68 <_printf_i+0xe4>
 8006b70:	881e      	ldrh	r6, [r3, #0]
 8006b72:	4853      	ldr	r0, [pc, #332]	; (8006cc0 <_printf_i+0x23c>)
 8006b74:	2f6f      	cmp	r7, #111	; 0x6f
 8006b76:	bf0c      	ite	eq
 8006b78:	2308      	moveq	r3, #8
 8006b7a:	230a      	movne	r3, #10
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b82:	6865      	ldr	r5, [r4, #4]
 8006b84:	60a5      	str	r5, [r4, #8]
 8006b86:	2d00      	cmp	r5, #0
 8006b88:	bfa2      	ittt	ge
 8006b8a:	6821      	ldrge	r1, [r4, #0]
 8006b8c:	f021 0104 	bicge.w	r1, r1, #4
 8006b90:	6021      	strge	r1, [r4, #0]
 8006b92:	b90e      	cbnz	r6, 8006b98 <_printf_i+0x114>
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	d04b      	beq.n	8006c30 <_printf_i+0x1ac>
 8006b98:	4615      	mov	r5, r2
 8006b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006ba2:	5dc7      	ldrb	r7, [r0, r7]
 8006ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ba8:	4637      	mov	r7, r6
 8006baa:	42bb      	cmp	r3, r7
 8006bac:	460e      	mov	r6, r1
 8006bae:	d9f4      	bls.n	8006b9a <_printf_i+0x116>
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d10b      	bne.n	8006bcc <_printf_i+0x148>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	07de      	lsls	r6, r3, #31
 8006bb8:	d508      	bpl.n	8006bcc <_printf_i+0x148>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	6861      	ldr	r1, [r4, #4]
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	bfde      	ittt	le
 8006bc2:	2330      	movle	r3, #48	; 0x30
 8006bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bcc:	1b52      	subs	r2, r2, r5
 8006bce:	6122      	str	r2, [r4, #16]
 8006bd0:	f8cd a000 	str.w	sl, [sp]
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	aa03      	add	r2, sp, #12
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4640      	mov	r0, r8
 8006bdc:	f7ff fee4 	bl	80069a8 <_printf_common>
 8006be0:	3001      	adds	r0, #1
 8006be2:	d14a      	bne.n	8006c7a <_printf_i+0x1f6>
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	b004      	add	sp, #16
 8006bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	f043 0320 	orr.w	r3, r3, #32
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	4833      	ldr	r0, [pc, #204]	; (8006cc4 <_printf_i+0x240>)
 8006bf8:	2778      	movs	r7, #120	; 0x78
 8006bfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	6829      	ldr	r1, [r5, #0]
 8006c02:	061f      	lsls	r7, r3, #24
 8006c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c08:	d402      	bmi.n	8006c10 <_printf_i+0x18c>
 8006c0a:	065f      	lsls	r7, r3, #25
 8006c0c:	bf48      	it	mi
 8006c0e:	b2b6      	uxthmi	r6, r6
 8006c10:	07df      	lsls	r7, r3, #31
 8006c12:	bf48      	it	mi
 8006c14:	f043 0320 	orrmi.w	r3, r3, #32
 8006c18:	6029      	str	r1, [r5, #0]
 8006c1a:	bf48      	it	mi
 8006c1c:	6023      	strmi	r3, [r4, #0]
 8006c1e:	b91e      	cbnz	r6, 8006c28 <_printf_i+0x1a4>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	f023 0320 	bic.w	r3, r3, #32
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	2310      	movs	r3, #16
 8006c2a:	e7a7      	b.n	8006b7c <_printf_i+0xf8>
 8006c2c:	4824      	ldr	r0, [pc, #144]	; (8006cc0 <_printf_i+0x23c>)
 8006c2e:	e7e4      	b.n	8006bfa <_printf_i+0x176>
 8006c30:	4615      	mov	r5, r2
 8006c32:	e7bd      	b.n	8006bb0 <_printf_i+0x12c>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	6826      	ldr	r6, [r4, #0]
 8006c38:	6961      	ldr	r1, [r4, #20]
 8006c3a:	1d18      	adds	r0, r3, #4
 8006c3c:	6028      	str	r0, [r5, #0]
 8006c3e:	0635      	lsls	r5, r6, #24
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	d501      	bpl.n	8006c48 <_printf_i+0x1c4>
 8006c44:	6019      	str	r1, [r3, #0]
 8006c46:	e002      	b.n	8006c4e <_printf_i+0x1ca>
 8006c48:	0670      	lsls	r0, r6, #25
 8006c4a:	d5fb      	bpl.n	8006c44 <_printf_i+0x1c0>
 8006c4c:	8019      	strh	r1, [r3, #0]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	4615      	mov	r5, r2
 8006c54:	e7bc      	b.n	8006bd0 <_printf_i+0x14c>
 8006c56:	682b      	ldr	r3, [r5, #0]
 8006c58:	1d1a      	adds	r2, r3, #4
 8006c5a:	602a      	str	r2, [r5, #0]
 8006c5c:	681d      	ldr	r5, [r3, #0]
 8006c5e:	6862      	ldr	r2, [r4, #4]
 8006c60:	2100      	movs	r1, #0
 8006c62:	4628      	mov	r0, r5
 8006c64:	f7f9 fab4 	bl	80001d0 <memchr>
 8006c68:	b108      	cbz	r0, 8006c6e <_printf_i+0x1ea>
 8006c6a:	1b40      	subs	r0, r0, r5
 8006c6c:	6060      	str	r0, [r4, #4]
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	6123      	str	r3, [r4, #16]
 8006c72:	2300      	movs	r3, #0
 8006c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c78:	e7aa      	b.n	8006bd0 <_printf_i+0x14c>
 8006c7a:	6923      	ldr	r3, [r4, #16]
 8006c7c:	462a      	mov	r2, r5
 8006c7e:	4649      	mov	r1, r9
 8006c80:	4640      	mov	r0, r8
 8006c82:	47d0      	blx	sl
 8006c84:	3001      	adds	r0, #1
 8006c86:	d0ad      	beq.n	8006be4 <_printf_i+0x160>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	079b      	lsls	r3, r3, #30
 8006c8c:	d413      	bmi.n	8006cb6 <_printf_i+0x232>
 8006c8e:	68e0      	ldr	r0, [r4, #12]
 8006c90:	9b03      	ldr	r3, [sp, #12]
 8006c92:	4298      	cmp	r0, r3
 8006c94:	bfb8      	it	lt
 8006c96:	4618      	movlt	r0, r3
 8006c98:	e7a6      	b.n	8006be8 <_printf_i+0x164>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	47d0      	blx	sl
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d09d      	beq.n	8006be4 <_printf_i+0x160>
 8006ca8:	3501      	adds	r5, #1
 8006caa:	68e3      	ldr	r3, [r4, #12]
 8006cac:	9903      	ldr	r1, [sp, #12]
 8006cae:	1a5b      	subs	r3, r3, r1
 8006cb0:	42ab      	cmp	r3, r5
 8006cb2:	dcf2      	bgt.n	8006c9a <_printf_i+0x216>
 8006cb4:	e7eb      	b.n	8006c8e <_printf_i+0x20a>
 8006cb6:	2500      	movs	r5, #0
 8006cb8:	f104 0619 	add.w	r6, r4, #25
 8006cbc:	e7f5      	b.n	8006caa <_printf_i+0x226>
 8006cbe:	bf00      	nop
 8006cc0:	08007746 	.word	0x08007746
 8006cc4:	08007757 	.word	0x08007757

08006cc8 <__sflush_r>:
 8006cc8:	898a      	ldrh	r2, [r1, #12]
 8006cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cce:	4605      	mov	r5, r0
 8006cd0:	0710      	lsls	r0, r2, #28
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	d458      	bmi.n	8006d88 <__sflush_r+0xc0>
 8006cd6:	684b      	ldr	r3, [r1, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dc05      	bgt.n	8006ce8 <__sflush_r+0x20>
 8006cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dc02      	bgt.n	8006ce8 <__sflush_r+0x20>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	d0f9      	beq.n	8006ce2 <__sflush_r+0x1a>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cf4:	682f      	ldr	r7, [r5, #0]
 8006cf6:	6a21      	ldr	r1, [r4, #32]
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	d032      	beq.n	8006d62 <__sflush_r+0x9a>
 8006cfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	075a      	lsls	r2, r3, #29
 8006d02:	d505      	bpl.n	8006d10 <__sflush_r+0x48>
 8006d04:	6863      	ldr	r3, [r4, #4]
 8006d06:	1ac0      	subs	r0, r0, r3
 8006d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d0a:	b10b      	cbz	r3, 8006d10 <__sflush_r+0x48>
 8006d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d0e:	1ac0      	subs	r0, r0, r3
 8006d10:	2300      	movs	r3, #0
 8006d12:	4602      	mov	r2, r0
 8006d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d16:	6a21      	ldr	r1, [r4, #32]
 8006d18:	4628      	mov	r0, r5
 8006d1a:	47b0      	blx	r6
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	d106      	bne.n	8006d30 <__sflush_r+0x68>
 8006d22:	6829      	ldr	r1, [r5, #0]
 8006d24:	291d      	cmp	r1, #29
 8006d26:	d82b      	bhi.n	8006d80 <__sflush_r+0xb8>
 8006d28:	4a29      	ldr	r2, [pc, #164]	; (8006dd0 <__sflush_r+0x108>)
 8006d2a:	410a      	asrs	r2, r1
 8006d2c:	07d6      	lsls	r6, r2, #31
 8006d2e:	d427      	bmi.n	8006d80 <__sflush_r+0xb8>
 8006d30:	2200      	movs	r2, #0
 8006d32:	6062      	str	r2, [r4, #4]
 8006d34:	04d9      	lsls	r1, r3, #19
 8006d36:	6922      	ldr	r2, [r4, #16]
 8006d38:	6022      	str	r2, [r4, #0]
 8006d3a:	d504      	bpl.n	8006d46 <__sflush_r+0x7e>
 8006d3c:	1c42      	adds	r2, r0, #1
 8006d3e:	d101      	bne.n	8006d44 <__sflush_r+0x7c>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	b903      	cbnz	r3, 8006d46 <__sflush_r+0x7e>
 8006d44:	6560      	str	r0, [r4, #84]	; 0x54
 8006d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d48:	602f      	str	r7, [r5, #0]
 8006d4a:	2900      	cmp	r1, #0
 8006d4c:	d0c9      	beq.n	8006ce2 <__sflush_r+0x1a>
 8006d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d52:	4299      	cmp	r1, r3
 8006d54:	d002      	beq.n	8006d5c <__sflush_r+0x94>
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7ff fbea 	bl	8006530 <_free_r>
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	6360      	str	r0, [r4, #52]	; 0x34
 8006d60:	e7c0      	b.n	8006ce4 <__sflush_r+0x1c>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b0      	blx	r6
 8006d68:	1c41      	adds	r1, r0, #1
 8006d6a:	d1c8      	bne.n	8006cfe <__sflush_r+0x36>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0c5      	beq.n	8006cfe <__sflush_r+0x36>
 8006d72:	2b1d      	cmp	r3, #29
 8006d74:	d001      	beq.n	8006d7a <__sflush_r+0xb2>
 8006d76:	2b16      	cmp	r3, #22
 8006d78:	d101      	bne.n	8006d7e <__sflush_r+0xb6>
 8006d7a:	602f      	str	r7, [r5, #0]
 8006d7c:	e7b1      	b.n	8006ce2 <__sflush_r+0x1a>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	e7ad      	b.n	8006ce4 <__sflush_r+0x1c>
 8006d88:	690f      	ldr	r7, [r1, #16]
 8006d8a:	2f00      	cmp	r7, #0
 8006d8c:	d0a9      	beq.n	8006ce2 <__sflush_r+0x1a>
 8006d8e:	0793      	lsls	r3, r2, #30
 8006d90:	680e      	ldr	r6, [r1, #0]
 8006d92:	bf08      	it	eq
 8006d94:	694b      	ldreq	r3, [r1, #20]
 8006d96:	600f      	str	r7, [r1, #0]
 8006d98:	bf18      	it	ne
 8006d9a:	2300      	movne	r3, #0
 8006d9c:	eba6 0807 	sub.w	r8, r6, r7
 8006da0:	608b      	str	r3, [r1, #8]
 8006da2:	f1b8 0f00 	cmp.w	r8, #0
 8006da6:	dd9c      	ble.n	8006ce2 <__sflush_r+0x1a>
 8006da8:	6a21      	ldr	r1, [r4, #32]
 8006daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dac:	4643      	mov	r3, r8
 8006dae:	463a      	mov	r2, r7
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b0      	blx	r6
 8006db4:	2800      	cmp	r0, #0
 8006db6:	dc06      	bgt.n	8006dc6 <__sflush_r+0xfe>
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e78e      	b.n	8006ce4 <__sflush_r+0x1c>
 8006dc6:	4407      	add	r7, r0
 8006dc8:	eba8 0800 	sub.w	r8, r8, r0
 8006dcc:	e7e9      	b.n	8006da2 <__sflush_r+0xda>
 8006dce:	bf00      	nop
 8006dd0:	dfbffffe 	.word	0xdfbffffe

08006dd4 <_fflush_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	690b      	ldr	r3, [r1, #16]
 8006dd8:	4605      	mov	r5, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	b913      	cbnz	r3, 8006de4 <_fflush_r+0x10>
 8006dde:	2500      	movs	r5, #0
 8006de0:	4628      	mov	r0, r5
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	b118      	cbz	r0, 8006dee <_fflush_r+0x1a>
 8006de6:	6a03      	ldr	r3, [r0, #32]
 8006de8:	b90b      	cbnz	r3, 8006dee <_fflush_r+0x1a>
 8006dea:	f7ff fa69 	bl	80062c0 <__sinit>
 8006dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f3      	beq.n	8006dde <_fflush_r+0xa>
 8006df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006df8:	07d0      	lsls	r0, r2, #31
 8006dfa:	d404      	bmi.n	8006e06 <_fflush_r+0x32>
 8006dfc:	0599      	lsls	r1, r3, #22
 8006dfe:	d402      	bmi.n	8006e06 <_fflush_r+0x32>
 8006e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e02:	f7ff fb84 	bl	800650e <__retarget_lock_acquire_recursive>
 8006e06:	4628      	mov	r0, r5
 8006e08:	4621      	mov	r1, r4
 8006e0a:	f7ff ff5d 	bl	8006cc8 <__sflush_r>
 8006e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e10:	07da      	lsls	r2, r3, #31
 8006e12:	4605      	mov	r5, r0
 8006e14:	d4e4      	bmi.n	8006de0 <_fflush_r+0xc>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	059b      	lsls	r3, r3, #22
 8006e1a:	d4e1      	bmi.n	8006de0 <_fflush_r+0xc>
 8006e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e1e:	f7ff fb77 	bl	8006510 <__retarget_lock_release_recursive>
 8006e22:	e7dd      	b.n	8006de0 <_fflush_r+0xc>

08006e24 <_putc_r>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	460d      	mov	r5, r1
 8006e28:	4614      	mov	r4, r2
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	b118      	cbz	r0, 8006e36 <_putc_r+0x12>
 8006e2e:	6a03      	ldr	r3, [r0, #32]
 8006e30:	b90b      	cbnz	r3, 8006e36 <_putc_r+0x12>
 8006e32:	f7ff fa45 	bl	80062c0 <__sinit>
 8006e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e38:	07d8      	lsls	r0, r3, #31
 8006e3a:	d405      	bmi.n	8006e48 <_putc_r+0x24>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	0599      	lsls	r1, r3, #22
 8006e40:	d402      	bmi.n	8006e48 <_putc_r+0x24>
 8006e42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e44:	f7ff fb63 	bl	800650e <__retarget_lock_acquire_recursive>
 8006e48:	68a3      	ldr	r3, [r4, #8]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	60a3      	str	r3, [r4, #8]
 8006e50:	da05      	bge.n	8006e5e <_putc_r+0x3a>
 8006e52:	69a2      	ldr	r2, [r4, #24]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	db12      	blt.n	8006e7e <_putc_r+0x5a>
 8006e58:	b2eb      	uxtb	r3, r5
 8006e5a:	2b0a      	cmp	r3, #10
 8006e5c:	d00f      	beq.n	8006e7e <_putc_r+0x5a>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	6022      	str	r2, [r4, #0]
 8006e64:	701d      	strb	r5, [r3, #0]
 8006e66:	b2ed      	uxtb	r5, r5
 8006e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e6a:	07da      	lsls	r2, r3, #31
 8006e6c:	d405      	bmi.n	8006e7a <_putc_r+0x56>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	059b      	lsls	r3, r3, #22
 8006e72:	d402      	bmi.n	8006e7a <_putc_r+0x56>
 8006e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e76:	f7ff fb4b 	bl	8006510 <__retarget_lock_release_recursive>
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4622      	mov	r2, r4
 8006e82:	4630      	mov	r0, r6
 8006e84:	f000 f802 	bl	8006e8c <__swbuf_r>
 8006e88:	4605      	mov	r5, r0
 8006e8a:	e7ed      	b.n	8006e68 <_putc_r+0x44>

08006e8c <__swbuf_r>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	460e      	mov	r6, r1
 8006e90:	4614      	mov	r4, r2
 8006e92:	4605      	mov	r5, r0
 8006e94:	b118      	cbz	r0, 8006e9e <__swbuf_r+0x12>
 8006e96:	6a03      	ldr	r3, [r0, #32]
 8006e98:	b90b      	cbnz	r3, 8006e9e <__swbuf_r+0x12>
 8006e9a:	f7ff fa11 	bl	80062c0 <__sinit>
 8006e9e:	69a3      	ldr	r3, [r4, #24]
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	071a      	lsls	r2, r3, #28
 8006ea6:	d525      	bpl.n	8006ef4 <__swbuf_r+0x68>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	b31b      	cbz	r3, 8006ef4 <__swbuf_r+0x68>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	6922      	ldr	r2, [r4, #16]
 8006eb0:	1a98      	subs	r0, r3, r2
 8006eb2:	6963      	ldr	r3, [r4, #20]
 8006eb4:	b2f6      	uxtb	r6, r6
 8006eb6:	4283      	cmp	r3, r0
 8006eb8:	4637      	mov	r7, r6
 8006eba:	dc04      	bgt.n	8006ec6 <__swbuf_r+0x3a>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f7ff ff88 	bl	8006dd4 <_fflush_r>
 8006ec4:	b9e0      	cbnz	r0, 8006f00 <__swbuf_r+0x74>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	60a3      	str	r3, [r4, #8]
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	701e      	strb	r6, [r3, #0]
 8006ed4:	6962      	ldr	r2, [r4, #20]
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d004      	beq.n	8006ee6 <__swbuf_r+0x5a>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	07db      	lsls	r3, r3, #31
 8006ee0:	d506      	bpl.n	8006ef0 <__swbuf_r+0x64>
 8006ee2:	2e0a      	cmp	r6, #10
 8006ee4:	d104      	bne.n	8006ef0 <__swbuf_r+0x64>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7ff ff73 	bl	8006dd4 <_fflush_r>
 8006eee:	b938      	cbnz	r0, 8006f00 <__swbuf_r+0x74>
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 f806 	bl	8006f08 <__swsetup_r>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d0d5      	beq.n	8006eac <__swbuf_r+0x20>
 8006f00:	f04f 37ff 	mov.w	r7, #4294967295
 8006f04:	e7f4      	b.n	8006ef0 <__swbuf_r+0x64>
	...

08006f08 <__swsetup_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4b2a      	ldr	r3, [pc, #168]	; (8006fb4 <__swsetup_r+0xac>)
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	460c      	mov	r4, r1
 8006f12:	b118      	cbz	r0, 8006f1c <__swsetup_r+0x14>
 8006f14:	6a03      	ldr	r3, [r0, #32]
 8006f16:	b90b      	cbnz	r3, 8006f1c <__swsetup_r+0x14>
 8006f18:	f7ff f9d2 	bl	80062c0 <__sinit>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f22:	0718      	lsls	r0, r3, #28
 8006f24:	d422      	bmi.n	8006f6c <__swsetup_r+0x64>
 8006f26:	06d9      	lsls	r1, r3, #27
 8006f28:	d407      	bmi.n	8006f3a <__swsetup_r+0x32>
 8006f2a:	2309      	movs	r3, #9
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	e034      	b.n	8006fa4 <__swsetup_r+0x9c>
 8006f3a:	0758      	lsls	r0, r3, #29
 8006f3c:	d512      	bpl.n	8006f64 <__swsetup_r+0x5c>
 8006f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f40:	b141      	cbz	r1, 8006f54 <__swsetup_r+0x4c>
 8006f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f46:	4299      	cmp	r1, r3
 8006f48:	d002      	beq.n	8006f50 <__swsetup_r+0x48>
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f7ff faf0 	bl	8006530 <_free_r>
 8006f50:	2300      	movs	r3, #0
 8006f52:	6363      	str	r3, [r4, #52]	; 0x34
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	6923      	ldr	r3, [r4, #16]
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	f043 0308 	orr.w	r3, r3, #8
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	b94b      	cbnz	r3, 8006f84 <__swsetup_r+0x7c>
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7a:	d003      	beq.n	8006f84 <__swsetup_r+0x7c>
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 f850 	bl	8007024 <__smakebuf_r>
 8006f84:	89a0      	ldrh	r0, [r4, #12]
 8006f86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f8a:	f010 0301 	ands.w	r3, r0, #1
 8006f8e:	d00a      	beq.n	8006fa6 <__swsetup_r+0x9e>
 8006f90:	2300      	movs	r3, #0
 8006f92:	60a3      	str	r3, [r4, #8]
 8006f94:	6963      	ldr	r3, [r4, #20]
 8006f96:	425b      	negs	r3, r3
 8006f98:	61a3      	str	r3, [r4, #24]
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	b943      	cbnz	r3, 8006fb0 <__swsetup_r+0xa8>
 8006f9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fa2:	d1c4      	bne.n	8006f2e <__swsetup_r+0x26>
 8006fa4:	bd38      	pop	{r3, r4, r5, pc}
 8006fa6:	0781      	lsls	r1, r0, #30
 8006fa8:	bf58      	it	pl
 8006faa:	6963      	ldrpl	r3, [r4, #20]
 8006fac:	60a3      	str	r3, [r4, #8]
 8006fae:	e7f4      	b.n	8006f9a <__swsetup_r+0x92>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e7f7      	b.n	8006fa4 <__swsetup_r+0x9c>
 8006fb4:	200000f4 	.word	0x200000f4

08006fb8 <_sbrk_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d06      	ldr	r5, [pc, #24]	; (8006fd4 <_sbrk_r+0x1c>)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	602b      	str	r3, [r5, #0]
 8006fc4:	f7f9 fdfa 	bl	8000bbc <_sbrk>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_sbrk_r+0x1a>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_sbrk_r+0x1a>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	200004f0 	.word	0x200004f0

08006fd8 <__swhatbuf_r>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	460c      	mov	r4, r1
 8006fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	b096      	sub	sp, #88	; 0x58
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	461e      	mov	r6, r3
 8006fe8:	da0d      	bge.n	8007006 <__swhatbuf_r+0x2e>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ff0:	f04f 0100 	mov.w	r1, #0
 8006ff4:	bf0c      	ite	eq
 8006ff6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ffa:	2340      	movne	r3, #64	; 0x40
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	6031      	str	r1, [r6, #0]
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	b016      	add	sp, #88	; 0x58
 8007004:	bd70      	pop	{r4, r5, r6, pc}
 8007006:	466a      	mov	r2, sp
 8007008:	f000 f848 	bl	800709c <_fstat_r>
 800700c:	2800      	cmp	r0, #0
 800700e:	dbec      	blt.n	8006fea <__swhatbuf_r+0x12>
 8007010:	9901      	ldr	r1, [sp, #4]
 8007012:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007016:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800701a:	4259      	negs	r1, r3
 800701c:	4159      	adcs	r1, r3
 800701e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007022:	e7eb      	b.n	8006ffc <__swhatbuf_r+0x24>

08007024 <__smakebuf_r>:
 8007024:	898b      	ldrh	r3, [r1, #12]
 8007026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007028:	079d      	lsls	r5, r3, #30
 800702a:	4606      	mov	r6, r0
 800702c:	460c      	mov	r4, r1
 800702e:	d507      	bpl.n	8007040 <__smakebuf_r+0x1c>
 8007030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	2301      	movs	r3, #1
 800703a:	6163      	str	r3, [r4, #20]
 800703c:	b002      	add	sp, #8
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	ab01      	add	r3, sp, #4
 8007042:	466a      	mov	r2, sp
 8007044:	f7ff ffc8 	bl	8006fd8 <__swhatbuf_r>
 8007048:	9900      	ldr	r1, [sp, #0]
 800704a:	4605      	mov	r5, r0
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff fadb 	bl	8006608 <_malloc_r>
 8007052:	b948      	cbnz	r0, 8007068 <__smakebuf_r+0x44>
 8007054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007058:	059a      	lsls	r2, r3, #22
 800705a:	d4ef      	bmi.n	800703c <__smakebuf_r+0x18>
 800705c:	f023 0303 	bic.w	r3, r3, #3
 8007060:	f043 0302 	orr.w	r3, r3, #2
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	e7e3      	b.n	8007030 <__smakebuf_r+0xc>
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	6020      	str	r0, [r4, #0]
 800706c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	9b00      	ldr	r3, [sp, #0]
 8007074:	6163      	str	r3, [r4, #20]
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	6120      	str	r0, [r4, #16]
 800707a:	b15b      	cbz	r3, 8007094 <__smakebuf_r+0x70>
 800707c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f81d 	bl	80070c0 <_isatty_r>
 8007086:	b128      	cbz	r0, 8007094 <__smakebuf_r+0x70>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	f043 0301 	orr.w	r3, r3, #1
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	431d      	orrs	r5, r3
 8007098:	81a5      	strh	r5, [r4, #12]
 800709a:	e7cf      	b.n	800703c <__smakebuf_r+0x18>

0800709c <_fstat_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	; (80070bc <_fstat_r+0x20>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	f7f9 fd5e 	bl	8000b6a <_fstat>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d102      	bne.n	80070b8 <_fstat_r+0x1c>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	b103      	cbz	r3, 80070b8 <_fstat_r+0x1c>
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	bf00      	nop
 80070bc:	200004f0 	.word	0x200004f0

080070c0 <_isatty_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4d06      	ldr	r5, [pc, #24]	; (80070dc <_isatty_r+0x1c>)
 80070c4:	2300      	movs	r3, #0
 80070c6:	4604      	mov	r4, r0
 80070c8:	4608      	mov	r0, r1
 80070ca:	602b      	str	r3, [r5, #0]
 80070cc:	f7f9 fd5d 	bl	8000b8a <_isatty>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_isatty_r+0x1a>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_isatty_r+0x1a>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	200004f0 	.word	0x200004f0

080070e0 <_init>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	bf00      	nop
 80070e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e6:	bc08      	pop	{r3}
 80070e8:	469e      	mov	lr, r3
 80070ea:	4770      	bx	lr

080070ec <_fini>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	bf00      	nop
 80070f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f2:	bc08      	pop	{r3}
 80070f4:	469e      	mov	lr, r3
 80070f6:	4770      	bx	lr
